{"version":3,"sources":["io/whatwg/reader.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;AAIrB,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAErD,cAAc;AACd,MAAM,UAAU,iCAAiC,CAA8C,gBAA4C,EAAE,gBAA2C;IAEpL,MAAM,KAAK,GAAG,IAAI,cAAc,EAAE,CAAC;IACnC,IAAI,MAAM,GAAgC,IAAI,CAAC;IAE/C,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAiB;QAChD,KAAK,CAAC,MAAM,KAAK,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACvC,KAAK,CAAC,KAAK,CAAC,UAAU,IAAI,MAAM,IAAI,CAAC,UAAU,EAAE,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACtF,KAAK,CAAC,IAAI,CAAC,UAAU,IAAI,MAAM,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KAC3F,CAAC,CAAC;IAEH,OAAO,EAAE,QAAQ,EAAE,IAAI,cAAc,CAAC,KAAK,EAAE,EAAE,eAAe,EAAE,CAAC,IAAI,EAAE,EAAE,GAAG,gBAAgB,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC;IAE5G,KAAK,UAAU,IAAI;QACf,OAAO,MAAM,CAAC,MAAM,iBAAiB,CAAC,IAAI,CAAI,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACjF,CAAC;IAED,KAAK,UAAU,IAAI,CAAC,UAA2D,EAAE,MAA4B;QACzG,IAAI,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC;QAClC,IAAI,CAAC,GAA0C,IAAI,CAAC;QACpD,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE;YACpC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE;gBAC7B,OAAO;aACV;SACJ;QACD,UAAU,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;AACL,CAAC","file":"reader.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { DataType } from '../../type';\r\nimport { RecordBatch } from '../../recordbatch';\r\nimport { AsyncByteQueue } from '../../io/stream';\r\nimport { RecordBatchReader } from '../../ipc/reader';\r\n\r\n/** @ignore */\r\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\r\n\r\n    const queue = new AsyncByteQueue();\r\n    let reader: RecordBatchReader<T> | null = null;\r\n\r\n    const readable = new ReadableStream<RecordBatch<T>>({\r\n        async cancel() { await queue.close(); },\r\n        async start(controller) { await next(controller, reader || (reader = await open())); },\r\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\r\n    });\r\n\r\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\r\n\r\n    async function open() {\r\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\r\n    }\r\n\r\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\r\n        let size = controller.desiredSize;\r\n        let r: IteratorResult<RecordBatch<T>> | null = null;\r\n        while (!(r = await reader.next()).done) {\r\n            controller.enqueue(r.value);\r\n            if (size != null && --size <= 0) {\r\n                return;\r\n            }\r\n        }\r\n        controller.close();\r\n    }\r\n}\r\n"]}