{"version":3,"sources":["io/node/reader.ts"],"names":[],"mappings":"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","file":"reader.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { DataType } from '../../type';\r\nimport { Duplex, DuplexOptions } from 'stream';\r\nimport { RecordBatch } from '../../recordbatch';\r\nimport { AsyncByteQueue } from '../../io/stream';\r\nimport { RecordBatchReader } from '../../ipc/reader';\r\n\r\n/** @ignore */\r\nexport function recordBatchReaderThroughNodeStream<T extends { [key: string]: DataType } = any>(options?: DuplexOptions & { autoDestroy: boolean }) {\r\n    return new RecordBatchReaderDuplex<T>(options);\r\n}\r\n\r\n/** @ignore */\r\ntype CB = (error?: Error | null | undefined) => void;\r\n\r\n/** @ignore */\r\nclass RecordBatchReaderDuplex<T extends { [key: string]: DataType } = any> extends Duplex {\r\n    private _pulling: boolean = false;\r\n    private _autoDestroy: boolean = true;\r\n    private _reader: RecordBatchReader | null;\r\n    private _asyncQueue: AsyncByteQueue | null;\r\n    constructor(options?: DuplexOptions & { autoDestroy: boolean }) {\r\n        super({ allowHalfOpen: false, ...options, readableObjectMode: true, writableObjectMode: false });\r\n        this._reader = null;\r\n        this._pulling = false;\r\n        this._asyncQueue = new AsyncByteQueue();\r\n        this._autoDestroy = options && (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\r\n    }\r\n    _final(cb?: CB) {\r\n        const aq = this._asyncQueue;\r\n        aq && aq.close();\r\n        cb && cb();\r\n    }\r\n    _write(x: any, _: string, cb: CB) {\r\n        const aq = this._asyncQueue;\r\n        aq && aq.write(x);\r\n        cb && cb();\r\n        return true;\r\n    }\r\n    _read(size: number) {\r\n        const aq = this._asyncQueue;\r\n        if (aq && !this._pulling && (this._pulling = true)) {\r\n            (async () => {\r\n                if (!this._reader) {\r\n                    this._reader = await this._open(aq);\r\n                }\r\n                this._pulling = await this._pull(size, this._reader);\r\n            })();\r\n        }\r\n    }\r\n    _destroy(err: Error | null, cb: (error: Error | null) => void) {\r\n        const aq = this._asyncQueue;\r\n        if (aq) { err ? aq.abort(err) : aq.close(); }\r\n        cb(this._asyncQueue = this._reader = null);\r\n    }\r\n    async _open(source: AsyncByteQueue) {\r\n        return await (await RecordBatchReader.from<T>(source)).open({ autoDestroy: this._autoDestroy });\r\n    }\r\n    async _pull(size: number, reader: RecordBatchReader<T>) {\r\n        let r: IteratorResult<RecordBatch<T>> | null = null;\r\n        while (this.readable && !(r = await reader.next()).done) {\r\n            if (!this.push(r.value) || (size != null && --size <= 0)) { break; }\r\n        }\r\n        if (!this.readable || (r && r.done && (reader.autoDestroy || (await reader.reset().open()).closed))) {\r\n            this.push(null);\r\n            await reader.cancel();\r\n        }\r\n        return !this.readable;\r\n    }\r\n}\r\n"]}