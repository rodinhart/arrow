{"version":3,"sources":["io/node/iterable.ts"],"names":[],"mappings":"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","file":"iterable.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Readable } from 'stream';\r\nimport { isIterable, isAsyncIterable } from '../../util/compat';\r\n\r\n/** @ignore */\r\ntype ReadableOptions = import('stream').ReadableOptions;\r\n/** @ignore */\r\ntype SourceIterator<T> = Generator<T, void, number | null>;\r\n/** @ignore */\r\ntype AsyncSourceIterator<T> = AsyncGenerator<T, void, number | null>;\r\n\r\n/** @ignore */\r\nexport function toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableOptions): Readable {\r\n    if (isAsyncIterable<T>(source)) { return new AsyncIterableReadable(source[Symbol.asyncIterator]() as AsyncSourceIterator<T>, options); }\r\n    if (isIterable<T>(source)) { return new IterableReadable(source[Symbol.iterator]() as SourceIterator<T>, options); }\r\n    /* istanbul ignore next */\r\n    throw new Error(`toNodeStream() must be called with an Iterable or AsyncIterable`);\r\n}\r\n\r\n/** @ignore */\r\nclass IterableReadable<T extends Uint8Array | any> extends Readable {\r\n    private _pulling: boolean;\r\n    private _bytesMode: boolean;\r\n    private _iterator: SourceIterator<T>;\r\n    constructor(it: SourceIterator<T>, options?: ReadableOptions) {\r\n        super(options);\r\n        this._iterator = it;\r\n        this._pulling = false;\r\n        this._bytesMode = !options || !options.objectMode;\r\n    }\r\n    _read(size: number) {\r\n        const it = this._iterator;\r\n        if (it && !this._pulling && (this._pulling = true)) {\r\n            this._pulling = this._pull(size, it);\r\n        }\r\n    }\r\n    _destroy(e: Error | null, cb: (e: Error | null) => void) {\r\n        let it = this._iterator, fn: any;\r\n        it && (fn = e != null && it.throw || it.return);\r\n        fn && fn.call(it, e);\r\n        cb && cb(null);\r\n    }\r\n    private _pull(size: number, it: SourceIterator<T>) {\r\n        const bm = this._bytesMode;\r\n        let r: IteratorResult<T> | null = null;\r\n        while (this.readable && !(r = it.next(bm ? size : null)).done) {\r\n            if (size != null) {\r\n                size -= (bm && ArrayBuffer.isView(r.value) ? r.value.byteLength : 1);\r\n            }\r\n            if (!this.push(r.value) || size <= 0) { break; }\r\n        }\r\n        if ((r && r.done || !this.readable) && (this.push(null) || true)) {\r\n            it.return && it.return();\r\n        }\r\n        return !this.readable;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nclass AsyncIterableReadable<T extends Uint8Array | any> extends Readable {\r\n    private _pulling: boolean;\r\n    private _bytesMode: boolean;\r\n    private _iterator: AsyncSourceIterator<T>;\r\n    constructor(it: AsyncSourceIterator<T>, options?: ReadableOptions) {\r\n        super(options);\r\n        this._iterator = it;\r\n        this._pulling = false;\r\n        this._bytesMode = !options || !options.objectMode;\r\n    }\r\n    _read(size: number) {\r\n        const it = this._iterator;\r\n        if (it && !this._pulling && (this._pulling = true)) {\r\n            (async () => this._pulling = await this._pull(size, it))();\r\n        }\r\n    }\r\n    _destroy(e: Error | null, cb: (e: Error | null) => void) {\r\n        let it = this._iterator, fn: any;\r\n        it && (fn = e != null && it.throw || it.return);\r\n        fn && fn.call(it, e).then(() => cb && cb(null)) || (cb && cb(null));\r\n    }\r\n    private async _pull(size: number, it: AsyncSourceIterator<T>) {\r\n        const bm = this._bytesMode;\r\n        let r: IteratorResult<T> | null = null;\r\n        while (this.readable && !(r = await it.next(bm ? size : null)).done) {\r\n            if (size != null) {\r\n                size -= (bm && ArrayBuffer.isView(r.value) ? r.value.byteLength : 1);\r\n            }\r\n            if (!this.push(r.value) || size <= 0) { break; }\r\n        }\r\n        if ((r && r.done || !this.readable) && (this.push(null) || true)) {\r\n            it.return && it.return();\r\n        }\r\n        return !this.readable;\r\n    }\r\n}\r\n"]}