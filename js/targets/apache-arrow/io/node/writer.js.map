{"version":3,"sources":["io/node/writer.ts"],"names":[],"mappings":"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","file":"writer.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { DataType } from '../../type';\r\nimport { Duplex, DuplexOptions } from 'stream';\r\nimport { AsyncByteStream } from '../../io/stream';\r\nimport { RecordBatchWriter } from '../../ipc/writer';\r\n\r\n/** @ignore */\r\nexport function recordBatchWriterThroughNodeStream<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, options?: DuplexOptions & { autoDestroy: boolean }) {\r\n    return new RecordBatchWriterDuplex(new this<T>(options));\r\n}\r\n\r\n/** @ignore */\r\ntype CB = (error?: Error | null | undefined) => void;\r\n\r\n/** @ignore */\r\nclass RecordBatchWriterDuplex<T extends { [key: string]: DataType } = any> extends Duplex {\r\n    private _pulling: boolean = false;\r\n    private _reader: AsyncByteStream | null;\r\n    private _writer: RecordBatchWriter | null;\r\n    constructor(writer: RecordBatchWriter<T>, options?: DuplexOptions) {\r\n        super({ allowHalfOpen: false, ...options, writableObjectMode: true, readableObjectMode: false });\r\n        this._writer = writer;\r\n        this._reader = new AsyncByteStream(writer);\r\n    }\r\n    _final(cb?: CB) {\r\n        const writer = this._writer;\r\n        writer && writer.close();\r\n        cb && cb();\r\n    }\r\n    _write(x: any, _: string, cb: CB) {\r\n        const writer = this._writer;\r\n        writer && writer.write(x);\r\n        cb && cb();\r\n        return true;\r\n    }\r\n    _read(size: number) {\r\n        const it = this._reader;\r\n        if (it && !this._pulling && (this._pulling = true)) {\r\n            (async () => this._pulling = await this._pull(size, it))();\r\n        }\r\n    }\r\n    _destroy(err: Error | null, cb: (error: Error | null) => void) {\r\n        const writer = this._writer;\r\n        if (writer) { err ? writer.abort(err) : writer.close(); }\r\n        cb(this._reader = this._writer = null);\r\n    }\r\n    async _pull(size: number, reader: AsyncByteStream) {\r\n        let r: IteratorResult<Uint8Array> | null = null;\r\n        while (this.readable && !(r = await reader.next(size || null)).done) {\r\n            if (size != null && r.value) {\r\n                size -= r.value.byteLength;\r\n            }\r\n            if (!this.push(r.value) || size <= 0) { break; }\r\n        }\r\n        if ((r && r.done || !this.readable)) {\r\n            this.push(null);\r\n            await reader.cancel();\r\n        }\r\n        return !this.readable;\r\n    }\r\n}\r\n"]}