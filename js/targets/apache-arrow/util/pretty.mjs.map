{"version":3,"sources":["util/pretty.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;AAErB,cAAc,CAAC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAErC,cAAc;AACd,MAAM,UAAU,aAAa,CAAC,CAAM;IAChC,IAAI,CAAC,KAAK,IAAI,EAAE;QAAE,OAAO,MAAM,CAAC;KAAE;IAClC,IAAI,CAAC,KAAK,IAAI,EAAE;QAAE,OAAO,WAAW,CAAC;KAAE;IACvC,QAAQ,OAAO,CAAC,EAAE;QACd,KAAK,QAAQ,CAAC,CAAC,OAAO,GAAG,CAAC,EAAE,CAAC;QAC7B,KAAK,QAAQ,CAAC,CAAC,OAAO,GAAG,CAAC,EAAE,CAAC;QAC7B,KAAK,QAAQ,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC;KAClC;IACD,sDAAsD;IACtD,sDAAsD;IACtD,sDAAsD;IACtD,iBAAiB;IACjB,IAAI,OAAO,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,UAAU,EAAE;QAC7C,OAAO,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC;KAC1C;IACD,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC","file":"pretty.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\n/** @ignore */ const undf = void (0);\r\n\r\n/** @ignore */\r\nexport function valueToString(x: any) {\r\n    if (x === null) { return 'null'; }\r\n    if (x === undf) { return 'undefined'; }\r\n    switch (typeof x) {\r\n        case 'number': return `${x}`;\r\n        case 'bigint': return `${x}`;\r\n        case 'string': return `\"${x}\"`;\r\n    }\r\n    // If [Symbol.toPrimitive] is implemented (like in BN)\r\n    // use it instead of JSON.stringify(). This ensures we\r\n    // print BigInts, Decimals, and Binary in their native\r\n    // representation\r\n    if (typeof x[Symbol.toPrimitive] === 'function') {\r\n        return x[Symbol.toPrimitive]('string');\r\n    }\r\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\r\n}\r\n"]}