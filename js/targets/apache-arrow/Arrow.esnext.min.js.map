{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","util/buffer.ts","util/compat.ts","io/interfaces.ts","io/adapters.ts","flatbuffers/js/flatbuffers.mjs","util/utf8.ts","text-encoding-utf-8/lib/encoding.lib.mjs","buffer/index.js","(webpack)/buildin/global.js","base64-js/index.js","ieee754/index.js","isarray/index.js","fb/Schema.ts","fb/Message.ts","vector.ts","enum.ts","util/bit.ts","visitor.ts","visitor/typecomparator.ts","type.ts","data.ts","util/pretty.ts","builder/valid.ts","builder/buffer.ts","builder.ts","builder/bool.ts","builder/null.ts","builder/date.ts","builder/decimal.ts","builder/dictionary.ts","builder/fixedsizebinary.ts","util/math.ts","builder/float.ts","util/bn.ts","builder/int.ts","builder/time.ts","builder/timestamp.ts","builder/interval.ts","builder/binary.ts","builder/utf8.ts","builder/run.ts","vector/row.ts","util/vector.ts","vector/chunked.ts","column.ts","util/args.ts","schema.ts","builder/list.ts","builder/fixedsizelist.ts","builder/map.ts","builder/struct.ts","builder/union.ts","visitor/set.ts","visitor/builderctor.ts","fb/File.ts","builder/index.ts","ipc/metadata/file.ts","io/stream.ts","io/file.ts","util/int.ts","visitor/vectorloader.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","ipc/message.ts","visitor/vectorassembler.ts","visitor/jsontypeassembler.ts","visitor/jsonvectorassembler.ts","ipc/writer.ts","util/recordbatch.ts","vector/base.ts","vector/binary.ts","vector/bool.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/struct.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","vector/utf8.ts","util/fn.ts","visitor/get.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","table.ts","recordbatch.ts","ipc/reader.ts","io/whatwg/builder.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts","io/whatwg/iterable.ts","io/whatwg/reader.ts","io/whatwg/writer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ByteBuffer","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","memcpy","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","Uint8Array","buffer","byteOffset","src","Math","min","set","joinUint8Arrays","chunks","size","sliced","result","xOffset","yOffset","xLen","yLen","x","y","j","length","collapseContiguousByteRanges","reduce","b","offset","index","Infinity","subarray","slice","toArrayBufferView","ArrayBufferViewCtor","input","bytes","isView","BYTES_PER_ELEMENT","from","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","Int32Array","toBigInt64Array","toUint8Array","toUint16Array","Uint16Array","toUint32Array","Uint32Array","toBigUint64Array","toFloat32Array","Float32Array","toFloat64Array","Float64Array","toUint8ClampedArray","Uint8ClampedArray","pump","iterator","next","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","done","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","async","toArrayBufferViewAsyncIterator","emit","asyncIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","a","BigIntCtor","BigIntAvailable","BigIntUnavailableError","Error","BigIntUnavailable","asIntN","asUintN","BigInt","BigInt64ArrayCtor","BigInt64ArrayAvailable","BigInt64ArrayUnavailableError","BigInt64Array","BigUint64ArrayCtor","BigUint64ArrayAvailable","BigUint64ArrayUnavailableError","BigUint64Array","isNumber","isBoolean","isFunction","isObject","isPromise","then","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isReadableDOMStream","isWritableDOMStream","isWritableNodeStream","isReadableNodeStream","ITERATOR_DONE","freeze","ArrowJSON","_json","this","ReadableInterop","_getDOMStream","tee","writable","options","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","AsyncQueue","super","_values","resolvers","_closedPromise","Promise","_closedPromiseResolve","reason","return","_ensureOpen","push","shift","resolve","_error","error","reject","undefined","_","abort","close","_args","fromIterable","cmd","threw","bufferLength","byteRange","isNaN","e","throw","fromAsyncIterable","fromDOMStream","AdaptiveByteReader","releaseLock","fromNodeStream","stream","events","event","err","onEvent","race","map","isFinite","cleanup","evt","fn","destroy","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","read","readInto","handler","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","_Buffer","Buffer","useNativeEncoders","TextDecoder","TextEncoder","decodeUtf8","decoder","decode","toString","encodeUtf8","encoder","encode","inRange","max","ToDictionary","TypeError","Stream","tokens","endOfStream","prepend","token","Array","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","bite","code_point","UTF8Encoder","count","temp","input_stream","code_points","apply","indexOf","cp","codePointsToString","opt_string","string","u","stringToCodePoints","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","array","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","type","data","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","buf","readUInt16BE","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","fromByteArray","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","global","foo","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","concat","list","pos","swap16","swap32","swap64","arguments","inspect","match","join","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","g","Function","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","lookup","num","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","arrow","apache","org","AbstractVector","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","__init","builder","startNull","endNull","Struct_","startStruct_","endStruct_","List","startList","endList","LargeList","startLargeList","endLargeList","FixedSizeList","listSize","startFixedSizeList","addListSize","endFixedSizeList","Map","keysSorted","startMap","addKeysSorted","endMap","Union","Sparse","typeIdsOffset","numElems","startUnion","addMode","addTypeIds","endUnion","Int","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","HALF","precision","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","startUtf8","endUtf8","Binary","startBinary","endBinary","LargeUtf8","startLargeUtf8","endLargeUtf8","LargeBinary","startLargeBinary","endLargeBinary","FixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","startBool","endBool","Decimal","scale","startDecimal","addScale","endDecimal","Date","MILLISECOND","unit","startDate","addUnit","endDate","Time","startTime","endTime","Timestamp","SECOND","optionalEncoding","timezoneOffset","startTimestamp","addTimezone","endTimestamp","Interval","YEAR_MONTH","startInterval","endInterval","Duration","startDuration","endDuration","KeyValue","keyOffset","valueOffset","startKeyValue","addKey","addValue","endKeyValue","DictionaryEncoding","id","indexTypeOffset","isOrdered","startDictionaryEncoding","addId","addIndexType","addIsOrdered","endDictionaryEncoding","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","customMetadataOffset","startField","addName","addNullable","addTypeType","addType","addDictionary","addChildren","addCustomMetadata","endField","Schema","Little","endianness","fieldsOffset","startSchema","addEndianness","addFields","endSchema","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","DictionaryBatch","dataOffset","isDelta","startDictionaryBatch","addData","addIsDelta","endDictionaryBatch","Message","V1","version","headerType","headerOffset","bodyLength","startMessage","addVersion","addHeaderType","addHeader","addBodyLength","endMessage","BufferType","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","values","xs","begin","context","byteIndex","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","cnt","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","Visitor","nodes","args","node","visit","getVisitFn","throwIfNotFound","visitor","dtype","inferDType","visitNull","visitBool","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","Struct","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","typeId","SINGLE","DOUBLE","MICROSECOND","NANOSECOND","DAY","DAY_TIME","Dense","schema","constructor","instance","compareFields","fields","others","every","f","compareField","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","timezone","compareTime","compareUnion","typeIds","children","compareInterval","indices","dictionary","proto","ArrayType","child","valueType","typeIdToChildIndex","idx","getId","atomicDictionaryId","strideForType","nullCount","childData","_nullCount","stride","nullBitmap","childStride","_sliceBuffers","clone","_sliceChildren","newLength","VALIDITY","TYPE","OFFSET","DATA","valueOffsetsOrChildren","valueToString","toPrimitive","JSON","stringify","createIsValidFunction","nullValues","fnBody","noNaNs","filter","valueToCase","roundLengthUpToNearest64Bytes","BPE","_resize","extra","reserved","sliceOrExtendArray","DataBufferBuilder","reserve","BitmapBufferBuilder","numValid","cur","OffsetsBufferBuilder","flush","_ArrayType64","buffer64","ArrayType64","nulls","_nulls","_isValid","queueingStrategy","highWaterMark","sizeProperty","numChunks","new","append","toVector","throughIterable","throughAsyncIterable","numInvalid","_offsets","_typeIds","reservedLength","reservedByteLength","setValid","isValid","setValue","_setValue","valid","numChildren","offsets","last","forEach","opts","_pendingLength","pending","_pending","current","_flush","pendingLength","_flushPending","DateDayBuilder","DateMillisecondBuilder","hashFn","_dictionaryOffset","_keysToIndices","valueToKey","keysToIndices","prev","_dictionary","curr","f64","u32","uint16ToFloat64","h","expo","sigf","sign","float64ToUint16","Float32Builder","Float64Builder","isArrowBigNumSymbol","for","BigNum","setPrototypeOf","SignedBigNum","UnsignedBigNum","DecimalBigNum","bignumToNumber","bn","signed","words","number","bignumToString","bignumToBigInt","decimalToString","digits","base32","checks","reverse","valueOf","hint","assign","Int8Builder","Int16Builder","Int32Builder","toBigInt","Uint8Builder","Uint16Builder","Uint32Builder","memo","TimeSecondBuilder","TimeMillisecondBuilder","TimeMicrosecondBuilder","TimeNanosecondBuilder","TimestampSecondBuilder","TimestampMillisecondBuilder","TimestampMicrosecondBuilder","TimestampNanosecondBuilder","IntervalDayTimeBuilder","IntervalYearMonthBuilder","kParent","kRowIndex","kKeyToIdx","kIdxToVal","kCustomInspect","parent","numKeys","ktoi","itov","getValue","getIndex","ki","keys","vi","k","v","kr","vr","has","callbackfn","thisArg","callback","defineProperties","MapRow","createRowProxy","getChildAt","StructRow","defineRowProxyProperties","findIndex","desc","row","setter","Proxy","getKey","RowProxyHandler","isExtensible","deleteProperty","preventExtensions","ownKeys","receiver","Reflect","clampIndex","adjust","clampRange","big0","isNaNFast","createElementComparator","search","typeofSearch","valueOfSearch","comparators","createSubElementsComparator","creatMapComparator","createArrayLikeComparator","createVectorComparator","createObjectComparator","compareArray","compareObject","vec","compareVector","lKeyItr","rKeyItr","rValItr","rVal","lKey","rKey","vectors","calculateOffsets","_type","_chunks","_chunkOffsets","_length","_numChildren","selectChunkArgs","flatten","chunk","isDictionary","_indices","_sliceInternal","columns","_children","vector","mid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","chunkIndex","fromIndex","slices","chunkOffsets","chunkLength","chunkOffset","to","_field","SingleChunkColumn","rest","some","metadata","column","_chunk","selectArgs","Ctor","vals","_selectArgs","selectFieldArgs","_selectFieldArgs","_selectChunkArgs","selectVectorChildrenArgs","_selectVectorChildrenArgs","selectColumnChildrenArgs","_selectColumnChildrenArgs","toKeysAndValues","entries","fieldIndex","valueIndex","dictionaries","generateDictionaryMap","compareSchemas","columnNames","names","columnIndices","Boolean","curFields","mergeMaps","newFields","f2","newDictionaries","m1","m2","_run","run","childIndex","_valueToChildTypeId","childTypeId","SparseUnionBuilder","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","values64","long","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","itr","_setStructVectorValue","_setStructArrayValue","_setStructObjectValue","newBuilder","defaultOptions","getChildOptions","T","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","startFooter","addSchema","addDictionaries","addRecordBatches","endFooter","metaDataLength","_Block","_Footer","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","numRecordBatches","rb","FileBlock","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","finishFooterBuffer","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","sync","peek","body","closed","cancel","readAt","getInt32","file","_handle","stat","bytesRead","intAsHex","kPowersOfTen","BaseInt64","L","R","product","lessThan","_times","_plus","out_buffer","posn","group","multiple","times","plus","left","right","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","visitMany","readTypeIds","readDictionary","nextBufferRange","sources","isTimestamp","isInt","isTime","isDate","convertArray","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","startTypeIdsVector","createTypeIdsVector","indexType","recordBatchFromJSON","fieldNodesFromJSON","buffersFromJSON","fieldChildrenFromJSON","fromJSON","fieldNodes","validity","BufferRegion","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","header","_version","_headerType","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","finishMessageBuffer","_nodes","_buffers","_isDelta","_id","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","dictType","dictMeta","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","platformIsLittleEndian","Big","_schema","fieldsLength","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","batch","nodesLength","decodeFieldNodes","bufferRegions","buffersLength","decodeBuffers","dictionaryBatch","createFieldNode","setInt16","invalidMessageType","nullMessage","invalidMessageMetadata","expected","invalidMessageBodyLength","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","_body","_batchIndex","_dictionaryIndex","batches","flattenDataSources","MAGIC_STR","MAGIC","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","_bufferRegions","assembler","vectorChildren","assembleResult","isNull","addBuffer","_nullV","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","bigNumsToStrings","binaryToString","octets","toUpperCase","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","autoDestroy","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","writableStrategy","readableStrategy","writeAll","writeAllAsync","reset","sink","objectMode","_writeFooter","compareTo","_writeSchema","payload","_writeRecordBatch","flatbufferSize","prefixSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","assemble","_writeDictionaries","_writeBodyBuffers","padding","_writeDictionaryBatch","writer","_writeMagic","_dictionaries","fieldToJSON","dictionaryBatchToJSON","records","noopBuf","nullBufs","bitmapLength","distributeVectorsIntoRecordBatches","vecs","batchArgs","numBatches","batchLength","numColumns","distributeChildData","uniformlyDistributeChunksAcrossRecordBatches","_changeLengthAndBackfillNullBitmap","_bindDataAccessors","VectorName","isConcatSpreadable","vectorFromValuesWithType","DateDayVector","DateMillisecondVector","ArrowType","vectorTypeToDataType","InputType","arrayTypeToDataType","convertTo16Bit","Float16Vector","Float32Vector","Float64Vector","typeCtor","dataCtor","ctor","IntervalDayTimeVector","IntervalYearMonthVector","is64bit","convert32To64Bit","Int8Vector","Int16Vector","Int32Vector","_values64","Uint8Vector","Uint16Vector","Uint32Vector","_row","bound","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","DenseUnionVector","SparseUnionVector","partial0","partial2","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","decimal","indexOfValue","searchElement","indexOfNull","indexOfUnion","vectorIterator","getFn","nullByte","nullBit","nullableIterator","arrayOfVector","variableWidthColumnErrorMessage","____","visitFields","newDataType","transform","getByteWidth","wrapNullableSet","VectorCtor","partialType0","empty","fromStruct","tableFromIterable","tableFromAsyncIterable","isSync","open","opening","cols","selectColumnArgs","getColumnAt","getColumnIndex","nameToIndex","selectAt","columnName","oldToNew","newIdx","_f","_fs","fs","vs","batchData","ensureSameLengthData","collect","impl","_impl","isFile","isAsync","isStream","readRecordBatch","RecordBatchStreamReader","fromArrowJSON","AsyncRecordBatchFileReader","AsyncRecordBatchStreamReader","fromFileHandle","RecordBatchFileReader","fromAsyncByteStream","fromByteStream","readAllSync","readAllAsync","_recordBatchIndex","_loadVectors","types","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","_readFooter","_readDictionaryBatch","seek","_numChunks","_finished","_bufferedSize","builderOptions","_controller","_builder","_getSize","chunkByteLength","readableHighWaterMark","writableHighWaterMark","ReadableStream","_maybeFlush","WritableStream","_writeValueAndReturnChunkSize","bufferedSize","controller","desiredSize","_enqueue","enqueue","Value","Literal","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","func","CustomPredicate","bind_","and","or","custom","countBy","scan","scanReverse","predicate","batchIndex","numRows","count_by","countByteLength","ceil","counts","_predicate","isBound","util","util_buffer","bm","hwm","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { flatbuffers } from 'flatbuffers';\r\nimport { encodeUtf8 } from '../util/utf8';\r\nimport ByteBuffer = flatbuffers.ByteBuffer;\r\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\r\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\r\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\r\n\r\n/** @ignore */\r\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\r\n\r\n/** @ignore */\r\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\r\n    let result = chunks[0] ? [chunks[0]] : [];\r\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\r\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\r\n        x = result[j];\r\n        y = chunks[i];\r\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\r\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\r\n            y && (result[++j] = y);\r\n            continue;\r\n        }\r\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\r\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\r\n        // continue if the byte ranges of x and y aren't contiguous\r\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\r\n            y && (result[++j] = y);\r\n            continue;\r\n        }\r\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\r\n    }\r\n    return result;\r\n}\r\n\r\n/** @ignore */\r\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\r\n    const targetByteLength = target.byteLength;\r\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\r\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\r\n    dst.set(src, targetByteOffset);\r\n    return target;\r\n}\r\n\r\n/** @ignore */\r\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\r\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\r\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\r\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\r\n    let result = collapseContiguousByteRanges(chunks);\r\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\r\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\r\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\r\n    for (let n = result.length; ++index < n;) {\r\n        source = result[index];\r\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\r\n        if (length <= (offset + sliced.length)) {\r\n            if (sliced.length < source.length) {\r\n                result[index] = source.subarray(sliced.length);\r\n            } else if (sliced.length === source.length) { index++; }\r\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\r\n            break;\r\n        }\r\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\r\n        offset += sliced.length;\r\n    }\r\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\r\n}\r\n\r\n/** @ignore */\r\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\r\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\r\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\r\n\r\n/** @ignore */\r\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\r\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\r\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\r\n\r\n    let value: any = isIteratorResult(input) ? input.value : input;\r\n\r\n    if (value instanceof ArrayBufferViewCtor) {\r\n        if (ArrayBufferViewCtor === Uint8Array) {\r\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\r\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\r\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\r\n        }\r\n        return value;\r\n    }\r\n    if (!value) { return new ArrayBufferViewCtor(0); }\r\n    if (typeof value === 'string') { value = encodeUtf8(value); }\r\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\r\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\r\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\r\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\r\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\r\n}\r\n\r\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\r\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\r\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\r\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\r\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\r\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\r\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\r\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\r\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\r\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\r\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\r\n\r\n/** @ignore */\r\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\r\n\r\n/** @ignore */\r\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\r\n\r\n/** @ignore */\r\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\r\n\r\n    const wrap = function*<T>(x: T) { yield x; };\r\n    const buffers: Iterable<ArrayBufferViewInput> =\r\n                   (typeof source === 'string') ? wrap(source)\r\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\r\n              : (source instanceof ArrayBuffer) ? wrap(source)\r\n           : (source instanceof SharedArrayBuf) ? wrap(source)\r\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\r\n\r\n    yield* pump((function* (it: Iterator<ArrayBufferViewInput, any, number | undefined>): Generator<T, void, number | undefined> {\r\n        let r: IteratorResult<any> = <any> null;\r\n        do {\r\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\r\n        } while (!r.done);\r\n    })(buffers[Symbol.iterator]()));\r\n    return new ArrayCtor();\r\n}\r\n\r\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\r\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\r\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\r\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\r\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\r\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\r\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\r\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\r\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\r\n\r\n/** @ignore */\r\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\r\n\r\n/** @ignore */\r\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncGenerator<T, T, number | undefined> {\r\n\r\n    // if a Promise, unwrap the Promise and iterate the resolved value\r\n    if (isPromise<ArrayBufferViewInput>(source)) {\r\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\r\n    }\r\n\r\n    const wrap = async function*<T>(x: T) { yield await x; };\r\n    const emit = async function* <T extends Iterable<any>>(source: T) {\r\n        yield* pump((function*(it: Iterator<any>) {\r\n            let r: IteratorResult<any> = <any> null;\r\n            do {\r\n                r = it.next(yield r && r.value);\r\n            } while (!r.done);\r\n        })(source[Symbol.iterator]()));\r\n    };\r\n\r\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\r\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\r\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\r\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\r\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\r\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\r\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\r\n                                                     : source; // otherwise if AsyncIterable, use it\r\n\r\n    yield* pump((async function* (it: AsyncIterator<ArrayBufferViewInput, any, number | undefined>): AsyncGenerator<T, void, number | undefined> {\r\n        let r: IteratorResult<any> = <any> null;\r\n        do {\r\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\r\n        } while (!r.done);\r\n    })(buffers[Symbol.asyncIterator]()));\r\n    return new ArrayCtor();\r\n}\r\n\r\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\r\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\r\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\r\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\r\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\r\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\r\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\r\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\r\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\r\n\r\n/** @ignore */\r\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\r\n    // If we have a non-zero offset, create a new offsets array with the values\r\n    // shifted by the start offset, such that the new start offset is 0\r\n    if (offset !== 0) {\r\n        valueOffsets = valueOffsets.slice(0, length + 1);\r\n        for (let i = -1; ++i <= length;) {\r\n            valueOffsets[i] += offset;\r\n        }\r\n    }\r\n    return valueOffsets;\r\n}\r\n\r\n/** @ignore */\r\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\r\n    let i = 0, n = a.length;\r\n    if (n !== b.length) { return false; }\r\n    if (n > 0) {\r\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\r\n    }\r\n    return true;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\r\n\r\n/** @ignore */\r\ntype FSReadStream = import('fs').ReadStream;\r\n/** @ignore */\r\ntype FileHandle = import('fs').promises.FileHandle;\r\n\r\n/** @ignore */\r\nexport interface Subscription {\r\n    unsubscribe: () => void;\r\n}\r\n\r\n/** @ignore */\r\nexport interface Observer<T> {\r\n    closed?: boolean;\r\n    next: (value: T) => void;\r\n    error: (err: any) => void;\r\n    complete: () => void;\r\n}\r\n\r\n/** @ignore */\r\nexport interface Observable<T> {\r\n    subscribe: (observer: Observer<T>) => Subscription;\r\n}\r\n\r\n/** @ignore */\r\nconst [BigIntCtor, BigIntAvailable] = (() => {\r\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\r\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\r\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\r\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\r\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\r\n})() as [BigIntConstructor, boolean];\r\n\r\n/** @ignore */\r\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\r\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\r\n    class BigInt64ArrayUnavailable {\r\n        static get BYTES_PER_ELEMENT() { return 8; }\r\n        static of() { throw BigInt64ArrayUnavailableError(); }\r\n        static from() { throw BigInt64ArrayUnavailableError(); }\r\n        constructor() { throw BigInt64ArrayUnavailableError(); }\r\n    }\r\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\r\n})() as [BigInt64ArrayConstructor, boolean];\r\n\r\n/** @ignore */\r\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\r\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\r\n    class BigUint64ArrayUnavailable {\r\n        static get BYTES_PER_ELEMENT() { return 8; }\r\n        static of() { throw BigUint64ArrayUnavailableError(); }\r\n        static from() { throw BigUint64ArrayUnavailableError(); }\r\n        constructor() { throw BigUint64ArrayUnavailableError(); }\r\n    }\r\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\r\n})() as [BigUint64ArrayConstructor, boolean];\r\n\r\nexport { BigIntCtor as BigInt, BigIntAvailable };\r\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\r\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\r\n\r\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\r\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\r\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\r\n/** @ignore */\r\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\r\n\r\n/** @ignore */\r\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\r\n    return isObject(x) && isFunction(x.then);\r\n};\r\n\r\n/** @ignore */\r\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\r\n    return isObject(x) && isFunction(x.subscribe);\r\n};\r\n\r\n/** @ignore */\r\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\r\n    return isObject(x) && isFunction(x[Symbol.iterator]);\r\n};\r\n\r\n/** @ignore */\r\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\r\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\r\n};\r\n\r\n/** @ignore */\r\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\r\n    return isObject(x) && isObject(x['schema']);\r\n};\r\n\r\n/** @ignore */\r\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\r\n    return isObject(x) && isNumber(x['length']);\r\n};\r\n\r\n/** @ignore */\r\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\r\n    return isObject(x) && ('done' in x) && ('value' in x);\r\n};\r\n\r\n/** @ignore */\r\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\r\n    return isObject(x) &&\r\n        isFunction(x['abort']) &&\r\n        isFunction(x['close']) &&\r\n        isFunction(x['start']) &&\r\n        isFunction(x['write']);\r\n};\r\n\r\n/** @ignore */\r\nexport const isFileHandle = (x: any): x is FileHandle => {\r\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\r\n};\r\n\r\n/** @ignore */\r\nexport const isFSReadStream = (x: any): x is FSReadStream => {\r\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\r\n};\r\n\r\n/** @ignore */\r\nexport const isFetchResponse = (x: any): x is Response => {\r\n    return isObject(x) && isReadableDOMStream(x['body']);\r\n};\r\n\r\n/** @ignore */\r\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\r\n    return isObject(x) &&\r\n        isFunction(x['abort']) &&\r\n        isFunction(x['getWriter']) &&\r\n        !(x instanceof ReadableInterop);\r\n};\r\n\r\n/** @ignore */\r\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\r\n    return isObject(x) &&\r\n        isFunction(x['cancel']) &&\r\n        isFunction(x['getReader']) &&\r\n        !(x instanceof ReadableInterop);\r\n};\r\n\r\n/** @ignore */\r\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\r\n    return isObject(x) &&\r\n        isFunction(x['end']) &&\r\n        isFunction(x['write']) &&\r\n        isBoolean(x['writable']) &&\r\n        !(x instanceof ReadableInterop);\r\n};\r\n\r\n/** @ignore */\r\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\r\n    return isObject(x) &&\r\n        isFunction(x['read']) &&\r\n        isFunction(x['pipe']) &&\r\n        isBoolean(x['readable']) &&\r\n        !(x instanceof ReadableInterop);\r\n};\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport streamAdapters from './adapters';\r\n\r\n/** @ignore */\r\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\r\n\r\n/** @ignore */\r\nexport type FileHandle = import('fs').promises.FileHandle;\r\n/** @ignore */\r\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\r\n/** @ignore */\r\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\r\n\r\n/** @ignore */\r\nexport class ArrowJSON {\r\n    // @ts-ignore\r\n    constructor(private _json: ArrowJSONLike) {}\r\n    public get schema(): any { return this._json['schema']; }\r\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\r\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\r\n}\r\n\r\n/** @ignore */\r\nexport interface Readable<T> {\r\n\r\n    readonly closed: Promise<void>;\r\n    cancel(reason?: any): Promise<void>;\r\n\r\n    read(size?: number | null): Promise<T | null>;\r\n    peek(size?: number | null): Promise<T | null>;\r\n    throw(value?: any): Promise<IteratorResult<any>>;\r\n    return(value?: any): Promise<IteratorResult<any>>;\r\n    next(size?: number | null): Promise<IteratorResult<T>>;\r\n}\r\n\r\n/** @ignore */\r\nexport interface Writable<T> {\r\n    readonly closed: Promise<void>;\r\n    close(): void;\r\n    write(chunk: T): void;\r\n    abort(reason?: any): void;\r\n}\r\n\r\n/** @ignore */\r\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\r\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\r\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\r\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\r\n}\r\n\r\n/** @ignore */\r\nexport abstract class ReadableInterop<T> {\r\n\r\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\r\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\r\n\r\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\r\n        return this._getDOMStream().tee();\r\n    }\r\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\r\n        return this._getNodeStream().pipe(writable, options);\r\n    }\r\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\r\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\r\n        return this._getDOMStream().pipeThrough(duplex, options);\r\n    }\r\n\r\n    protected _DOMStream?: ReadableStream<T>;\r\n    private _getDOMStream() {\r\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\r\n    }\r\n\r\n    protected _nodeStream?: import('stream').Readable;\r\n    private _getNodeStream() {\r\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\r\n    }\r\n}\r\n\r\n/** @ignore */\r\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\r\n\r\n/** @ignore */\r\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\r\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\r\n\r\n    protected _values: TWritable[] = [];\r\n    protected _error?: { error: any; };\r\n    protected _closedPromise: Promise<void>;\r\n    protected _closedPromiseResolve?: (value?: any) => void;\r\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\r\n\r\n    constructor() {\r\n        super();\r\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\r\n    }\r\n\r\n    public get closed(): Promise<void> { return this._closedPromise; }\r\n    public async cancel(reason?: any) { await this.return(reason); }\r\n    public write(value: TWritable) {\r\n        if (this._ensureOpen()) {\r\n            this.resolvers.length <= 0\r\n                ? (this._values.push(value))\r\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\r\n        }\r\n    }\r\n    public abort(value?: any) {\r\n        if (this._closedPromiseResolve) {\r\n            this.resolvers.length <= 0\r\n                ? (this._error = { error: value })\r\n                : (this.resolvers.shift()!.reject({ done: true, value }));\r\n        }\r\n    }\r\n    public close() {\r\n        if (this._closedPromiseResolve) {\r\n            const { resolvers } = this;\r\n            while (resolvers.length > 0) {\r\n                resolvers.shift()!.resolve(ITERATOR_DONE);\r\n            }\r\n            this._closedPromiseResolve();\r\n            this._closedPromiseResolve = undefined;\r\n        }\r\n    }\r\n\r\n    public [Symbol.asyncIterator]() { return this; }\r\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\r\n        return streamAdapters.toDOMStream(\r\n            (this._closedPromiseResolve || this._error)\r\n                ? (this as AsyncIterable<TReadable>)\r\n                : (this._values as any) as Iterable<TReadable>,\r\n            options);\r\n    }\r\n    public toNodeStream(options?: import('stream').ReadableOptions) {\r\n        return streamAdapters.toNodeStream(\r\n            (this._closedPromiseResolve || this._error)\r\n                ? (this as AsyncIterable<TReadable>)\r\n                : (this._values as any) as Iterable<TReadable>,\r\n            options);\r\n    }\r\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\r\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\r\n\r\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\r\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\r\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\r\n        if (this._values.length > 0) {\r\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\r\n        } else if (this._error) {\r\n            return Promise.reject({ done: true, value: this._error.error });\r\n        } else if (!this._closedPromiseResolve) {\r\n            return Promise.resolve(ITERATOR_DONE);\r\n        } else {\r\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\r\n                this.resolvers.push({ resolve, reject });\r\n            });\r\n        }\r\n    }\r\n\r\n    protected _ensureOpen() {\r\n        if (this._closedPromiseResolve) {\r\n            return true;\r\n        }\r\n        throw new Error(`${this} is closed`);\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport {\r\n    toUint8Array,\r\n    joinUint8Arrays,\r\n    ArrayBufferViewInput,\r\n    toUint8ArrayIterator,\r\n    toUint8ArrayAsyncIterator\r\n} from '../util/buffer';\r\n\r\nimport { ReadableDOMStreamOptions } from './interfaces';\r\n\r\ninterface ReadableStreamReadResult<T> { done: boolean; value: T; }\r\ntype Uint8ArrayGenerator = Generator<Uint8Array, null, { cmd: 'peek' | 'read', size: number }>;\r\ntype AsyncUint8ArrayGenerator = AsyncGenerator<Uint8Array, null, { cmd: 'peek' | 'read', size: number }>;\r\n\r\n/** @ignore */\r\nexport default {\r\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): Uint8ArrayGenerator {\r\n        return pump(fromIterable<T>(source));\r\n    },\r\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncUint8ArrayGenerator {\r\n        return pump(fromAsyncIterable<T>(source));\r\n    },\r\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncUint8ArrayGenerator {\r\n        return pump(fromDOMStream<T>(source));\r\n    },\r\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncUint8ArrayGenerator {\r\n        return pump(fromNodeStream(stream));\r\n    },\r\n    // @ts-ignore\r\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\r\n        throw new Error(`\"toDOMStream\" not available in this environment`);\r\n    },\r\n    // @ts-ignore\r\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\r\n        throw new Error(`\"toNodeStream\" not available in this environment`);\r\n    },\r\n};\r\n\r\n/** @ignore */\r\nconst pump = <T extends Uint8ArrayGenerator | AsyncUint8ArrayGenerator>(iterator: T) => { iterator.next(); return iterator; };\r\n\r\n/** @ignore */\r\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): Uint8ArrayGenerator {\r\n\r\n    let done: boolean | undefined, threw = false;\r\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\r\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\r\n\r\n    function byteRange() {\r\n        if (cmd === 'peek') {\r\n            return joinUint8Arrays(buffers, size)[0];\r\n        }\r\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\r\n        return buffer;\r\n    }\r\n\r\n    // Yield so the caller can inject the read command before creating the source Iterator\r\n    ({ cmd, size } = yield <any> null);\r\n\r\n    // initialize the iterator\r\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\r\n\r\n    try {\r\n        do {\r\n            // read the next value\r\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\r\n                it.next(undefined) : it.next(size - bufferLength));\r\n            // if chunk is not null or empty, push it onto the queue\r\n            if (!done && buffer.byteLength > 0) {\r\n                buffers.push(buffer);\r\n                bufferLength += buffer.byteLength;\r\n            }\r\n            // If we have enough bytes in our buffer, yield chunks until we don't\r\n            if (done || size <= bufferLength) {\r\n                do {\r\n                    ({ cmd, size } = yield byteRange());\r\n                } while (size < bufferLength);\r\n            }\r\n        } while (!done);\r\n    } catch (e) {\r\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\r\n    } finally {\r\n        (threw === false) && (typeof it.return === 'function') && (it.return(null!));\r\n    }\r\n    return null;\r\n}\r\n\r\n/** @ignore */\r\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncUint8ArrayGenerator {\r\n\r\n    let done: boolean | undefined, threw = false;\r\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\r\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\r\n\r\n    function byteRange() {\r\n        if (cmd === 'peek') {\r\n            return joinUint8Arrays(buffers, size)[0];\r\n        }\r\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\r\n        return buffer;\r\n    }\r\n\r\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\r\n    ({ cmd, size } = (yield <any> null)!);\r\n\r\n    // initialize the iterator\r\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\r\n\r\n    try {\r\n        do {\r\n            // read the next value\r\n            ({ done, value: buffer } = isNaN(size - bufferLength)\r\n                ? await it.next(undefined)\r\n                : await it.next(size - bufferLength));\r\n            // if chunk is not null or empty, push it onto the queue\r\n            if (!done && buffer.byteLength > 0) {\r\n                buffers.push(buffer);\r\n                bufferLength += buffer.byteLength;\r\n            }\r\n            // If we have enough bytes in our buffer, yield chunks until we don't\r\n            if (done || size <= bufferLength) {\r\n                do {\r\n                    ({ cmd, size } = yield byteRange());\r\n                } while (size < bufferLength);\r\n            }\r\n        } while (!done);\r\n    } catch (e) {\r\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\r\n    } finally {\r\n        (threw === false) && (typeof it.return === 'function') && (await it.return(new Uint8Array(0)));\r\n    }\r\n    return null;\r\n}\r\n\r\n// All this manual Uint8Array chunk management can be avoided if/when engines\r\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\r\n// https://github.com/domenic/proposal-arraybuffer-transfer\r\n/** @ignore */\r\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncUint8ArrayGenerator {\r\n\r\n    let done = false, threw = false;\r\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\r\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\r\n\r\n    function byteRange() {\r\n        if (cmd === 'peek') {\r\n            return joinUint8Arrays(buffers, size)[0];\r\n        }\r\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\r\n        return buffer;\r\n    }\r\n\r\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\r\n    ({ cmd, size } = yield <any> null);\r\n\r\n    // initialize the reader and lock the stream\r\n    let it = new AdaptiveByteReader(source);\r\n\r\n    try {\r\n        do {\r\n            // read the next value\r\n            ({ done, value: buffer } = isNaN(size - bufferLength)\r\n                ? await it['read'](undefined)\r\n                : await it['read'](size - bufferLength));\r\n            // if chunk is not null or empty, push it onto the queue\r\n            if (!done && buffer.byteLength > 0) {\r\n                buffers.push(toUint8Array(buffer));\r\n                bufferLength += buffer.byteLength;\r\n            }\r\n            // If we have enough bytes in our buffer, yield chunks until we don't\r\n            if (done || size <= bufferLength) {\r\n                do {\r\n                    ({ cmd, size } = yield byteRange());\r\n                } while (size < bufferLength);\r\n            }\r\n        } while (!done);\r\n    } catch (e) {\r\n        (threw = true) && (await it['cancel'](e));\r\n    } finally {\r\n        (threw === false) ? (await it['cancel']())\r\n            : source['locked'] && it.releaseLock();\r\n    }\r\n    return null;\r\n}\r\n\r\n/** @ignore */\r\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\r\n\r\n    private supportsBYOB: boolean;\r\n    private byobReader: ReadableStreamBYOBReader | null = null;\r\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\r\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\r\n\r\n    constructor(private source: ReadableStream<T>) {\r\n        try {\r\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\r\n        } catch (e) {\r\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\r\n        }\r\n    }\r\n\r\n    get closed(): Promise<void> {\r\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\r\n    }\r\n\r\n    releaseLock(): void {\r\n        if (this.reader) {\r\n            this.reader.releaseLock();\r\n        }\r\n        this.reader = this.byobReader = this.defaultReader = null;\r\n    }\r\n\r\n    async cancel(reason?: any): Promise<void> {\r\n        const { reader, source } = this;\r\n        reader && (await reader['cancel'](reason).catch(() => {}));\r\n        source && (source['locked'] && this.releaseLock());\r\n    }\r\n\r\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\r\n        if (size === 0) {\r\n            return { done: this.reader == null, value: new Uint8Array(0) };\r\n        }\r\n        const result = !this.supportsBYOB || typeof size !== 'number'\r\n            ? await this.getDefaultReader().read()\r\n            : await this.readFromBYOBReader(size);\r\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\r\n        return result as ReadableStreamReadResult<Uint8Array>;\r\n    }\r\n\r\n    private getDefaultReader() {\r\n        if (this.byobReader) { this.releaseLock(); }\r\n        if (!this.defaultReader) {\r\n            this.defaultReader = this.source['getReader']();\r\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\r\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\r\n            // about why these errors are raised, but I'm sure there's some important spec reason that\r\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\r\n            // only solution in this case :/\r\n            this.defaultReader['closed'].catch(() => {});\r\n        }\r\n        return (this.reader = this.defaultReader);\r\n    }\r\n\r\n    private getBYOBReader() {\r\n        if (this.defaultReader) { this.releaseLock(); }\r\n        if (!this.byobReader) {\r\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\r\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\r\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\r\n            // about why these errors are raised, but I'm sure there's some important spec reason that\r\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\r\n            // only solution in this case :/\r\n            this.byobReader['closed'].catch(() => {});\r\n        }\r\n        return (this.reader = this.byobReader);\r\n    }\r\n\r\n    // This strategy plucked from the example in the streams spec:\r\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\r\n    private async readFromBYOBReader(size: number) {\r\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\r\n    if (offset >= size) {\r\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\r\n    }\r\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\r\n    if (((offset += value!.byteLength) < size) && !done) {\r\n        return await readInto(reader, value!.buffer, offset, size);\r\n    }\r\n    return { done, value: new Uint8Array(value!.buffer, 0, offset) };\r\n}\r\n\r\n/** @ignore */\r\ntype EventName = 'end' | 'error' | 'readable';\r\n/** @ignore */\r\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\r\n/** @ignore */\r\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\r\n    let handler = (_: any) => resolve([event, _]);\r\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\r\n    return [event, handler, new Promise<[T, any]>(\r\n        (r) => (resolve = r) && stream['once'](event, handler)\r\n    )] as Event;\r\n};\r\n\r\n/** @ignore */\r\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncUint8ArrayGenerator {\r\n\r\n    let events: Event[] = [];\r\n    let event: EventName = 'error';\r\n    let done = false, err: Error | null = null;\r\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\r\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\r\n\r\n    function byteRange() {\r\n        if (cmd === 'peek') {\r\n            return joinUint8Arrays(buffers, size)[0];\r\n        }\r\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\r\n        return buffer;\r\n    }\r\n\r\n    // Yield so the caller can inject the read command before we\r\n    // add the listener for the source stream's 'readable' event.\r\n    ({ cmd, size } = yield <any> null);\r\n\r\n    // ignore stdin if it's a TTY\r\n    if ((stream as any)['isTTY']) {\r\n        yield new Uint8Array(0);\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        // initialize the stream event handlers\r\n        events[0] = onEvent(stream, 'end');\r\n        events[1] = onEvent(stream, 'error');\r\n\r\n        do {\r\n            events[2] = onEvent(stream, 'readable');\r\n\r\n            // wait on the first message event from the stream\r\n            [event, err] = await Promise.race(events.map((x) => x[2]));\r\n\r\n            // if the stream emitted an Error, rethrow it\r\n            if (event === 'error') { break; }\r\n            if (!(done = event === 'end')) {\r\n                // If the size is NaN, request to read everything in the stream's internal buffer\r\n                if (!isFinite(size - bufferLength)) {\r\n                    buffer = toUint8Array(stream['read'](undefined));\r\n                } else {\r\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\r\n                    // If the byteLength is 0, then the requested amount is more than the stream has\r\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\r\n                    // continue emitting readable events, so request to read everything the stream\r\n                    // has in its internal buffer right now.\r\n                    if (buffer.byteLength < (size - bufferLength)) {\r\n                        buffer = toUint8Array(stream['read'](undefined));\r\n                    }\r\n                }\r\n                // if chunk is not null or empty, push it onto the queue\r\n                if (buffer.byteLength > 0) {\r\n                    buffers.push(buffer);\r\n                    bufferLength += buffer.byteLength;\r\n                }\r\n            }\r\n            // If we have enough bytes in our buffer, yield chunks until we don't\r\n            if (done || size <= bufferLength) {\r\n                do {\r\n                    ({ cmd, size } = yield byteRange());\r\n                } while (size < bufferLength);\r\n            }\r\n        } while (!done);\r\n    } finally {\r\n        await cleanup(events, event === 'error' ? err : null);\r\n    }\r\n\r\n    return null;\r\n\r\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\r\n        buffer = buffers = <any> null;\r\n        return new Promise<T>(async (resolve, reject) => {\r\n            for (const [evt, fn] of events) {\r\n                stream['off'](evt, fn);\r\n            }\r\n            try {\r\n                // Some stream implementations don't call the destroy callback,\r\n                // because it's really a node-internal API. Just calling `destroy`\r\n                // here should be enough to conform to the ReadableStream contract\r\n                const destroy = (stream as any)['destroy'];\r\n                destroy && destroy.call(stream, err);\r\n                err = undefined;\r\n            } catch (e) { err = e || err; } finally {\r\n                err != null ? reject(err) : resolve();\r\n            }\r\n        });\r\n    }\r\n}\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { toUint8Array } from './buffer';\r\nimport {\r\n    TextDecoder as TextDecoderPolyfill,\r\n    TextEncoder as TextEncoderPolyfill,\r\n} from 'text-encoding-utf-8';\r\n\r\n/** @ignore @suppress {missingRequire} */\r\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\r\n/** @ignore */\r\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\r\n\r\n/** @ignore */\r\nexport const decodeUtf8 = ((TextDecoder) => {\r\n    if (useNativeEncoders || !_Buffer) {\r\n        const decoder = new TextDecoder('utf-8');\r\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\r\n    }\r\n    return (input: ArrayBufferLike | ArrayBufferView) => {\r\n        const { buffer, byteOffset, length } = toUint8Array(input);\r\n        return _Buffer.from(buffer, byteOffset, length).toString();\r\n    };\r\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\r\n\r\n/** @ignore */\r\nexport const encodeUtf8 = ((TextEncoder) => {\r\n    if (useNativeEncoders || !_Buffer) {\r\n        const encoder = new TextEncoder();\r\n        return (value?: string) => encoder.encode(value);\r\n    }\r\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\r\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\r\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/* tslint:disable:class-name */\r\n\r\n// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport { flatbuffers } from 'flatbuffers';\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export enum MetadataVersion {\r\n        /**\r\n         * 0.1.0\r\n         */\r\n        V1 = 0,\r\n\r\n        /**\r\n         * 0.2.0\r\n         */\r\n        V2 = 1,\r\n\r\n        /**\r\n         * 0.3.0 -> 0.7.1\r\n         */\r\n        V3 = 2,\r\n\r\n        /**\r\n         * >= 0.8.0\r\n         */\r\n        V4 = 3\r\n    }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export enum UnionMode {\r\n        Sparse = 0,\r\n        Dense = 1\r\n    }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export enum Precision {\r\n        HALF = 0,\r\n        SINGLE = 1,\r\n        DOUBLE = 2\r\n    }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export enum DateUnit {\r\n        DAY = 0,\r\n        MILLISECOND = 1\r\n    }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export enum TimeUnit {\r\n        SECOND = 0,\r\n        MILLISECOND = 1,\r\n        MICROSECOND = 2,\r\n        NANOSECOND = 3\r\n    }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export enum IntervalUnit {\r\n        YEAR_MONTH = 0,\r\n        DAY_TIME = 1\r\n    }\r\n}\r\n\r\n/**\r\n * ----------------------------------------------------------------------\r\n * Top-level Type value, enabling extensible type-specific metadata. We can\r\n * add new logical types to Type without breaking backwards compatibility\r\n *\r\n * @enum {number}\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export enum Type {\r\n        NONE = 0,\r\n        Null = 1,\r\n        Int = 2,\r\n        FloatingPoint = 3,\r\n        Binary = 4,\r\n        Utf8 = 5,\r\n        Bool = 6,\r\n        Decimal = 7,\r\n        Date = 8,\r\n        Time = 9,\r\n        Timestamp = 10,\r\n        Interval = 11,\r\n        List = 12,\r\n        Struct_ = 13,\r\n        Union = 14,\r\n        FixedSizeBinary = 15,\r\n        FixedSizeList = 16,\r\n        Map = 17,\r\n        Duration = 18,\r\n        LargeBinary = 19,\r\n        LargeUtf8 = 20,\r\n        LargeList = 21\r\n    }\r\n}\r\n\r\n/**\r\n * ----------------------------------------------------------------------\r\n * Endianness of the platform producing the data\r\n *\r\n * @enum {number}\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export enum Endianness {\r\n        Little = 0,\r\n        Big = 1\r\n    }\r\n}\r\n\r\n/**\r\n * These are stored in the flatbuffer in the Type union below\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Null {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Null\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Null= obj\r\n         * @returns Null\r\n         */\r\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\r\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startNull(builder: flatbuffers.Builder) {\r\n            builder.startObject(0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            Null.startNull(builder);\r\n            return Null.endNull(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\r\n * (according to the physical memory layout). We used Struct_ here as\r\n * Struct is a reserved word in Flatbuffers\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Struct_ {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Struct_\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Struct_= obj\r\n         * @returns Struct_\r\n         */\r\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\r\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startStruct_(builder: flatbuffers.Builder) {\r\n            builder.startObject(0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            Struct_.startStruct_(builder);\r\n            return Struct_.endStruct_(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class List {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns List\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param List= obj\r\n         * @returns List\r\n         */\r\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\r\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startList(builder: flatbuffers.Builder) {\r\n            builder.startObject(0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            List.startList(builder);\r\n            return List.endList(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Same as List, but with 64-bit offsets, allowing to represent\r\n * extremely large data values.\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class LargeList {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns LargeList\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param LargeList= obj\r\n         * @returns LargeList\r\n         */\r\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\r\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startLargeList(builder: flatbuffers.Builder) {\r\n            builder.startObject(0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            LargeList.startLargeList(builder);\r\n            return LargeList.endLargeList(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class FixedSizeList {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns FixedSizeList\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param FixedSizeList= obj\r\n         * @returns FixedSizeList\r\n         */\r\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\r\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * Number of list items per value\r\n         *\r\n         * @returns number\r\n         */\r\n        listSize(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startFixedSizeList(builder: flatbuffers.Builder) {\r\n            builder.startObject(1);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number listSize\r\n         */\r\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\r\n            builder.addFieldInt32(0, listSize, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\r\n            FixedSizeList.startFixedSizeList(builder);\r\n            FixedSizeList.addListSize(builder, listSize);\r\n            return FixedSizeList.endFixedSizeList(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * A Map is a logical nested type that is represented as\r\n *\r\n * List<entry: Struct<key: K, value: V>>\r\n *\r\n * In this layout, the keys and values are each respectively contiguous. We do\r\n * not constrain the key and value types, so the application is responsible\r\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\r\n * may be set in the metadata for this field\r\n *\r\n * In a Field with Map type, the Field has a child Struct field, which then\r\n * has two children: key type and the second the value type. The names of the\r\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\r\n * not enforced\r\n *\r\n * Map\r\n *   - child[0] entry: Struct\r\n *     - child[0] key: K\r\n *     - child[1] value: V\r\n *\r\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\r\n *\r\n * The metadata is structured so that Arrow systems without special handling\r\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\r\n * field must have the same contents as a List.\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Map {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Map\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Map= obj\r\n         * @returns Map\r\n         */\r\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\r\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * Set to true if the keys within each value are sorted\r\n         *\r\n         * @returns boolean\r\n         */\r\n        keysSorted(): boolean {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startMap(builder: flatbuffers.Builder) {\r\n            builder.startObject(1);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param boolean keysSorted\r\n         */\r\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\r\n            builder.addFieldInt8(0, +keysSorted, +false);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\r\n            Map.startMap(builder);\r\n            Map.addKeysSorted(builder, keysSorted);\r\n            return Map.endMap(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * A union is a complex type with children in Field\r\n * By default ids in the type vector refer to the offsets in the children\r\n * optionally typeIds provides an indirection between the child offset and the type id\r\n * for each child typeIds[offset] is the id used in the type vector\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Union {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Union\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Union= obj\r\n         * @returns Union\r\n         */\r\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\r\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.UnionMode\r\n         */\r\n        mode(): org.apache.arrow.flatbuf.UnionMode {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\r\n        }\r\n\r\n        /**\r\n         * @param number index\r\n         * @returns number\r\n         */\r\n        typeIds(index: number): number | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        typeIdsLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @returns Int32Array\r\n         */\r\n        typeIdsArray(): Int32Array | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startUnion(builder: flatbuffers.Builder) {\r\n            builder.startObject(2);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.UnionMode mode\r\n         */\r\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\r\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset typeIdsOffset\r\n         */\r\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(1, typeIdsOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param Array.<number> data\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\r\n            builder.startVector(4, data.length, 4);\r\n            for (let i = data.length - 1; i >= 0; i--) {\r\n                builder.addInt32(data[i]);\r\n            }\r\n            return builder.endVector();\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(4, numElems, 4);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n            Union.startUnion(builder);\r\n            Union.addMode(builder, mode);\r\n            Union.addTypeIds(builder, typeIdsOffset);\r\n            return Union.endUnion(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Int {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Int\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Int= obj\r\n         * @returns Int\r\n         */\r\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\r\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        bitWidth(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @returns boolean\r\n         */\r\n        isSigned(): boolean {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startInt(builder: flatbuffers.Builder) {\r\n            builder.startObject(2);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number bitWidth\r\n         */\r\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\r\n            builder.addFieldInt32(0, bitWidth, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param boolean isSigned\r\n         */\r\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\r\n            builder.addFieldInt8(1, +isSigned, +false);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\r\n            Int.startInt(builder);\r\n            Int.addBitWidth(builder, bitWidth);\r\n            Int.addIsSigned(builder, isSigned);\r\n            return Int.endInt(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class FloatingPoint {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns FloatingPoint\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param FloatingPoint= obj\r\n         * @returns FloatingPoint\r\n         */\r\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\r\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.Precision\r\n         */\r\n        precision(): org.apache.arrow.flatbuf.Precision {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startFloatingPoint(builder: flatbuffers.Builder) {\r\n            builder.startObject(1);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.Precision precision\r\n         */\r\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\r\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\r\n            FloatingPoint.startFloatingPoint(builder);\r\n            FloatingPoint.addPrecision(builder, precision);\r\n            return FloatingPoint.endFloatingPoint(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Unicode with UTF-8 encoding\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Utf8 {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Utf8\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Utf8= obj\r\n         * @returns Utf8\r\n         */\r\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\r\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startUtf8(builder: flatbuffers.Builder) {\r\n            builder.startObject(0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            Utf8.startUtf8(builder);\r\n            return Utf8.endUtf8(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Opaque binary data\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Binary {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Binary\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Binary= obj\r\n         * @returns Binary\r\n         */\r\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\r\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startBinary(builder: flatbuffers.Builder) {\r\n            builder.startObject(0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            Binary.startBinary(builder);\r\n            return Binary.endBinary(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Same as Utf8, but with 64-bit offsets, allowing to represent\r\n * extremely large data values.\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class LargeUtf8 {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns LargeUtf8\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param LargeUtf8= obj\r\n         * @returns LargeUtf8\r\n         */\r\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\r\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startLargeUtf8(builder: flatbuffers.Builder) {\r\n            builder.startObject(0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            LargeUtf8.startLargeUtf8(builder);\r\n            return LargeUtf8.endLargeUtf8(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Same as Binary, but with 64-bit offsets, allowing to represent\r\n * extremely large data values.\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class LargeBinary {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns LargeBinary\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param LargeBinary= obj\r\n         * @returns LargeBinary\r\n         */\r\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\r\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startLargeBinary(builder: flatbuffers.Builder) {\r\n            builder.startObject(0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            LargeBinary.startLargeBinary(builder);\r\n            return LargeBinary.endLargeBinary(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class FixedSizeBinary {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns FixedSizeBinary\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param FixedSizeBinary= obj\r\n         * @returns FixedSizeBinary\r\n         */\r\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\r\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * Number of bytes per value\r\n         *\r\n         * @returns number\r\n         */\r\n        byteWidth(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\r\n            builder.startObject(1);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number byteWidth\r\n         */\r\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\r\n            builder.addFieldInt32(0, byteWidth, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\r\n            FixedSizeBinary.startFixedSizeBinary(builder);\r\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\r\n            return FixedSizeBinary.endFixedSizeBinary(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Bool {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Bool\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Bool= obj\r\n         * @returns Bool\r\n         */\r\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\r\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startBool(builder: flatbuffers.Builder) {\r\n            builder.startObject(0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            Bool.startBool(builder);\r\n            return Bool.endBool(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Decimal {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Decimal\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Decimal= obj\r\n         * @returns Decimal\r\n         */\r\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\r\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * Total number of decimal digits\r\n         *\r\n         * @returns number\r\n         */\r\n        precision(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * Number of digits after the decimal point \".\"\r\n         *\r\n         * @returns number\r\n         */\r\n        scale(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startDecimal(builder: flatbuffers.Builder) {\r\n            builder.startObject(2);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number precision\r\n         */\r\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\r\n            builder.addFieldInt32(0, precision, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number scale\r\n         */\r\n        static addScale(builder: flatbuffers.Builder, scale: number) {\r\n            builder.addFieldInt32(1, scale, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\r\n            Decimal.startDecimal(builder);\r\n            Decimal.addPrecision(builder, precision);\r\n            Decimal.addScale(builder, scale);\r\n            return Decimal.endDecimal(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\r\n * epoch (1970-01-01), stored in either of two units:\r\n *\r\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\r\n *   leap seconds), where the values are evenly divisible by 86400000\r\n * * Days (32 bits) since the UNIX epoch\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Date {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Date\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Date= obj\r\n         * @returns Date\r\n         */\r\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\r\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.DateUnit\r\n         */\r\n        unit(): org.apache.arrow.flatbuf.DateUnit {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startDate(builder: flatbuffers.Builder) {\r\n            builder.startObject(1);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.DateUnit unit\r\n         */\r\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\r\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\r\n            Date.startDate(builder);\r\n            Date.addUnit(builder, unit);\r\n            return Date.endDate(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Time type. The physical storage type depends on the unit\r\n * - SECOND and MILLISECOND: 32 bits\r\n * - MICROSECOND and NANOSECOND: 64 bits\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Time {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Time\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Time= obj\r\n         * @returns Time\r\n         */\r\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\r\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.TimeUnit\r\n         */\r\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        bitWidth(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startTime(builder: flatbuffers.Builder) {\r\n            builder.startObject(2);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\r\n         */\r\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\r\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number bitWidth\r\n         */\r\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\r\n            builder.addFieldInt32(1, bitWidth, 32);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\r\n            Time.startTime(builder);\r\n            Time.addUnit(builder, unit);\r\n            Time.addBitWidth(builder, bitWidth);\r\n            return Time.endTime(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\r\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\r\n * leap seconds.\r\n *\r\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\r\n * aware\" timestamps. Read about the timezone attribute for more detail\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Timestamp {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Timestamp\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Timestamp= obj\r\n         * @returns Timestamp\r\n         */\r\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\r\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.TimeUnit\r\n         */\r\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\r\n        }\r\n\r\n        /**\r\n         * The time zone is a string indicating the name of a time zone, one of:\r\n         *\r\n         * * As used in the Olson time zone database (the \"tz database\" or\r\n         *   \"tzdata\"), such as \"America/New_York\"\r\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\r\n         *\r\n         * Whether a timezone string is present indicates different semantics about\r\n         * the data:\r\n         *\r\n         * * If the time zone is null or equal to an empty string, the data is \"time\r\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\r\n         *   to the locale of the user. This data can be though of as UTC but\r\n         *   without having \"UTC\" as the time zone, it is not considered to be\r\n         *   localized to any time zone\r\n         *\r\n         * * If the time zone is set to a valid value, values can be displayed as\r\n         *   \"localized\" to that time zone, even though the underlying 64-bit\r\n         *   integers are identical to the same data stored in UTC. Converting\r\n         *   between time zones is a metadata-only operation and does not change the\r\n         *   underlying values\r\n         *\r\n         * @param flatbuffers.Encoding= optionalEncoding\r\n         * @returns string|Uint8Array|null\r\n         */\r\n        timezone(): string | null;\r\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\r\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startTimestamp(builder: flatbuffers.Builder) {\r\n            builder.startObject(2);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\r\n         */\r\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\r\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset timezoneOffset\r\n         */\r\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(1, timezoneOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n            Timestamp.startTimestamp(builder);\r\n            Timestamp.addUnit(builder, unit);\r\n            Timestamp.addTimezone(builder, timezoneOffset);\r\n            return Timestamp.endTimestamp(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Interval {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Interval\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Interval= obj\r\n         * @returns Interval\r\n         */\r\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\r\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\r\n         */\r\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startInterval(builder: flatbuffers.Builder) {\r\n            builder.startObject(1);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\r\n         */\r\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\r\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\r\n            Interval.startInterval(builder);\r\n            Interval.addUnit(builder, unit);\r\n            return Interval.endInterval(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Duration {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Duration\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Duration= obj\r\n         * @returns Duration\r\n         */\r\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\r\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.TimeUnit\r\n         */\r\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startDuration(builder: flatbuffers.Builder) {\r\n            builder.startObject(1);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\r\n         */\r\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\r\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\r\n            Duration.startDuration(builder);\r\n            Duration.addUnit(builder, unit);\r\n            return Duration.endDuration(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * ----------------------------------------------------------------------\r\n * user defined key value pairs to add custom metadata to arrow\r\n * key namespacing is the responsibility of the user\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class KeyValue {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns KeyValue\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param KeyValue= obj\r\n         * @returns KeyValue\r\n         */\r\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\r\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Encoding= optionalEncoding\r\n         * @returns string|Uint8Array|null\r\n         */\r\n        key(): string | null;\r\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\r\n        key(optionalEncoding?: any): string | Uint8Array | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Encoding= optionalEncoding\r\n         * @returns string|Uint8Array|null\r\n         */\r\n        value(): string | null;\r\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\r\n        value(optionalEncoding?: any): string | Uint8Array | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startKeyValue(builder: flatbuffers.Builder) {\r\n            builder.startObject(2);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset keyOffset\r\n         */\r\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(0, keyOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset valueOffset\r\n         */\r\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(1, valueOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n            KeyValue.startKeyValue(builder);\r\n            KeyValue.addKey(builder, keyOffset);\r\n            KeyValue.addValue(builder, valueOffset);\r\n            return KeyValue.endKeyValue(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * ----------------------------------------------------------------------\r\n * Dictionary encoding metadata\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class DictionaryEncoding {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns DictionaryEncoding\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param DictionaryEncoding= obj\r\n         * @returns DictionaryEncoding\r\n         */\r\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\r\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * The known dictionary id in the application where this data is used. In\r\n         * the file or streaming formats, the dictionary ids are found in the\r\n         * DictionaryBatch messages\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        id(): flatbuffers.Long {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n        }\r\n\r\n        /**\r\n         * The dictionary indices are constrained to be positive integers. If this\r\n         * field is null, the indices must be signed int32\r\n         *\r\n         * @param org.apache.arrow.flatbuf.Int= obj\r\n         * @returns org.apache.arrow.flatbuf.Int|null\r\n         */\r\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * By default, dictionaries are not ordered, or the order does not have\r\n         * semantic meaning. In some statistical, applications, dictionary-encoding\r\n         * is used to represent ordered categorical data, and we provide a way to\r\n         * preserve that metadata here\r\n         *\r\n         * @returns boolean\r\n         */\r\n        isOrdered(): boolean {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\r\n            builder.startObject(3);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long id\r\n         */\r\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\r\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset indexTypeOffset\r\n         */\r\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(1, indexTypeOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param boolean isOrdered\r\n         */\r\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\r\n            builder.addFieldInt8(2, +isOrdered, +false);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\r\n            DictionaryEncoding.startDictionaryEncoding(builder);\r\n            DictionaryEncoding.addId(builder, id);\r\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\r\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\r\n            return DictionaryEncoding.endDictionaryEncoding(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * ----------------------------------------------------------------------\r\n * A field represents a named column in a record / row batch or child of a\r\n * nested type.\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Field {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Field\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Field= obj\r\n         * @returns Field\r\n         */\r\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\r\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * Name is not required, in i.e. a List\r\n         *\r\n         * @param flatbuffers.Encoding= optionalEncoding\r\n         * @returns string|Uint8Array|null\r\n         */\r\n        name(): string | null;\r\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\r\n        name(optionalEncoding?: any): string | Uint8Array | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n        }\r\n\r\n        /**\r\n         * Whether or not this field can contain nulls. Should be true in general.\r\n         *\r\n         * @returns boolean\r\n         */\r\n        nullable(): boolean {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.Type\r\n         */\r\n        typeType(): org.apache.arrow.flatbuf.Type {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\r\n        }\r\n\r\n        /**\r\n         * This is the type of the decoded value if the field is dictionary encoded.\r\n         *\r\n         * @param flatbuffers.Table obj\r\n         * @returns ?flatbuffers.Table\r\n         */\r\n        type<T extends flatbuffers.Table>(obj: T): T | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 10);\r\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n        }\r\n\r\n        /**\r\n         * Present only if the field is dictionary encoded.\r\n         *\r\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\r\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\r\n         */\r\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 12);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * children apply only to nested data types like Struct, List and Union. For\r\n         * primitive types children will have length 0.\r\n         *\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.Field= obj\r\n         * @returns org.apache.arrow.flatbuf.Field\r\n         */\r\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 14);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        childrenLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 14);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * User-defined metadata\r\n         *\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\r\n         * @returns org.apache.arrow.flatbuf.KeyValue\r\n         */\r\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 16);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        customMetadataLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 16);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startField(builder: flatbuffers.Builder) {\r\n            builder.startObject(7);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset nameOffset\r\n         */\r\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(0, nameOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param boolean nullable\r\n         */\r\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\r\n            builder.addFieldInt8(1, +nullable, +false);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.Type typeType\r\n         */\r\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\r\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset typeOffset\r\n         */\r\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(3, typeOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset dictionaryOffset\r\n         */\r\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(4, dictionaryOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset childrenOffset\r\n         */\r\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(5, childrenOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param Array.<flatbuffers.Offset> data\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n            builder.startVector(4, data.length, 4);\r\n            for (let i = data.length - 1; i >= 0; i--) {\r\n                builder.addOffset(data[i]);\r\n            }\r\n            return builder.endVector();\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(4, numElems, 4);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset customMetadataOffset\r\n         */\r\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(6, customMetadataOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param Array.<flatbuffers.Offset> data\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n            builder.startVector(4, data.length, 4);\r\n            for (let i = data.length - 1; i >= 0; i--) {\r\n                builder.addOffset(data[i]);\r\n            }\r\n            return builder.endVector();\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(4, numElems, 4);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n            Field.startField(builder);\r\n            Field.addName(builder, nameOffset);\r\n            Field.addNullable(builder, nullable);\r\n            Field.addTypeType(builder, typeType);\r\n            Field.addType(builder, typeOffset);\r\n            Field.addDictionary(builder, dictionaryOffset);\r\n            Field.addChildren(builder, childrenOffset);\r\n            Field.addCustomMetadata(builder, customMetadataOffset);\r\n            return Field.endField(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * ----------------------------------------------------------------------\r\n * A Buffer represents a single contiguous memory segment\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Buffer {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Buffer\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * The relative offset into the shared memory page where the bytes for this\r\n         * buffer starts\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        offset(): flatbuffers.Long {\r\n            return this.bb!.readInt64(this.bb_pos);\r\n        }\r\n\r\n        /**\r\n         * The absolute length (in bytes) of the memory buffer. The memory is found\r\n         * from offset (inclusive) to offset + length (non-inclusive).\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        length(): flatbuffers.Long {\r\n            return this.bb!.readInt64(this.bb_pos + 8);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long offset\r\n         * @param flatbuffers.Long length\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\r\n            builder.prep(8, 16);\r\n            builder.writeInt64(length);\r\n            builder.writeInt64(offset);\r\n            return builder.offset();\r\n        }\r\n\r\n    }\r\n}\r\n/**\r\n * ----------------------------------------------------------------------\r\n * A Schema describes the columns in a row batch\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Schema {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Schema\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Schema= obj\r\n         * @returns Schema\r\n         */\r\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\r\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * endianness of the buffer\r\n         * it is Little Endian by default\r\n         * if endianness doesn't match the underlying system then the vectors need to be converted\r\n         *\r\n         * @returns org.apache.arrow.flatbuf.Endianness\r\n         */\r\n        endianness(): org.apache.arrow.flatbuf.Endianness {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\r\n        }\r\n\r\n        /**\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.Field= obj\r\n         * @returns org.apache.arrow.flatbuf.Field\r\n         */\r\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        fieldsLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\r\n         * @returns org.apache.arrow.flatbuf.KeyValue\r\n         */\r\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        customMetadataLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startSchema(builder: flatbuffers.Builder) {\r\n            builder.startObject(3);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.Endianness endianness\r\n         */\r\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\r\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset fieldsOffset\r\n         */\r\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(1, fieldsOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param Array.<flatbuffers.Offset> data\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n            builder.startVector(4, data.length, 4);\r\n            for (let i = data.length - 1; i >= 0; i--) {\r\n                builder.addOffset(data[i]);\r\n            }\r\n            return builder.endVector();\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(4, numElems, 4);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset customMetadataOffset\r\n         */\r\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(2, customMetadataOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param Array.<flatbuffers.Offset> data\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n            builder.startVector(4, data.length, 4);\r\n            for (let i = data.length - 1; i >= 0; i--) {\r\n                builder.addOffset(data[i]);\r\n            }\r\n            return builder.endVector();\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(4, numElems, 4);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset offset\r\n         */\r\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n            builder.finish(offset);\r\n        }\r\n\r\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n            Schema.startSchema(builder);\r\n            Schema.addEndianness(builder, endianness);\r\n            Schema.addFields(builder, fieldsOffset);\r\n            Schema.addCustomMetadata(builder, customMetadataOffset);\r\n            return Schema.endSchema(builder);\r\n        }\r\n    }\r\n}\r\n","// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport { flatbuffers } from 'flatbuffers';\r\nimport * as NS7624605610262437867 from './Schema';\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\r\n}\r\n/**\r\n * ----------------------------------------------------------------------\r\n * The root Message type\r\n * This union enables us to easily send different message types without\r\n * redundant storage, and in the future we can easily add new message types.\r\n *\r\n * Arrow implementations do not need to implement all of the message types,\r\n * which may include experimental metadata types. For maximum compatibility,\r\n * it is best to send data using RecordBatch\r\n *\r\n * @enum {number}\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export enum MessageHeader {\r\n        NONE = 0,\r\n        Schema = 1,\r\n        DictionaryBatch = 2,\r\n        RecordBatch = 3,\r\n        Tensor = 4,\r\n        SparseTensor = 5\r\n    }\r\n}\r\n\r\n/**\r\n * ----------------------------------------------------------------------\r\n * Data structures for describing a table row batch (a collection of\r\n * equal-length Arrow arrays)\r\n * Metadata about a field at some level of a nested type tree (but not\r\n * its children).\r\n *\r\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\r\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\r\n * null_count: 0} for its Int16 node, as separate FieldNode structs\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class FieldNode {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns FieldNode\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * The number of value slots in the Arrow array at this level of a nested\r\n         * tree\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        length(): flatbuffers.Long {\r\n            return this.bb!.readInt64(this.bb_pos);\r\n        }\r\n\r\n        /**\r\n         * The number of observed nulls. Fields with null_count == 0 may choose not\r\n         * to write their physical validity bitmap out as a materialized buffer,\r\n         * instead setting the length of the bitmap buffer to 0.\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        nullCount(): flatbuffers.Long {\r\n            return this.bb!.readInt64(this.bb_pos + 8);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long length\r\n         * @param flatbuffers.Long null_count\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\r\n            builder.prep(8, 16);\r\n            builder.writeInt64(null_count);\r\n            builder.writeInt64(length);\r\n            return builder.offset();\r\n        }\r\n\r\n    }\r\n}\r\n/**\r\n * A data header describing the shared memory layout of a \"record\" or \"row\"\r\n * batch. Some systems call this a \"row batch\" internally and others a \"record\r\n * batch\".\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class RecordBatch {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns RecordBatch\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param RecordBatch= obj\r\n         * @returns RecordBatch\r\n         */\r\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\r\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * number of records / rows. The arrays in the batch should all have this\r\n         * length\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        length(): flatbuffers.Long {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n        }\r\n\r\n        /**\r\n         * Nodes correspond to the pre-ordered flattened logical schema\r\n         *\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\r\n         * @returns org.apache.arrow.flatbuf.FieldNode\r\n         */\r\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        nodesLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * Buffers correspond to the pre-ordered flattened buffer tree\r\n         *\r\n         * The number of buffers appended to this list depends on the schema. For\r\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\r\n         * bitmap and 1 for the values. For struct arrays, there will only be a\r\n         * single buffer for the validity (nulls) bitmap\r\n         *\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.Buffer= obj\r\n         * @returns org.apache.arrow.flatbuf.Buffer\r\n         */\r\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        buffersLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startRecordBatch(builder: flatbuffers.Builder) {\r\n            builder.startObject(3);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long length\r\n         */\r\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\r\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset nodesOffset\r\n         */\r\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(1, nodesOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(16, numElems, 8);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset buffersOffset\r\n         */\r\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(2, buffersOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(16, numElems, 8);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n            RecordBatch.startRecordBatch(builder);\r\n            RecordBatch.addLength(builder, length);\r\n            RecordBatch.addNodes(builder, nodesOffset);\r\n            RecordBatch.addBuffers(builder, buffersOffset);\r\n            return RecordBatch.endRecordBatch(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * For sending dictionary encoding information. Any Field can be\r\n * dictionary-encoded, but in this case none of its children may be\r\n * dictionary-encoded.\r\n * There is one vector / column per dictionary, but that vector / column\r\n * may be spread across multiple dictionary batches by using the isDelta\r\n * flag\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class DictionaryBatch {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns DictionaryBatch\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param DictionaryBatch= obj\r\n         * @returns DictionaryBatch\r\n         */\r\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\r\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns flatbuffers.Long\r\n         */\r\n        id(): flatbuffers.Long {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n        }\r\n\r\n        /**\r\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\r\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\r\n         */\r\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * If isDelta is true the values in the dictionary are to be appended to a\r\n         * dictionary with the indicated id\r\n         *\r\n         * @returns boolean\r\n         */\r\n        isDelta(): boolean {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\r\n            builder.startObject(3);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long id\r\n         */\r\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\r\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset dataOffset\r\n         */\r\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(1, dataOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param boolean isDelta\r\n         */\r\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\r\n            builder.addFieldInt8(2, +isDelta, +false);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\r\n            DictionaryBatch.startDictionaryBatch(builder);\r\n            DictionaryBatch.addId(builder, id);\r\n            DictionaryBatch.addData(builder, dataOffset);\r\n            DictionaryBatch.addIsDelta(builder, isDelta);\r\n            return DictionaryBatch.endDictionaryBatch(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Message {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Message\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Message= obj\r\n         * @returns Message\r\n         */\r\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\r\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\r\n         */\r\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.MessageHeader\r\n         */\r\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Table obj\r\n         * @returns ?flatbuffers.Table\r\n         */\r\n        header<T extends flatbuffers.Table>(obj: T): T | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns flatbuffers.Long\r\n         */\r\n        bodyLength(): flatbuffers.Long {\r\n            let offset = this.bb!.__offset(this.bb_pos, 10);\r\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n        }\r\n\r\n        /**\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\r\n         * @returns org.apache.arrow.flatbuf.KeyValue\r\n         */\r\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 12);\r\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        customMetadataLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 12);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startMessage(builder: flatbuffers.Builder) {\r\n            builder.startObject(5);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\r\n         */\r\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\r\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\r\n         */\r\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\r\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset headerOffset\r\n         */\r\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(2, headerOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long bodyLength\r\n         */\r\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\r\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset customMetadataOffset\r\n         */\r\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(4, customMetadataOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param Array.<flatbuffers.Offset> data\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n            builder.startVector(4, data.length, 4);\r\n            for (let i = data.length - 1; i >= 0; i--) {\r\n                builder.addOffset(data[i]);\r\n            }\r\n            return builder.endVector();\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(4, numElems, 4);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset offset\r\n         */\r\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n            builder.finish(offset);\r\n        }\r\n\r\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n            Message.startMessage(builder);\r\n            Message.addVersion(builder, version);\r\n            Message.addHeaderType(builder, headerType);\r\n            Message.addHeader(builder, headerOffset);\r\n            Message.addBodyLength(builder, bodyLength);\r\n            Message.addCustomMetadata(builder, customMetadataOffset);\r\n            return Message.endMessage(builder);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from './data';\r\nimport { DataType } from './type';\r\nimport { Chunked } from './vector/chunked';\r\n\r\n/** @ignore */\r\nexport interface Clonable<R extends AbstractVector> {\r\n    clone(...args: any[]): R;\r\n}\r\n\r\n/** @ignore */\r\nexport interface Sliceable<R extends AbstractVector> {\r\n    slice(begin?: number, end?: number): R;\r\n}\r\n\r\n/** @ignore */\r\nexport interface Applicative<T extends DataType, R extends Chunked> {\r\n    concat(...others: Vector<T>[]): R;\r\n    readonly [Symbol.isConcatSpreadable]: boolean;\r\n}\r\n\r\nexport interface AbstractVector<T extends DataType = any>\r\n    extends Clonable<AbstractVector<T>>,\r\n            Sliceable<AbstractVector<T>>,\r\n            Applicative<T, Chunked<T>> {\r\n\r\n    readonly TType: T['TType'];\r\n    readonly TArray: T['TArray'];\r\n    readonly TValue: T['TValue'];\r\n}\r\n\r\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\r\n\r\n    public abstract readonly data: Data<T>;\r\n    public abstract readonly type: T;\r\n    public abstract readonly typeId: T['TType'];\r\n    public abstract readonly length: number;\r\n    public abstract readonly stride: number;\r\n    public abstract readonly nullCount: number;\r\n    public abstract readonly byteLength: number;\r\n    public abstract readonly numChildren: number;\r\n\r\n    public abstract readonly ArrayType: T['ArrayType'];\r\n\r\n    public abstract isValid(index: number): boolean;\r\n    public abstract get(index: number): T['TValue'] | null;\r\n    public abstract set(index: number, value: T['TValue'] | null): void;\r\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\r\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\r\n\r\n    public abstract toArray(): T['TArray'];\r\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\r\n}\r\n\r\n(AbstractVector.prototype as any).data = null;\r\n\r\nexport { AbstractVector as Vector };\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport * as Schema_ from './fb/Schema';\r\nimport * as Message_ from './fb/Message';\r\n\r\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\r\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\r\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\r\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\r\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\r\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\r\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\r\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\r\n\r\n/**\r\n * Main data type enumeration.\r\n *\r\n * Data types in this library are all *logical*. They can be expressed as\r\n * either a primitive physical type (bytes or bits of some fixed size), a\r\n * nested type consisting of other data types, or another data type (e.g. a\r\n * timestamp encoded as an int64).\r\n *\r\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\r\n * IPC payload.\r\n *\r\n * The rest of the values are specified here so TypeScript can narrow the type\r\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\r\n * metadata like `bitWidth` that impact the type signatures of the values we\r\n * accept and return.\r\n *\r\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\r\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\r\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\r\n * underlying `Int32Array`.\r\n *\r\n * Library consumers benefit by knowing the narrowest type, since we can ensure\r\n * the types across all public methods are propagated, and never bail to `any`.\r\n * These values are _never_ used at runtime, and they will _never_ be written\r\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\r\n */\r\nexport enum Type {\r\n    /** The default placeholder type */\r\n    NONE            =  0,\r\n    /** A NULL type having no physical storage */\r\n    Null            =  1,\r\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\r\n    Int             =  2,\r\n    /** 2, 4, or 8-byte floating point value */\r\n    Float           =  3,\r\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\r\n    Binary          =  4,\r\n    /** UTF8 variable-length string as List<Char> */\r\n    Utf8            =  5,\r\n    /** Boolean as 1 bit, LSB bit-packed ordering */\r\n    Bool            =  6,\r\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\r\n    Decimal         =  7,\r\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\r\n    Date            =  8,\r\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\r\n    Time            =  9,\r\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\r\n    Timestamp       = 10,\r\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\r\n    Interval        = 11,\r\n    /** A list of some logical data type */\r\n    List            = 12,\r\n    /** Struct of logical types */\r\n    Struct          = 13,\r\n    /** Union of logical types */\r\n    Union           = 14,\r\n    /** Fixed-size binary. Each value occupies the same number of bytes */\r\n    FixedSizeBinary = 15,\r\n    /** Fixed-size list. Each value occupies the same number of bytes */\r\n    FixedSizeList   = 16,\r\n    /** Map of named logical types */\r\n    Map             = 17,\r\n\r\n    /** Dictionary aka Category type */\r\n    Dictionary            = -1,\r\n    Int8                  = -2,\r\n    Int16                 = -3,\r\n    Int32                 = -4,\r\n    Int64                 = -5,\r\n    Uint8                 = -6,\r\n    Uint16                = -7,\r\n    Uint32                = -8,\r\n    Uint64                = -9,\r\n    Float16               = -10,\r\n    Float32               = -11,\r\n    Float64               = -12,\r\n    DateDay               = -13,\r\n    DateMillisecond       = -14,\r\n    TimestampSecond       = -15,\r\n    TimestampMillisecond  = -16,\r\n    TimestampMicrosecond  = -17,\r\n    TimestampNanosecond   = -18,\r\n    TimeSecond            = -19,\r\n    TimeMillisecond       = -20,\r\n    TimeMicrosecond       = -21,\r\n    TimeNanosecond        = -22,\r\n    DenseUnion            = -23,\r\n    SparseUnion           = -24,\r\n    IntervalDayTime       = -25,\r\n    IntervalYearMonth     = -26,\r\n}\r\n\r\nexport enum BufferType {\r\n    /**\r\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\r\n     */\r\n    OFFSET = 0,\r\n\r\n    /**\r\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\r\n     */\r\n    DATA = 1,\r\n\r\n    /**\r\n     * Bit vector indicating if each value is null\r\n     */\r\n    VALIDITY = 2,\r\n\r\n    /**\r\n     * Type vector used in Union type\r\n     */\r\n    TYPE = 3\r\n  }\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\n/** @ignore */\r\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\r\n    return (byte & 1 << bit) !== 0;\r\n}\r\n\r\n/** @ignore */\r\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\r\n    return (byte & 1 << bit) >> bit as (0 | 1);\r\n}\r\n\r\n/** @ignore */\r\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\r\n    return value ?\r\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\r\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\r\n}\r\n\r\n/** @ignore */\r\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\r\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\r\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\r\n        const bytes = new Uint8Array(alignedSize);\r\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\r\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\r\n            // Otherwise iterate each bit from the offset and return a new one\r\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\r\n        return bytes;\r\n    }\r\n    return bitmap;\r\n}\r\n\r\n/** @ignore */\r\nexport function packBools(values: Iterable<any>) {\r\n    let xs: number[] = [];\r\n    let i = 0, bit = 0, byte = 0;\r\n    for (const value of values) {\r\n        value && (byte |= 1 << bit);\r\n        if (++bit === 8) {\r\n            xs[i++] = byte;\r\n            byte = bit = 0;\r\n        }\r\n    }\r\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\r\n    let b = new Uint8Array((xs.length + 7) & ~7);\r\n    b.set(xs);\r\n    return b;\r\n}\r\n\r\n/** @ignore */\r\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\r\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\r\n    let bit = begin % 8;\r\n    let byteIndex = begin >> 3;\r\n    let index = 0, remaining = length;\r\n    for (; remaining > 0; bit = 0) {\r\n        let byte = bytes[byteIndex++];\r\n        do {\r\n            yield get(context, index++, byte, bit);\r\n        } while (--remaining > 0 && ++bit < 8);\r\n    }\r\n}\r\n\r\n/**\r\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\r\n * @param vector The Uint8Array of bits for which to compute the population count.\r\n * @param lhs The range's left-hand side (or start) bit\r\n * @param rhs The range's right-hand side (or end) bit\r\n */\r\n/** @ignore */\r\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\r\n    if (rhs - lhs <= 0) { return 0; }\r\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\r\n    if (rhs - lhs < 8) {\r\n        let sum = 0;\r\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\r\n            sum += bit;\r\n        }\r\n        return sum;\r\n    }\r\n    // Get the next lowest multiple of 8 from the right hand side\r\n    const rhsInside = rhs >> 3 << 3;\r\n    // Get the next highest multiple of 8 from the left hand side\r\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\r\n    return (\r\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\r\n        popcnt_bit_range(data, lhs, lhsInside) +\r\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\r\n        popcnt_bit_range(data, rhsInside, rhs) +\r\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\r\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\r\n    );\r\n}\r\n\r\n/** @ignore */\r\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\r\n    let cnt = 0, pos = byteOffset! | 0;\r\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\r\n    while (len - pos >= 4) {\r\n        cnt += popcnt_uint32(view.getUint32(pos));\r\n        pos += 4;\r\n    }\r\n    while (len - pos >= 2) {\r\n        cnt += popcnt_uint32(view.getUint16(pos));\r\n        pos += 2;\r\n    }\r\n    while (len - pos >= 1) {\r\n        cnt += popcnt_uint32(view.getUint8(pos));\r\n        pos += 1;\r\n    }\r\n    return cnt;\r\n}\r\n\r\n/** @ignore */\r\nexport function popcnt_uint32(uint32: number): number {\r\n    let i = uint32 | 0;\r\n    i = i - ((i >>> 1) & 0x55555555);\r\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\r\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from './data';\r\nimport { Vector } from './vector';\r\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\r\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\r\n\r\nexport abstract class Visitor {\r\n    public visitMany(nodes: any[], ...args: any[][]) {\r\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\r\n    }\r\n    public visit(...args: any[]) {\r\n        return this.getVisitFn(args[0], false).apply(this, args);\r\n    }\r\n    public getVisitFn(node: any, throwIfNotFound = true) {\r\n        return getVisitFn(this, node, throwIfNotFound);\r\n    }\r\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\r\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\r\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\r\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\r\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\r\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\r\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\r\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\r\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\r\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\r\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\r\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\r\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\r\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\r\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\r\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\r\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\r\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\r\n}\r\n\r\n/** @ignore */\r\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\r\n    let fn: any = null;\r\n    let dtype: T['TType'] = Type.NONE;\r\n    // tslint:disable\r\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\r\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\r\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\r\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\r\n\r\n    switch (dtype) {\r\n        case Type.Null:                 fn = visitor.visitNull; break;\r\n        case Type.Bool:                 fn = visitor.visitBool; break;\r\n        case Type.Int:                  fn = visitor.visitInt; break;\r\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\r\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\r\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\r\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\r\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\r\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\r\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\r\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\r\n        case Type.Float:                fn = visitor.visitFloat; break;\r\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\r\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\r\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\r\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\r\n        case Type.Binary:               fn = visitor.visitBinary; break;\r\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\r\n        case Type.Date:                 fn = visitor.visitDate; break;\r\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\r\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\r\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\r\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\r\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\r\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\r\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\r\n        case Type.Time:                 fn = visitor.visitTime; break;\r\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\r\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\r\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\r\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\r\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\r\n        case Type.List:                 fn = visitor.visitList; break;\r\n        case Type.Struct:               fn = visitor.visitStruct; break;\r\n        case Type.Union:                fn = visitor.visitUnion; break;\r\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\r\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\r\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\r\n        case Type.Interval:             fn = visitor.visitInterval; break;\r\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\r\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\r\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\r\n        case Type.Map:                  fn = visitor.visitMap; break;\r\n    }\r\n    if (typeof fn === 'function') return fn;\r\n    if (!throwIfNotFound) return () => null;\r\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\r\n}\r\n\r\n/** @ignore */\r\nfunction inferDType<T extends DataType>(type: T): Type {\r\n    switch (type.typeId) {\r\n        case Type.Null: return Type.Null;\r\n        case Type.Int:\r\n            const { bitWidth, isSigned } = (type as any as Int);\r\n            switch (bitWidth) {\r\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\r\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\r\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\r\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\r\n            }\r\n            // @ts-ignore\r\n            return Type.Int;\r\n        case Type.Float:\r\n            switch((type as any as Float).precision) {\r\n                case Precision.HALF: return Type.Float16;\r\n                case Precision.SINGLE: return Type.Float32;\r\n                case Precision.DOUBLE: return Type.Float64;\r\n            }\r\n            // @ts-ignore\r\n            return Type.Float;\r\n        case Type.Binary: return Type.Binary;\r\n        case Type.Utf8: return Type.Utf8;\r\n        case Type.Bool: return Type.Bool;\r\n        case Type.Decimal: return Type.Decimal;\r\n        case Type.Time:\r\n            switch ((type as any as Time).unit) {\r\n                case TimeUnit.SECOND: return Type.TimeSecond;\r\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\r\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\r\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\r\n            }\r\n            // @ts-ignore\r\n            return Type.Time;\r\n        case Type.Timestamp:\r\n            switch ((type as any as Timestamp).unit) {\r\n                case TimeUnit.SECOND: return Type.TimestampSecond;\r\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\r\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\r\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\r\n            }\r\n            // @ts-ignore\r\n            return Type.Timestamp;\r\n        case Type.Date:\r\n            switch ((type as any as Date_).unit) {\r\n                case DateUnit.DAY: return Type.DateDay;\r\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\r\n            }\r\n            // @ts-ignore\r\n            return Type.Date;\r\n        case Type.Interval:\r\n            switch ((type as any as Interval).unit) {\r\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\r\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\r\n            }\r\n            // @ts-ignore\r\n            return Type.Interval;\r\n        case Type.Map: return Type.Map;\r\n        case Type.List: return Type.List;\r\n        case Type.Struct: return Type.Struct;\r\n        case Type.Union:\r\n            switch ((type as any as Union).mode) {\r\n                case UnionMode.Dense: return Type.DenseUnion;\r\n                case UnionMode.Sparse: return Type.SparseUnion;\r\n            }\r\n            // @ts-ignore\r\n            return Type.Union;\r\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\r\n        case Type.FixedSizeList: return Type.FixedSizeList;\r\n        case Type.Dictionary: return Type.Dictionary;\r\n    }\r\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\r\n}\r\n\r\nexport interface Visitor {\r\n    visitNull                  (node: any, ...args: any[]): any;\r\n    visitBool                  (node: any, ...args: any[]): any;\r\n    visitInt                   (node: any, ...args: any[]): any;\r\n    visitInt8?                 (node: any, ...args: any[]): any;\r\n    visitInt16?                (node: any, ...args: any[]): any;\r\n    visitInt32?                (node: any, ...args: any[]): any;\r\n    visitInt64?                (node: any, ...args: any[]): any;\r\n    visitUint8?                (node: any, ...args: any[]): any;\r\n    visitUint16?               (node: any, ...args: any[]): any;\r\n    visitUint32?               (node: any, ...args: any[]): any;\r\n    visitUint64?               (node: any, ...args: any[]): any;\r\n    visitFloat                 (node: any, ...args: any[]): any;\r\n    visitFloat16?              (node: any, ...args: any[]): any;\r\n    visitFloat32?              (node: any, ...args: any[]): any;\r\n    visitFloat64?              (node: any, ...args: any[]): any;\r\n    visitUtf8                  (node: any, ...args: any[]): any;\r\n    visitBinary                (node: any, ...args: any[]): any;\r\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\r\n    visitDate                  (node: any, ...args: any[]): any;\r\n    visitDateDay?              (node: any, ...args: any[]): any;\r\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\r\n    visitTimestamp             (node: any, ...args: any[]): any;\r\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\r\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\r\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\r\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\r\n    visitTime                  (node: any, ...args: any[]): any;\r\n    visitTimeSecond?           (node: any, ...args: any[]): any;\r\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\r\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\r\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\r\n    visitDecimal               (node: any, ...args: any[]): any;\r\n    visitList                  (node: any, ...args: any[]): any;\r\n    visitStruct                (node: any, ...args: any[]): any;\r\n    visitUnion                 (node: any, ...args: any[]): any;\r\n    visitDenseUnion?           (node: any, ...args: any[]): any;\r\n    visitSparseUnion?          (node: any, ...args: any[]): any;\r\n    visitDictionary            (node: any, ...args: any[]): any;\r\n    visitInterval              (node: any, ...args: any[]): any;\r\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\r\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\r\n    visitFixedSizeList         (node: any, ...args: any[]): any;\r\n    visitMap                   (node: any, ...args: any[]): any;\r\n}\r\n\r\n// Add these here so they're picked up by the externs creator\r\n// in the build, and closure-compiler doesn't minify them away\r\n(Visitor.prototype as any).visitInt8 = null;\r\n(Visitor.prototype as any).visitInt16 = null;\r\n(Visitor.prototype as any).visitInt32 = null;\r\n(Visitor.prototype as any).visitInt64 = null;\r\n(Visitor.prototype as any).visitUint8 = null;\r\n(Visitor.prototype as any).visitUint16 = null;\r\n(Visitor.prototype as any).visitUint32 = null;\r\n(Visitor.prototype as any).visitUint64 = null;\r\n(Visitor.prototype as any).visitFloat16 = null;\r\n(Visitor.prototype as any).visitFloat32 = null;\r\n(Visitor.prototype as any).visitFloat64 = null;\r\n(Visitor.prototype as any).visitDateDay = null;\r\n(Visitor.prototype as any).visitDateMillisecond = null;\r\n(Visitor.prototype as any).visitTimestampSecond = null;\r\n(Visitor.prototype as any).visitTimestampMillisecond = null;\r\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\r\n(Visitor.prototype as any).visitTimestampNanosecond = null;\r\n(Visitor.prototype as any).visitTimeSecond = null;\r\n(Visitor.prototype as any).visitTimeMillisecond = null;\r\n(Visitor.prototype as any).visitTimeMicrosecond = null;\r\n(Visitor.prototype as any).visitTimeNanosecond = null;\r\n(Visitor.prototype as any).visitDenseUnion = null;\r\n(Visitor.prototype as any).visitSparseUnion = null;\r\n(Visitor.prototype as any).visitIntervalDayTime = null;\r\n(Visitor.prototype as any).visitIntervalYearMonth = null;\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Visitor } from '../visitor';\r\nimport { VectorType } from '../interfaces';\r\nimport { Schema, Field } from '../schema';\r\nimport {\r\n    DataType, Dictionary,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n    Float, Float16, Float32, Float64,\r\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\r\n    Date_, DateDay, DateMillisecond,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Union, DenseUnion, SparseUnion,\r\n} from '../type';\r\n\r\n/** @ignore */\r\nexport interface TypeComparator extends Visitor {\r\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\r\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\r\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\r\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\r\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\r\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\r\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\r\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\r\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\r\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\r\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\r\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\r\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\r\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\r\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\r\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\r\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\r\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\r\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\r\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\r\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\r\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\r\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\r\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\r\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\r\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\r\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\r\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\r\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\r\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\r\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\r\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\r\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\r\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\r\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\r\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\r\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\r\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\r\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\r\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\r\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\r\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\r\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\r\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\r\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\r\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\r\n}\r\n\r\n/** @ignore */\r\nexport class TypeComparator extends Visitor {\r\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\r\n        return (schema === other) || (\r\n            other instanceof schema.constructor &&\r\n            instance.compareFields(schema.fields, other.fields)\r\n        );\r\n    }\r\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\r\n        return (fields === others) || (\r\n            Array.isArray(fields) &&\r\n            Array.isArray(others) &&\r\n            fields.length === others.length &&\r\n            fields.every((f, i) => instance.compareField(f, others[i]))\r\n        );\r\n    }\r\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\r\n        return (field === other) || (\r\n            other instanceof field.constructor &&\r\n            field.name === other.name &&\r\n            field.nullable === other.nullable &&\r\n            instance.visit(field.type, other.type)\r\n        );\r\n    }\r\n}\r\n\r\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\r\n    return other instanceof type.constructor;\r\n}\r\n\r\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || compareConstructor(type, other);\r\n}\r\n\r\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.bitWidth === other.bitWidth &&\r\n        type.isSigned === other.isSigned\r\n    );\r\n}\r\n\r\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.precision === other.precision\r\n    );\r\n}\r\n\r\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.byteWidth === other.byteWidth\r\n    );\r\n}\r\n\r\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.unit === other.unit\r\n    );\r\n}\r\n\r\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.unit === other.unit &&\r\n        type.timezone === other.timezone\r\n    );\r\n}\r\n\r\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.unit === other.unit &&\r\n        type.bitWidth === other.bitWidth\r\n    );\r\n}\r\n\r\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.children.length === other.children.length &&\r\n        instance.compareFields(type.children, other.children)\r\n    );\r\n}\r\n\r\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.children.length === other.children.length &&\r\n        instance.compareFields(type.children, other.children)\r\n    );\r\n}\r\n\r\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.mode === other.mode &&\r\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\r\n        instance.compareFields(type.children, other.children)\r\n    );\r\n}\r\n\r\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.id === other.id &&\r\n        type.isOrdered === other.isOrdered &&\r\n        instance.visit(<any> type.indices, other.indices) &&\r\n        instance.visit(type.dictionary, other.dictionary)\r\n    );\r\n}\r\n\r\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.unit === other.unit\r\n    );\r\n}\r\n\r\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.listSize === other.listSize &&\r\n        type.children.length === other.children.length &&\r\n        instance.compareFields(type.children, other.children)\r\n    );\r\n}\r\n\r\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\r\n    return (type === other) || (\r\n        compareConstructor(type, other) &&\r\n        type.keysSorted === other.keysSorted &&\r\n        type.children.length === other.children.length &&\r\n        instance.compareFields(type.children, other.children)\r\n    );\r\n}\r\n\r\nTypeComparator.prototype.visitNull                 =             compareAny;\r\nTypeComparator.prototype.visitBool                 =             compareAny;\r\nTypeComparator.prototype.visitInt                  =             compareInt;\r\nTypeComparator.prototype.visitInt8                 =             compareInt;\r\nTypeComparator.prototype.visitInt16                =             compareInt;\r\nTypeComparator.prototype.visitInt32                =             compareInt;\r\nTypeComparator.prototype.visitInt64                =             compareInt;\r\nTypeComparator.prototype.visitUint8                =             compareInt;\r\nTypeComparator.prototype.visitUint16               =             compareInt;\r\nTypeComparator.prototype.visitUint32               =             compareInt;\r\nTypeComparator.prototype.visitUint64               =             compareInt;\r\nTypeComparator.prototype.visitFloat                =           compareFloat;\r\nTypeComparator.prototype.visitFloat16              =           compareFloat;\r\nTypeComparator.prototype.visitFloat32              =           compareFloat;\r\nTypeComparator.prototype.visitFloat64              =           compareFloat;\r\nTypeComparator.prototype.visitUtf8                 =             compareAny;\r\nTypeComparator.prototype.visitBinary               =             compareAny;\r\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\r\nTypeComparator.prototype.visitDate                 =            compareDate;\r\nTypeComparator.prototype.visitDateDay              =            compareDate;\r\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\r\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\r\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\r\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\r\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\r\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\r\nTypeComparator.prototype.visitTime                 =            compareTime;\r\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\r\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\r\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\r\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\r\nTypeComparator.prototype.visitDecimal              =             compareAny;\r\nTypeComparator.prototype.visitList                 =            compareList;\r\nTypeComparator.prototype.visitStruct               =          compareStruct;\r\nTypeComparator.prototype.visitUnion                =           compareUnion;\r\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\r\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\r\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\r\nTypeComparator.prototype.visitInterval             =        compareInterval;\r\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\r\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\r\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\r\nTypeComparator.prototype.visitMap                  =             compareMap;\r\n\r\n/** @ignore */\r\nexport const instance = new TypeComparator();\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\n/* tslint:disable:class-name */\r\n\r\nimport { Field } from './schema';\r\nimport { flatbuffers } from 'flatbuffers';\r\nimport { TypedArrayConstructor } from './interfaces';\r\nimport { VectorType as V, TypeToDataType } from './interfaces';\r\nimport { instance as comparer } from './visitor/typecomparator';\r\n\r\nimport Long = flatbuffers.Long;\r\nimport {\r\n    Type,\r\n    Precision, UnionMode,\r\n    DateUnit, TimeUnit, IntervalUnit\r\n} from './enum';\r\n\r\n/** @ignore */\r\nexport type TimeBitWidth = 32 | 64;\r\n/** @ignore */\r\nexport type IntBitWidth = 8 | 16 | 32 | 64;\r\n/** @ignore */\r\nexport type IsSigned = { 'true': true; 'false': false };\r\n/** @ignore */\r\nexport type RowLike<T extends { [key: string]: DataType }> =\r\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\r\n    & { [P in keyof T]: T[P]['TValue'] | null }\r\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\r\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\r\n    ;\r\n\r\n/** @ignore */\r\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\r\n      { [P in K['TValue']]: V['TValue'] | null }\r\n    & ( Map<K['TValue'], V['TValue'] | null> )\r\n    ;\r\n\r\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\r\n    readonly TType: TType;\r\n    readonly TArray: any;\r\n    readonly TValue: any;\r\n    readonly ArrayType: any;\r\n    readonly children: Field<TChildren[keyof TChildren]>[];\r\n}\r\n\r\n/**\r\n * An abstract base class for classes that encapsulate metadata about each of\r\n * the logical types that Arrow can represent.\r\n */\r\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\r\n\r\n    // @ts-ignore\r\n    public [Symbol.toStringTag]: string;\r\n\r\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\r\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\r\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\r\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\r\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\r\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\r\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\r\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\r\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\r\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\r\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\r\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\r\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\r\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\r\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\r\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\r\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\r\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\r\n\r\n    public get typeId(): TType { return <any> Type.NONE; }\r\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\r\n        return comparer.visit(this, other);\r\n    }\r\n\r\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\r\n        (<any> proto).children = null;\r\n        (<any> proto).ArrayType = Array;\r\n        return proto[Symbol.toStringTag] = 'DataType';\r\n    })(DataType.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\r\n/** @ignore */\r\nexport class Null extends DataType<Type.Null> {\r\n    public toString() { return `Null`; }\r\n    public get typeId() { return Type.Null as Type.Null; }\r\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\r\n        return proto[Symbol.toStringTag] = 'Null';\r\n    })(Null.prototype);\r\n}\r\n\r\n/** @ignore */\r\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\r\n/** @ignore */\r\ntype IType = {\r\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\r\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\r\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\r\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\r\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\r\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\r\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\r\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\r\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\r\n};\r\n\r\n/** @ignore */\r\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\r\n/** @ignore */\r\nclass Int_<T extends Ints = Ints> extends DataType<T> {\r\n    constructor(public readonly isSigned: IType[T]['isSigned'],\r\n                public readonly bitWidth: IType[T]['bitWidth']) {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.Int as T; }\r\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\r\n        switch (this.bitWidth) {\r\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\r\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\r\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\r\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\r\n        }\r\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\r\n    }\r\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\r\n        (<any> proto).isSigned = null;\r\n        (<any> proto).bitWidth = null;\r\n        return proto[Symbol.toStringTag] = 'Int';\r\n    })(Int_.prototype);\r\n}\r\n\r\nexport { Int_ as Int };\r\n\r\n/** @ignore */\r\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\r\n/** @ignore */\r\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\r\n/** @ignore */\r\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\r\n/** @ignore */\r\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\r\n/** @ignore */\r\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\r\n/** @ignore */\r\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\r\n/** @ignore */\r\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\r\n/** @ignore */\r\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\r\n\r\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\r\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\r\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\r\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\r\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\r\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\r\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\r\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\r\n\r\n/** @ignore */\r\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\r\n/** @ignore */\r\ntype FType = {\r\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\r\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\r\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\r\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\r\n};\r\n\r\n/** @ignore */\r\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\r\n/** @ignore */\r\nexport class Float<T extends Floats = Floats> extends DataType<T> {\r\n    constructor(public readonly precision: Precision) {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.Float as T; }\r\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\r\n        switch (this.precision) {\r\n            case Precision.HALF: return Uint16Array;\r\n            case Precision.SINGLE: return Float32Array;\r\n            case Precision.DOUBLE: return Float64Array;\r\n        }\r\n        // @ts-ignore\r\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\r\n    }\r\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\r\n        (<any> proto).precision = null;\r\n        return proto[Symbol.toStringTag] = 'Float';\r\n    })(Float.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\r\n/** @ignore */\r\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\r\n/** @ignore */\r\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\r\n\r\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\r\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\r\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\r\n\r\n/** @ignore */\r\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\r\n/** @ignore */\r\nexport class Binary extends DataType<Type.Binary> {\r\n    constructor() {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.Binary as Type.Binary; }\r\n    public toString() { return `Binary`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\r\n        (<any> proto).ArrayType = Uint8Array;\r\n        return proto[Symbol.toStringTag] = 'Binary';\r\n    })(Binary.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\r\n/** @ignore */\r\nexport class Utf8 extends DataType<Type.Utf8> {\r\n    constructor() {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\r\n    public toString() { return `Utf8`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\r\n        (<any> proto).ArrayType = Uint8Array;\r\n        return proto[Symbol.toStringTag] = 'Utf8';\r\n    })(Utf8.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\r\n/** @ignore */\r\nexport class Bool extends DataType<Type.Bool> {\r\n    constructor() {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.Bool as Type.Bool; }\r\n    public toString() { return `Bool`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\r\n        (<any> proto).ArrayType = Uint8Array;\r\n        return proto[Symbol.toStringTag] = 'Bool';\r\n    })(Bool.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\r\n/** @ignore */\r\nexport class Decimal extends DataType<Type.Decimal> {\r\n    constructor(public readonly scale: number,\r\n                public readonly precision: number) {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.Decimal as Type.Decimal; }\r\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\r\n        (<any> proto).scale = null;\r\n        (<any> proto).precision = null;\r\n        (<any> proto).ArrayType = Uint32Array;\r\n        return proto[Symbol.toStringTag] = 'Decimal';\r\n    })(Decimal.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\r\n/** @ignore */\r\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\r\n/** @ignore */\r\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\r\n    constructor(public readonly unit: DateUnit) {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.Date as T; }\r\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\r\n        (<any> proto).unit = null;\r\n        (<any> proto).ArrayType = Int32Array;\r\n        return proto[Symbol.toStringTag] = 'Date';\r\n    })(Date_.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\r\n/** @ignore */\r\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\r\n\r\n/** @ignore */\r\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\r\n/** @ignore */\r\ntype TimesType = {\r\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\r\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\r\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\r\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\r\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\r\n};\r\n\r\n/** @ignore */\r\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\r\n/** @ignore */\r\nclass Time_<T extends Times = Times> extends DataType<T> {\r\n    constructor(public readonly unit: TimesType[T]['unit'],\r\n                public readonly bitWidth: TimeBitWidth) {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.Time as T; }\r\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\r\n        (<any> proto).unit = null;\r\n        (<any> proto).bitWidth = null;\r\n        (<any> proto).ArrayType = Int32Array;\r\n        return proto[Symbol.toStringTag] = 'Time';\r\n    })(Time_.prototype);\r\n}\r\n\r\nexport { Time_ as Time };\r\n\r\n/** @ignore */\r\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\r\n/** @ignore */\r\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\r\n/** @ignore */\r\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\r\n/** @ignore */\r\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\r\n\r\n/** @ignore */\r\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\r\n/** @ignore */\r\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\r\n/** @ignore */\r\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\r\n    constructor(public readonly unit: TimeUnit,\r\n                public readonly timezone?: string | null) {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.Timestamp as T; }\r\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\r\n        (<any> proto).unit = null;\r\n        (<any> proto).timezone = null;\r\n        (<any> proto).ArrayType = Int32Array;\r\n        return proto[Symbol.toStringTag] = 'Timestamp';\r\n    })(Timestamp_.prototype);\r\n}\r\n\r\nexport { Timestamp_ as Timestamp };\r\n\r\n/** @ignore */\r\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\r\n/** @ignore */\r\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\r\n/** @ignore */\r\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\r\n/** @ignore */\r\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\r\n\r\n/** @ignore */\r\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\r\n/** @ignore */\r\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\r\n/** @ignore */\r\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\r\n    constructor(public readonly unit: IntervalUnit) {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.Interval as T; }\r\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\r\n        (<any> proto).unit = null;\r\n        (<any> proto).ArrayType = Int32Array;\r\n        return proto[Symbol.toStringTag] = 'Interval';\r\n    })(Interval_.prototype);\r\n}\r\n\r\nexport { Interval_ as Interval };\r\n\r\n/** @ignore */\r\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\r\n/** @ignore */\r\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\r\n\r\n/** @ignore */\r\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\r\n/** @ignore */\r\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\r\n    constructor(child: Field<T>) {\r\n        super();\r\n        this.children = [child];\r\n    }\r\n    public readonly children: Field<T>[];\r\n    public get typeId() { return Type.List as Type.List; }\r\n    public toString() { return `List<${this.valueType}>`; }\r\n    public get valueType(): T { return this.children[0].type as T; }\r\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\r\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\r\n    protected static [Symbol.toStringTag] = ((proto: List) => {\r\n        (<any> proto).children = null;\r\n        return proto[Symbol.toStringTag] = 'List';\r\n    })(List.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\r\n/** @ignore */\r\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\r\n    public readonly children: Field<T[keyof T]>[];\r\n    constructor(children: Field<T[keyof T]>[]) {\r\n        super();\r\n        this.children = children;\r\n    }\r\n    public get typeId() { return Type.Struct as Type.Struct; }\r\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\r\n        (<any> proto).children = null;\r\n        return proto[Symbol.toStringTag] = 'Struct';\r\n    })(Struct.prototype);\r\n}\r\n\r\n/** @ignore */\r\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\r\n/** @ignore */\r\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\r\n/** @ignore */\r\nclass Union_<T extends Unions = Unions> extends DataType<T> {\r\n    public readonly mode: UnionMode;\r\n    public readonly typeIds: Int32Array;\r\n    public readonly children: Field<any>[];\r\n    public readonly typeIdToChildIndex: { [key: number]: number };\r\n    constructor(mode: UnionMode,\r\n                typeIds: number[] | Int32Array,\r\n                children: Field<any>[]) {\r\n        super();\r\n        this.mode = mode;\r\n        this.children = children;\r\n        this.typeIds = typeIds = Int32Array.from(typeIds);\r\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\r\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\r\n        }, Object.create(null) as { [key: number]: number });\r\n    }\r\n    public get typeId() { return Type.Union as T; }\r\n    public toString() { return `${this[Symbol.toStringTag]}<${\r\n        this.children.map((x) => `${x.type}`).join(` | `)\r\n    }>`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\r\n        (<any> proto).mode = null;\r\n        (<any> proto).typeIds = null;\r\n        (<any> proto).children = null;\r\n        (<any> proto).typeIdToChildIndex = null;\r\n        (<any> proto).ArrayType = Int8Array;\r\n        return proto[Symbol.toStringTag] = 'Union';\r\n    })(Union_.prototype);\r\n}\r\n\r\nexport { Union_ as Union };\r\n\r\n/** @ignore */\r\nexport class DenseUnion extends Union_<Type.DenseUnion> {\r\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\r\n        super(UnionMode.Dense, typeIds, children);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class SparseUnion extends Union_<Type.SparseUnion> {\r\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\r\n        super(UnionMode.Sparse, typeIds, children);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\r\n/** @ignore */\r\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\r\n    constructor(public readonly byteWidth: number) {\r\n        super();\r\n    }\r\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\r\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\r\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\r\n        (<any> proto).byteWidth = null;\r\n        (<any> proto).ArrayType = Uint8Array;\r\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\r\n    })(FixedSizeBinary.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\r\n/** @ignore */\r\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\r\n    public readonly children: Field<T>[];\r\n    constructor(public readonly listSize: number, child: Field<T>) {\r\n        super();\r\n        this.children = [child];\r\n    }\r\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\r\n    public get valueType(): T { return this.children[0].type as T; }\r\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\r\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\r\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\r\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\r\n        (<any> proto).children = null;\r\n        (<any> proto).listSize = null;\r\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\r\n    })(FixedSizeList.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\r\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\r\n    TChild: Struct<{ key: TKey, value: TValue }>;\r\n    TValue: MapLike<TKey, TValue>;\r\n}\r\n\r\n/** @ignore */\r\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\r\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\r\n        super();\r\n        this.children = [child];\r\n        this.keysSorted = keysSorted;\r\n    }\r\n    public readonly keysSorted: boolean;\r\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\r\n    public get typeId() { return Type.Map as Type.Map; }\r\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\r\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\r\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\r\n        (<any> proto).children = null;\r\n        (<any> proto).keysSorted = null;\r\n        return proto[Symbol.toStringTag] = 'Map_';\r\n    })(Map_.prototype);\r\n}\r\n\r\n/** @ignore */\r\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\r\n\r\n/** @ignore */\r\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\r\n\r\n/** @ignore */\r\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\r\n/** @ignore */\r\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\r\n    public readonly id: number;\r\n    public readonly indices: TKey;\r\n    public readonly dictionary: T;\r\n    public readonly isOrdered: boolean;\r\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\r\n        super();\r\n        this.indices = indices;\r\n        this.dictionary = dictionary;\r\n        this.isOrdered = isOrdered || false;\r\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\r\n    }\r\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\r\n    public get children() { return this.dictionary.children; }\r\n    public get valueType(): T { return this.dictionary as T; }\r\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\r\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\r\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\r\n        (<any> proto).id = null;\r\n        (<any> proto).indices = null;\r\n        (<any> proto).isOrdered = null;\r\n        (<any> proto).dictionary = null;\r\n        return proto[Symbol.toStringTag] = 'Dictionary';\r\n    })(Dictionary.prototype);\r\n}\r\n\r\n/** @ignore */\r\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\r\n/** @ignore */\r\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\r\n/** @ignore */\r\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\r\n\r\n/** @ignore */\r\nexport function strideForType(type: DataType) {\r\n    let t: any = type;\r\n    switch (type.typeId) {\r\n        case Type.Decimal: return 4;\r\n        case Type.Timestamp: return 2;\r\n        case Type.Date: return 1 + (t as Date_).unit;\r\n        case Type.Interval: return 1 + (t as Interval_).unit;\r\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\r\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\r\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\r\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\r\n        default: return 1;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from './vector';\r\nimport { truncateBitmap } from './util/bit';\r\nimport { popcnt_bit_range } from './util/bit';\r\nimport { BufferType, UnionMode, Type } from './enum';\r\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\r\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\r\nimport {\r\n    Dictionary,\r\n    Null, Int, Float,\r\n    Binary, Bool, Utf8, Decimal,\r\n    Date_, Time, Timestamp, Interval,\r\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\r\n} from './type';\r\n\r\n// When slicing, we do not know the null count of the sliced range without\r\n// doing some computation. To avoid doing this eagerly, we set the null count\r\n// to -1 (any negative number will do). When Vector.nullCount is called the\r\n// first time, the null count will be computed. See ARROW-33\r\n/** @ignore */ export type kUnknownNullCount = -1;\r\n/** @ignore */ export const kUnknownNullCount = -1;\r\n\r\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\r\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\r\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\r\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\r\n\r\n/** @ignore */\r\nexport interface Buffers<T extends DataType> {\r\n      [BufferType.OFFSET]: Int32Array;\r\n        [BufferType.DATA]: T['TArray'];\r\n    [BufferType.VALIDITY]: Uint8Array;\r\n        [BufferType.TYPE]: T['TArray'];\r\n}\r\n\r\n/** @ignore */\r\nexport interface Data<T extends DataType = DataType> {\r\n    readonly TType: T['TType'];\r\n    readonly TArray: T['TArray'];\r\n    readonly TValue: T['TValue'];\r\n}\r\n\r\n/** @ignore */\r\nexport class Data<T extends DataType = DataType> {\r\n\r\n    public readonly type: T;\r\n    public readonly length: number;\r\n    public readonly offset: number;\r\n    public readonly stride: number;\r\n    public readonly childData: Data[];\r\n\r\n    /**\r\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\r\n     */\r\n    public dictionary?: Vector;\r\n\r\n    // @ts-ignore\r\n    public readonly values: Buffers<T>[BufferType.DATA];\r\n    // @ts-ignore\r\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\r\n    // @ts-ignore\r\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\r\n    // @ts-ignore\r\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\r\n\r\n    public get typeId(): T['TType'] { return this.type.typeId; }\r\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\r\n    public get buffers() {\r\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\r\n    }\r\n    public get byteLength(): number {\r\n        let byteLength = 0;\r\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\r\n        valueOffsets && (byteLength += valueOffsets.byteLength);\r\n        values       && (byteLength += values.byteLength);\r\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\r\n        typeIds      && (byteLength += typeIds.byteLength);\r\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\r\n    }\r\n\r\n    protected _nullCount: number | kUnknownNullCount;\r\n\r\n    public get nullCount() {\r\n        let nullCount = this._nullCount;\r\n        let nullBitmap: Uint8Array | undefined;\r\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\r\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\r\n        }\r\n        return nullCount;\r\n    }\r\n\r\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\r\n        this.type = type;\r\n        this.dictionary = dictionary;\r\n        this.offset = Math.floor(Math.max(offset || 0, 0));\r\n        this.length = Math.floor(Math.max(length || 0, 0));\r\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\r\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\r\n        let buffer: Buffers<T>[keyof Buffers<T>];\r\n        if (buffers instanceof Data) {\r\n            this.stride = buffers.stride;\r\n            this.values = buffers.values;\r\n            this.typeIds = buffers.typeIds;\r\n            this.nullBitmap = buffers.nullBitmap;\r\n            this.valueOffsets = buffers.valueOffsets;\r\n        } else {\r\n            this.stride = strideForType(type);\r\n            if (buffers) {\r\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\r\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\r\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\r\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\r\n            }\r\n        }\r\n    }\r\n\r\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\r\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\r\n    }\r\n\r\n    public slice(offset: number, length: number): Data<T> {\r\n        const { stride, typeId, childData } = this;\r\n        // +true === 1, +false === 0, so this means\r\n        // we keep nullCount at 0 if it's already 0,\r\n        // otherwise set to the invalidated flag -1\r\n        const nullCount = +(this._nullCount === 0) - 1;\r\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\r\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\r\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\r\n            // Don't slice children if we have value offsets (the variable-width types)\r\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\r\n    }\r\n\r\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\r\n        if (this.typeId === Type.Null) {\r\n            return this.clone(this.type, 0, newLength, 0);\r\n        }\r\n        const { length, nullCount } = this;\r\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\r\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\r\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\r\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\r\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\r\n        if (nullCount > 0) {\r\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\r\n        }\r\n        const buffers = this.buffers;\r\n        buffers[BufferType.VALIDITY] = bitmap;\r\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\r\n    }\r\n\r\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\r\n        let arr: any, { buffers } = this;\r\n        // If typeIds exist, slice the typeIds buffer\r\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\r\n        // If offsets exist, only slice the offsets buffer\r\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\r\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\r\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\r\n        return buffers;\r\n    }\r\n\r\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\r\n        return childData.map((child) => child.slice(offset, length));\r\n    }\r\n\r\n    //\r\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\r\n    //\r\n    /** @nocollapse */\r\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\r\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\r\n        switch (type.typeId) {\r\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\r\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\r\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\r\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\r\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\r\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\r\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\r\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\r\n        }\r\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\r\n        return new Data(type, offset, length, 0);\r\n    }\r\n    /** @nocollapse */\r\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\r\n    }\r\n    /** @nocollapse */\r\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\r\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\r\n    }\r\n    /** @nocollapse */\r\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\r\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], child ? [child] : []);\r\n    }\r\n    /** @nocollapse */\r\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\r\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], child ? [child] : []);\r\n    }\r\n    /** @nocollapse */\r\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\r\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\r\n    }\r\n    /** @nocollapse */\r\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\r\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], child ? [child] : []);\r\n    }\r\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\r\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\r\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\r\n    /** @nocollapse */\r\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\r\n        const buffers = <unknown> [\r\n            undefined, undefined,\r\n            toUint8Array(nullBitmap),\r\n            toArrayBufferView(type.ArrayType, typeIds)\r\n        ] as Partial<Buffers<T>>;\r\n        if (type.mode === UnionMode.Sparse) {\r\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\r\n        }\r\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\r\n        return new Data(type, offset, length, nullCount, buffers, children);\r\n    }\r\n}\r\n\r\n(Data.prototype as any).childData = Object.freeze([]);\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\n/** @ignore */ const undf = void (0);\r\n\r\n/** @ignore */\r\nexport function valueToString(x: any) {\r\n    if (x === null) { return 'null'; }\r\n    if (x === undf) { return 'undefined'; }\r\n    switch (typeof x) {\r\n        case 'number': return `${x}`;\r\n        case 'bigint': return `${x}`;\r\n        case 'string': return `\"${x}\"`;\r\n    }\r\n    // If [Symbol.toPrimitive] is implemented (like in BN)\r\n    // use it instead of JSON.stringify(). This ensures we\r\n    // print BigInts, Decimals, and Binary in their native\r\n    // representation\r\n    if (typeof x[Symbol.toPrimitive] === 'function') {\r\n        return x[Symbol.toPrimitive]('string');\r\n    }\r\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { DataType } from '../type';\r\nimport { valueToString } from '../util/pretty';\r\nimport { BigIntAvailable } from '../util/compat';\r\n\r\n/**\r\n * Dynamically compile the null values into an `isValid()` function whose\r\n * implementation is a switch statement. Microbenchmarks in v8 indicate\r\n * this approach is 25% faster than using an ES6 Map.\r\n *\r\n * @example\r\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\r\n * `function (x) {\r\n *     if (x !== x) return false;\r\n *     switch (x) {\r\n *         case null:\r\n *         case \"N/A\":\r\n *             return false;\r\n *     }\r\n *     return true;\r\n * }`\r\n *\r\n * @ignore\r\n * @param nullValues\r\n */\r\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\r\n\r\n    if (!nullValues || nullValues.length <= 0) {\r\n        // @ts-ignore\r\n        return function isValid(value: any) { return true; };\r\n    }\r\n\r\n    let fnBody = '';\r\n    let noNaNs = nullValues.filter((x) => x === x);\r\n\r\n    if (noNaNs.length > 0) {\r\n        fnBody = `\r\n    switch (x) {${noNaNs.map((x) => `\r\n        case ${valueToCase(x)}:`).join('')}\r\n            return false;\r\n    }`;\r\n    }\r\n\r\n    // NaN doesn't equal anything including itself, so it doesn't work as a\r\n    // switch case. Instead we must explicitly check for NaN before the switch.\r\n    if (nullValues.length !== noNaNs.length) {\r\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\r\n    }\r\n\r\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\r\n}\r\n\r\n/** @ignore */\r\nfunction valueToCase(x: any) {\r\n    if (typeof x !== 'bigint') {\r\n        return valueToString(x);\r\n    } else if (BigIntAvailable) {\r\n        return `${valueToString(x)}n`;\r\n    }\r\n    return `\"${valueToString(x)}\"`;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { memcpy } from '../util/buffer';\r\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\r\nimport {\r\n    TypedArray, TypedArrayConstructor,\r\n    BigIntArray, BigIntArrayConstructor\r\n} from '../interfaces';\r\n\r\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\r\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\r\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\r\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\r\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\r\n    any;\r\n\r\n/** @ignore */\r\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\r\n/** @ignore */\r\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\r\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\r\n) as T;\r\n\r\n/** @ignore */\r\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\r\n    readonly offset: number;\r\n}\r\n\r\n/** @ignore */\r\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\r\n\r\n    constructor(buffer: T, stride = 1) {\r\n        this.buffer = buffer;\r\n        this.stride = stride;\r\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\r\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\r\n        this._resize(this.length = buffer.length / stride | 0);\r\n    }\r\n\r\n    public buffer: T;\r\n    public length: number;\r\n    public readonly stride: number;\r\n    public readonly ArrayType: ArrayCtor<T>;\r\n    public readonly BYTES_PER_ELEMENT: number;\r\n\r\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\r\n    public get reservedLength() { return this.buffer.length / this.stride; }\r\n    public get reservedByteLength() { return this.buffer.byteLength; }\r\n\r\n    // @ts-ignore\r\n    public set(index: number, value: TValue) { return this; }\r\n    public append(value: TValue) { return this.set(this.length, value); }\r\n    public reserve(extra: number) {\r\n        if (extra > 0) {\r\n            this.length += extra;\r\n            const stride = this.stride;\r\n            const length = this.length * stride;\r\n            const reserved = this.buffer.length;\r\n            if (length >= reserved) {\r\n                this._resize(reserved === 0\r\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\r\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\r\n                );\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    public flush(length = this.length) {\r\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\r\n        const array = sliceOrExtendArray<T>(this.buffer, length);\r\n        this.clear();\r\n        return array;\r\n    }\r\n    public clear() {\r\n        this.length = 0;\r\n        this._resize(0);\r\n        return this;\r\n    }\r\n    protected _resize(newLength: number) {\r\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\r\n    }\r\n}\r\n\r\n(BufferBuilder.prototype as any).offset = 0;\r\n\r\n/** @ignore */\r\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\r\n    public last() { return this.get(this.length - 1); }\r\n    public get(index: number) { return this.buffer[index]; }\r\n    public set(index: number, value: number) {\r\n        this.reserve(index - this.length + 1);\r\n        this.buffer[index * this.stride] = value;\r\n        return this;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\r\n\r\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\r\n\r\n    public numValid = 0;\r\n    public get numInvalid() { return this.length - this.numValid; }\r\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\r\n    public set(idx: number, val: number) {\r\n        const { buffer } = this.reserve(idx - this.length + 1);\r\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\r\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\r\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\r\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\r\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\r\n        return this;\r\n    }\r\n    public clear() {\r\n        this.numValid = 0;\r\n        return super.clear();\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\r\n    constructor(data = new Int32Array(1)) { super(data, 1); }\r\n    public append(value: number) {\r\n        return this.set(this.length - 1, value);\r\n    }\r\n    public set(index: number, value: number) {\r\n        const offset = this.length - 1;\r\n        const buffer = this.reserve(index - offset + 1).buffer;\r\n        if (offset < index++) {\r\n            buffer.fill(buffer[offset], offset, index);\r\n        }\r\n        buffer[index] = buffer[index - 1] + value;\r\n        return this;\r\n    }\r\n    public flush(length = this.length - 1) {\r\n        if (length > this.length) {\r\n            this.set(length - 1, 0);\r\n        }\r\n        return super.flush(length + 1);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\r\n    // @ts-ignore\r\n    public buffer64: R;\r\n    // @ts-ignore\r\n    protected _ArrayType64: BigIntArrayConstructor<R>;\r\n    public get ArrayType64() {\r\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\r\n    }\r\n    public set(index: number, value: DataValue<T>) {\r\n        this.reserve(index - this.length + 1);\r\n        switch (typeof value) {\r\n            case 'bigint': this.buffer64[index] = value; break;\r\n            case 'number': this.buffer[index * this.stride] = value; break;\r\n            default: this.buffer.set(value as TypedArray, index * this.stride);\r\n        }\r\n        return this;\r\n    }\r\n    protected _resize(newLength: number) {\r\n        const data = super._resize(newLength);\r\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\r\n        if (BigIntAvailable) {\r\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\r\n        }\r\n        return data;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from './vector';\r\nimport { BufferType } from './enum';\r\nimport { Data, Buffers } from './data';\r\nimport { createIsValidFunction } from './builder/valid';\r\nimport { BuilderType as B, VectorType as V} from './interfaces';\r\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\r\nimport {\r\n    DataType, strideForType,\r\n    Float, Int, Decimal, FixedSizeBinary,\r\n    Date_, Time, Timestamp, Interval,\r\n    Utf8, Binary, List, Map_\r\n} from './type';\r\n\r\n/**\r\n * A set of options required to create a `Builder` instance for a given `DataType`.\r\n * @see {@link Builder}\r\n */\r\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\r\n    type: T;\r\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\r\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\r\n}\r\n\r\n/**\r\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\r\n * @see {@link Builder.throughIterable}\r\n * @see {@link Builder.throughAsyncIterable}\r\n */\r\n\r\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\r\n    highWaterMark?: number;\r\n    queueingStrategy?: 'bytes' | 'count';\r\n    dictionaryHashFunction?: (value: any) => string | number;\r\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\r\n}\r\n\r\n/**\r\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\r\n *\r\n * A `Builder` is responsible for writing arbitrary JavaScript values\r\n * to ArrayBuffers and/or child Builders according to the Arrow specification\r\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\r\n *\r\n * The `Builder` for each Arrow `DataType` handles converting and appending\r\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\r\n * method creates the specific `Builder` subclass for the supplied `DataType`.\r\n *\r\n * Once created, `Builder` instances support both appending values to the end\r\n * of the `Builder`, and random-access writes to specific indices\r\n * (`Builder.prototype.append(value)` is a convenience method for\r\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\r\n * Builder's current length may cause the builder to grow its underlying buffers\r\n * or child Builders (if applicable) to accommodate the new values.\r\n *\r\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\r\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\r\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\r\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\r\n * an instance of `Vector<T>` instead.\r\n *\r\n * When there are no more values to write, use `Builder.prototype.finish()` to\r\n * finalize the `Builder`. This does not reset the internal state, so it is\r\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\r\n * if there are still values queued to be flushed.\r\n *\r\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\r\n * because this is when it flushes the values that have been enqueued in its internal\r\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\r\n *\r\n * ```ts\r\n * import { Builder, Utf8 } from 'apache-arrow';\r\n *\r\n * const utf8Builder = Builder.new({\r\n *     type: new Utf8(),\r\n *     nullValues: [null, 'n/a']\r\n * });\r\n *\r\n * utf8Builder\r\n *     .append('hello')\r\n *     .append('n/a')\r\n *     .append('world')\r\n *     .append(null);\r\n *\r\n * const utf8Vector = utf8Builder.finish().toVector();\r\n *\r\n * console.log(utf8Vector.toJSON());\r\n * // > [\"hello\", null, \"world\", null]\r\n * ```\r\n *\r\n * @typeparam T The `DataType` of this `Builder`.\r\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\r\n */\r\nexport abstract class Builder<T extends DataType = any, TNull = any> {\r\n\r\n    /**\r\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\r\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\r\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\r\n     *\r\n     * @typeparam T The `DataType` of the `Builder` to create.\r\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\r\n     * @nocollapse\r\n     */\r\n    // @ts-ignore\r\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\r\n\r\n    /** @nocollapse */\r\n    // @ts-ignore\r\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\r\n        throw new Error(`\"throughNode\" not available in this environment`);\r\n    }\r\n    /** @nocollapse */\r\n    // @ts-ignore\r\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\r\n        throw new Error(`\"throughDOM\" not available in this environment`);\r\n    }\r\n\r\n    /**\r\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\r\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\r\n     * the supplied `options` argument.\r\n     *\r\n     * This function returns a function that accepts an `Iterable` of values to\r\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\r\n     *\r\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\r\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\r\n     *\r\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\r\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\r\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\r\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\r\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\r\n     *   reaches or exceeds the supplied `highWaterMark`.\r\n     *\r\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\r\n     * @returns A function which accepts a JavaScript `Iterable` of values to\r\n     *          write, and returns an `Iterator` that yields Vectors according\r\n     *          to the chunking semantics defined in the `options` argument.\r\n     * @nocollapse\r\n     */\r\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\r\n        return throughIterable(options);\r\n    }\r\n\r\n    /**\r\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\r\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\r\n     * the supplied `options` argument.\r\n     *\r\n     * This function returns a function that accepts an `AsyncIterable` of values to\r\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\r\n     *\r\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\r\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\r\n     *\r\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\r\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\r\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\r\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\r\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\r\n     *   reaches or exceeds the supplied `highWaterMark`.\r\n     *\r\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\r\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\r\n     *          to write, and returns an `AsyncIterator` that yields Vectors\r\n     *          according to the chunking semantics defined in the `options`\r\n     *          argument.\r\n     * @nocollapse\r\n     */\r\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\r\n        return throughAsyncIterable(options);\r\n    }\r\n\r\n    /**\r\n     * Construct a builder with the given Arrow DataType with optional null values,\r\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\r\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\r\n     */\r\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\r\n        this.type = type;\r\n        this.children = [];\r\n        this.nullValues = nulls;\r\n        this.stride = strideForType(type);\r\n        this._nulls = new BitmapBufferBuilder();\r\n        if (nulls && nulls.length > 0) {\r\n            this._isValid = createIsValidFunction(nulls);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The Builder's `DataType` instance.\r\n     * @readonly\r\n     */\r\n    public type: T;\r\n    /**\r\n     * The number of values written to the `Builder` that haven't been flushed yet.\r\n     * @readonly\r\n     */\r\n    public length = 0;\r\n    /**\r\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\r\n     * @readonly\r\n     */\r\n    public finished = false;\r\n    /**\r\n     * The number of elements in the underlying values TypedArray that\r\n     * represent a single logical element, determined by this Builder's\r\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\r\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\r\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\r\n     * @readonly\r\n     */\r\n    public readonly stride: number;\r\n    public readonly children: Builder[];\r\n    /**\r\n     * The list of null-value sentinels for this `Builder`. When one of these values\r\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\r\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\r\n     * @readonly\r\n     */\r\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\r\n\r\n    /**\r\n     * Flush the `Builder` and return a `Vector<T>`.\r\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\r\n     */\r\n    public toVector() { return Vector.new(this.flush()); }\r\n\r\n    public get ArrayType() { return this.type.ArrayType; }\r\n    public get nullCount() { return this._nulls.numInvalid; }\r\n    public get numChildren() { return this.children.length; }\r\n\r\n    /**\r\n     * @returns The aggregate length (in bytes) of the values that have been written.\r\n     */\r\n    public get byteLength(): number {\r\n        let size = 0;\r\n        this._offsets && (size += this._offsets.byteLength);\r\n        this._values && (size += this._values.byteLength);\r\n        this._nulls && (size += this._nulls.byteLength);\r\n        this._typeIds && (size += this._typeIds.byteLength);\r\n        return this.children.reduce((size, child) => size + child.byteLength, size);\r\n    }\r\n\r\n    /**\r\n     * @returns The aggregate number of rows that have been reserved to write new values.\r\n     */\r\n    public get reservedLength(): number {\r\n        return this._nulls.reservedLength;\r\n    }\r\n\r\n    /**\r\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\r\n     */\r\n    public get reservedByteLength(): number {\r\n        let size = 0;\r\n        this._offsets && (size += this._offsets.reservedByteLength);\r\n        this._values && (size += this._values.reservedByteLength);\r\n        this._nulls && (size += this._nulls.reservedByteLength);\r\n        this._typeIds && (size += this._typeIds.reservedByteLength);\r\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\r\n    }\r\n\r\n    // @ts-ignore\r\n    protected _offsets: DataBufferBuilder<Int32Array>;\r\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\r\n\r\n    // @ts-ignore\r\n    protected _values: BufferBuilder<T['TArray'], any>;\r\n    public get values() { return this._values ? this._values.buffer : null; }\r\n\r\n    protected _nulls: BitmapBufferBuilder;\r\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\r\n\r\n    // @ts-ignore\r\n    protected _typeIds: DataBufferBuilder<Int8Array>;\r\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\r\n\r\n    // @ts-ignore\r\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\r\n    // @ts-ignore\r\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\r\n\r\n    /**\r\n     * Appends a value (or null) to this `Builder`.\r\n     * This is equivalent to `builder.set(builder.length, value)`.\r\n     * @param {T['TValue'] | TNull } value The value to append.\r\n     */\r\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\r\n\r\n    /**\r\n     * Validates whether a value is valid (true), or null (false)\r\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\r\n     */\r\n    // @ts-ignore\r\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\r\n\r\n    /**\r\n     * Write a value (or null-value sentinel) at the supplied index.\r\n     * If the value matches one of the null-value representations, a 1-bit is\r\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\r\n     * the null `BitmapBufferBuilder`, and the value is passed to\r\n     * `Builder.prototype.setValue()`.\r\n     * @param {number} index The index of the value to write.\r\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\r\n     * @returns {this} The updated `Builder` instance.\r\n     */\r\n    public set(index: number, value: T['TValue'] | TNull) {\r\n        if (this.setValid(index, this.isValid(value))) {\r\n            this.setValue(index, value);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Write a value to the underlying buffers at the supplied index, bypassing\r\n     * the null-value check. This is a low-level method that\r\n     * @param {number} index\r\n     * @param {T['TValue'] | TNull } value\r\n     */\r\n    // @ts-ignore\r\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\r\n    public setValid(index: number, valid: boolean) {\r\n        this.length = this._nulls.set(index, +valid).length;\r\n        return valid;\r\n    }\r\n\r\n    // @ts-ignore\r\n    public addChild(child: Builder, name = `${this.numChildren}`) {\r\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\r\n     * exists at that index.\r\n     * @param {number} index The index of the child `Builder` to retrieve.\r\n     * @returns {Builder | null} The child Builder at the supplied index or null.\r\n     */\r\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\r\n        return this.children[index] || null;\r\n    }\r\n\r\n    /**\r\n     * Commit all the values that have been written to their underlying\r\n     * ArrayBuffers, including any child Builders if applicable, and reset\r\n     * the internal `Builder` state.\r\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\r\n     */\r\n    public flush() {\r\n\r\n        const buffers: any = [];\r\n        const values =  this._values;\r\n        const offsets =  this._offsets;\r\n        const typeIds =  this._typeIds;\r\n        const { length, nullCount } = this;\r\n\r\n        if (typeIds) { /* Unions */\r\n            buffers[BufferType.TYPE] = typeIds.flush(length);\r\n            // DenseUnions\r\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\r\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\r\n            // Binary, Utf8\r\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\r\n            buffers[BufferType.OFFSET] = offsets.flush(length);\r\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\r\n            buffers[BufferType.DATA] = values.flush(length);\r\n        }\r\n\r\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\r\n\r\n        const data = Data.new<T>(\r\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\r\n            this.children.map((child) => child.flush())) as Data<T>;\r\n\r\n        this.clear();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Finalize this `Builder`, and child builders if applicable.\r\n     * @returns {this} The finalized `Builder` instance.\r\n     */\r\n    public finish() {\r\n        this.finished = true;\r\n        this.children.forEach((child) => child.finish());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\r\n     * @returns {this} The cleared `Builder` instance.\r\n     */\r\n    public clear() {\r\n        this.length = 0;\r\n        this._offsets && (this._offsets.clear());\r\n        this._values && (this._values.clear());\r\n        this._nulls && (this._nulls.clear());\r\n        this._typeIds && (this._typeIds.clear());\r\n        this.children.forEach((child) => child.clear());\r\n        return this;\r\n    }\r\n}\r\n\r\n(Builder.prototype as any).length = 1;\r\n(Builder.prototype as any).stride = 1;\r\n(Builder.prototype as any).children = null;\r\n(Builder.prototype as any).finished = false;\r\n(Builder.prototype as any).nullValues = null;\r\n(Builder.prototype as any)._isValid = () => true;\r\n\r\n/** @ignore */\r\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\r\n    constructor(opts: BuilderOptions<T, TNull>) {\r\n        super(opts);\r\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\r\n    }\r\n    public setValue(index: number, value: T['TValue']) {\r\n        const values = this._values;\r\n        values.reserve(index - values.length + 1);\r\n        return super.setValue(index, value);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\r\n    protected _pendingLength: number = 0;\r\n    protected _offsets: OffsetsBufferBuilder;\r\n    protected _pending: Map<number, any> | undefined;\r\n    constructor(opts: BuilderOptions<T, TNull>) {\r\n        super(opts);\r\n        this._offsets = new OffsetsBufferBuilder();\r\n    }\r\n    public setValue(index: number, value: T['TValue']) {\r\n        const pending = this._pending || (this._pending = new Map());\r\n        const current = pending.get(index);\r\n        current && (this._pendingLength -= current.length);\r\n        this._pendingLength += value.length;\r\n        pending.set(index, value);\r\n    }\r\n    public setValid(index: number, isValid: boolean) {\r\n        if (!super.setValid(index, isValid)) {\r\n            (this._pending || (this._pending = new Map())).set(index, undefined);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    public clear() {\r\n        this._pendingLength = 0;\r\n        this._pending = undefined;\r\n        return super.clear();\r\n    }\r\n    public flush() {\r\n        this._flush();\r\n        return super.flush();\r\n    }\r\n    public finish() {\r\n        this._flush();\r\n        return super.finish();\r\n    }\r\n    protected _flush() {\r\n        const pending = this._pending;\r\n        const pendingLength = this._pendingLength;\r\n        this._pendingLength = 0;\r\n        this._pending = undefined;\r\n        if (pending && pending.size > 0) {\r\n            this._flushPending(pending, pendingLength);\r\n        }\r\n        return this;\r\n    }\r\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\r\n}\r\n\r\n/** @ignore */\r\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\r\n\r\n/** @ignore */\r\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\r\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\r\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\r\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\r\n    return function*(source: Iterable<T['TValue'] | TNull>) {\r\n        let numChunks = 0;\r\n        let builder = Builder.new(options);\r\n        for (const value of source) {\r\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\r\n                ++numChunks && (yield builder.toVector());\r\n            }\r\n        }\r\n        if (builder.finish().length > 0 || numChunks === 0) {\r\n            yield builder.toVector();\r\n        }\r\n    } as ThroughIterable<T, TNull>;\r\n}\r\n\r\n/** @ignore */\r\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\r\n\r\n/** @ignore */\r\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\r\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\r\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\r\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\r\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\r\n        let numChunks = 0;\r\n        let builder = Builder.new(options);\r\n        for await (const value of source) {\r\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\r\n                ++numChunks && (yield builder.toVector());\r\n            }\r\n        }\r\n        if (builder.finish().length > 0 || numChunks === 0) {\r\n            yield builder.toVector();\r\n        }\r\n    } as ThroughAsyncIterable<T, TNull>;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Bool } from '../type';\r\nimport { BitmapBufferBuilder } from './buffer';\r\nimport { Builder, BuilderOptions } from '../builder';\r\n\r\n/** @ignore */\r\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\r\n    constructor(options: BuilderOptions<Bool, TNull>) {\r\n        super(options);\r\n        this._values = new BitmapBufferBuilder();\r\n    }\r\n    public setValue(index: number, value: boolean) {\r\n        this._values.set(index, +value);\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Null } from '../type';\r\nimport { Builder } from '../builder';\r\n\r\n/** @ignore */\r\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\r\n    // @ts-ignore\r\n    public setValue(index: number, value: null) {}\r\n    public setValid(index: number, valid: boolean) {\r\n        this.length = Math.max(index + 1, this.length);\r\n        return valid;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { FixedWidthBuilder } from '../builder';\r\nimport { Date_, DateDay, DateMillisecond } from '../type';\r\n\r\n/** @ignore */\r\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\r\n/** @ignore */\r\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\r\n/** @ignore */\r\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Decimal } from '../type';\r\nimport { FixedWidthBuilder } from '../builder';\r\n\r\n/** @ignore */\r\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector';\r\nimport { IntBuilder } from './int';\r\nimport { Dictionary, DataType } from '../type';\r\nimport { Builder, BuilderOptions } from '../builder';\r\n\r\ntype DictionaryHashFunction = (x: any) => string | number;\r\n\r\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\r\n    dictionaryHashFunction?: DictionaryHashFunction;\r\n}\r\n\r\n/** @ignore */\r\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\r\n\r\n    protected _dictionaryOffset: number;\r\n    protected _dictionary?: Vector<T['dictionary']>;\r\n    protected _keysToIndices: { [key: string]: number };\r\n    public readonly indices: IntBuilder<T['indices']>;\r\n    public readonly dictionary: Builder<T['dictionary']>;\r\n\r\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\r\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\r\n        this._nulls = <any> null;\r\n        this._dictionaryOffset = 0;\r\n        this._keysToIndices = Object.create(null);\r\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\r\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\r\n        if (typeof hashFn === 'function') {\r\n            this.valueToKey = hashFn;\r\n        }\r\n    }\r\n\r\n    public get values() { return this.indices.values; }\r\n    public get nullCount() { return this.indices.nullCount; }\r\n    public get nullBitmap() { return this.indices.nullBitmap; }\r\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\r\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\r\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\r\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\r\n    public setValid(index: number, valid: boolean) {\r\n        const indices = this.indices;\r\n        valid = indices.setValid(index, valid);\r\n        this.length = indices.length;\r\n        return valid;\r\n    }\r\n    public setValue(index: number, value: T['TValue']) {\r\n        let keysToIndices = this._keysToIndices;\r\n        let key = this.valueToKey(value);\r\n        let idx = keysToIndices[key];\r\n        if (idx === undefined) {\r\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\r\n        }\r\n        return this.indices.setValue(index, idx);\r\n    }\r\n    public flush() {\r\n        const type = this.type;\r\n        const prev = this._dictionary;\r\n        const curr = this.dictionary.toVector();\r\n        const data = this.indices.flush().clone(type);\r\n        data.dictionary = prev ? prev.concat(curr) : curr;\r\n        this.finished || (this._dictionaryOffset += curr.length);\r\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\r\n        this.clear();\r\n        return data;\r\n    }\r\n    public finish() {\r\n        this.indices.finish();\r\n        this.dictionary.finish();\r\n        this._dictionaryOffset = 0;\r\n        this._keysToIndices = Object.create(null);\r\n        return super.finish();\r\n    }\r\n    public clear() {\r\n        this.indices.clear();\r\n        this.dictionary.clear();\r\n        return super.clear();\r\n    }\r\n    public valueToKey(val: any): string | number {\r\n        return typeof val === 'string' ? val : `${val}`;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { FixedSizeBinary } from '../type';\r\nimport { FixedWidthBuilder } from '../builder';\r\n\r\n/** @ignore */\r\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nconst f64 = new Float64Array(1);\r\nconst u32 = new Uint32Array(f64.buffer);\r\n\r\n/**\r\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\r\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\r\n * @param h {number} the uint16 to convert\r\n * @private\r\n * @ignore\r\n */\r\nexport function uint16ToFloat64(h: number) {\r\n    let expo = (h & 0x7C00) >> 10;\r\n    let sigf = (h & 0x03FF) / 1024;\r\n    let sign = (-1) ** ((h & 0x8000) >> 15);\r\n    switch (expo) {\r\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\r\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\r\n    }\r\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\r\n}\r\n\r\n/**\r\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\r\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\r\n * @param d {number} The float64 to convert\r\n * @private\r\n * @ignore\r\n */\r\nexport function float64ToUint16(d: number) {\r\n\r\n    if (d !== d) { return 0x7E00; } // NaN\r\n\r\n    f64[0] = d;\r\n\r\n    // Magic numbers:\r\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\r\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\r\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\r\n\r\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\r\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\r\n\r\n    if (expo >= 0x40f00000) {\r\n        //\r\n        // If exponent overflowed, the float16 is either NaN or Infinity.\r\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\r\n        //\r\n        // Magic numbers:\r\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\r\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\r\n        //\r\n        // returns:\r\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\r\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\r\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\r\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\r\n        //\r\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\r\n        if (u32[0] > 0) {\r\n            expo = 0x7C00;\r\n        } else {\r\n            expo = (expo & 0x7C000000) >> 16;\r\n            sigf = (u32[1] & 0x000fffff) >> 10;\r\n        }\r\n    } else if (expo <= 0x3f000000) {\r\n        //\r\n        // If exponent underflowed, the float is either signed zero or subnormal.\r\n        //\r\n        // Magic numbers:\r\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\r\n        //\r\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\r\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\r\n        expo = 0;\r\n    } else {\r\n        //\r\n        // No overflow or underflow, rebase the exponent and round the mantissa\r\n        // Magic numbers:\r\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\r\n        //\r\n\r\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\r\n        expo = (expo - 0x3f000000) >> 10;\r\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\r\n    }\r\n\r\n    return sign | expo | sigf & 0xFFFF;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { float64ToUint16 } from '../util/math';\r\nimport { FixedWidthBuilder } from '../builder';\r\nimport { Float, Float16, Float32, Float64 } from '../type';\r\n\r\n/** @ignore */\r\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\r\n\r\n/** @ignore */\r\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\r\n    public setValue(index: number, value: number) {\r\n        // convert JS float64 to a uint16\r\n        this._values.set(index, float64ToUint16(value));\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\r\n    public setValue(index: number, value: number) {\r\n        this._values.set(index, value);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\r\n    public setValue(index: number, value: number) {\r\n        this._values.set(index, value);\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\r\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\r\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\r\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\r\n\r\n/** @ignore */\r\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\r\n\r\n/** @ignore */ type BigNumArray = IntArray | UintArray;\r\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\r\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\r\n\r\n/** @ignore */\r\nfunction BigNum(this: any, x: any, ...xs: any) {\r\n    if (xs.length === 0) {\r\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\r\n    }\r\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\r\n}\r\n\r\nBigNum.prototype[isArrowBigNumSymbol] = true;\r\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\r\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\r\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\r\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\r\n    switch (hint) {\r\n        case 'number': return bignumToNumber(this);\r\n        case 'string': return bignumToString(this);\r\n        case 'default': return bignumToBigInt(this);\r\n    }\r\n    // @ts-ignore\r\n    return bignumToString(this);\r\n};\r\n\r\n/** @ignore */\r\ntype TypedArrayConstructorArgs =\r\n    [number | void] |\r\n    [Iterable<number> | Iterable<bigint>] |\r\n    [ArrayBufferLike, number | void, number | void] ;\r\n\r\n/** @ignore */\r\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\r\n/** @ignore */\r\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\r\n/** @ignore */\r\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\r\n\r\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\r\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\r\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\r\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\r\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\r\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\r\n\r\n/** @ignore */\r\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\r\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\r\n    let words = new Int32Array(buffer, byteOffset, length);\r\n    let number = 0, i = 0, n = words.length, hi, lo;\r\n    while (i < n) {\r\n        lo = words[i++];\r\n        hi = words[i++];\r\n        signed || (hi = hi >>> 0);\r\n        number += (lo >>> 0) + (hi * (i ** 32));\r\n    }\r\n    return number;\r\n}\r\n\r\n/** @ignore */\r\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\r\n/** @ignore */\r\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\r\n\r\nif (!BigIntAvailable) {\r\n    bignumToString = decimalToString;\r\n    bignumToBigInt = <any> bignumToString;\r\n} else {\r\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\r\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\r\n}\r\n\r\n/** @ignore */\r\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\r\n    let digits = '';\r\n    let base64 = new Uint32Array(2);\r\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\r\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\r\n    let i = -1, n = base32.length - 1;\r\n    do {\r\n        for (base64[0] = base32[i = 0]; i < n;) {\r\n            base32[i++] = base64[1] = base64[0] / 10;\r\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\r\n        }\r\n        base32[i] = base64[1] = base64[0] / 10;\r\n        base64[0] = base64[0] - base64[1] * 10;\r\n        digits = `${base64[0]}${digits}`;\r\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\r\n    return digits ? digits : `0`;\r\n}\r\n\r\n/** @ignore */\r\nexport class BN<T extends BigNumArray> {\r\n    /** @nocollapse */\r\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\r\n        switch (isSigned) {\r\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\r\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\r\n        }\r\n        switch (num.constructor) {\r\n            case Int8Array:\r\n            case Int16Array:\r\n            case Int32Array:\r\n            case BigInt64Array:\r\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\r\n        }\r\n        if (num.byteLength === 16) {\r\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\r\n        }\r\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\r\n    }\r\n    /** @nocollapse */\r\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\r\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\r\n    }\r\n    /** @nocollapse */\r\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\r\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\r\n    }\r\n    /** @nocollapse */\r\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\r\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\r\n    }\r\n    constructor(num: T, isSigned?: boolean) {\r\n        return BN.new(num, isSigned) as any;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\r\n\r\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\r\n\r\n    readonly signed: boolean;\r\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\r\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\r\n\r\n    [Symbol.toStringTag]:\r\n        'Int8Array'         |\r\n        'Int16Array'        |\r\n        'Int32Array'        |\r\n        'Uint8Array'        |\r\n        'Uint16Array'       |\r\n        'Uint32Array'       |\r\n        'Uint8ClampedArray';\r\n\r\n    /**\r\n     * Convert the bytes to their (positive) decimal representation for printing\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\r\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\r\n     * number via `+bn_inst`\r\n     */\r\n    valueOf(): number;\r\n    /**\r\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\r\n     * so it's compatible with JSON.stringify().\r\n     */\r\n    toJSON(): string;\r\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\r\n}\r\n\r\n/** @ignore */\r\ninterface TypedArrayLike<T extends BigNumArray> {\r\n\r\n    readonly length: number;\r\n    readonly buffer: ArrayBuffer;\r\n    readonly byteLength: number;\r\n    readonly byteOffset: number;\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\r\n    copyWithin(target: number, start: number, end?: number | undefined): this;\r\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\r\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\r\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\r\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\r\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\r\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\r\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\r\n    join(separator?: string | undefined): string;\r\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\r\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\r\n    reverse(): T;\r\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\r\n    slice(start?: number | undefined, end?: number | undefined): T;\r\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\r\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\r\n    subarray(begin: number, end?: number | undefined): T;\r\n    toLocaleString(): string;\r\n    entries(): IterableIterator<[number, number]>;\r\n    keys(): IterableIterator<number>;\r\n    values(): IterableIterator<number>;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { bignumToBigInt } from '../util/bn';\r\nimport { WideBufferBuilder } from './buffer';\r\nimport { BigInt64Array } from '../util/compat';\r\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\r\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\r\n\r\n/** @ignore */\r\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\r\n    public setValue(index: number, value: T['TValue']) {\r\n        this._values.set(index, value);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\r\n/** @ignore */\r\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\r\n/** @ignore */\r\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\r\n/** @ignore */\r\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\r\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\r\n    constructor(options: BuilderOptions<Int64, TNull>) {\r\n        if (options['nullValues']) {\r\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\r\n        }\r\n        super(options);\r\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\r\n    }\r\n    public get values64() { return this._values.buffer64; }\r\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\r\n}\r\n\r\n/** @ignore */\r\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\r\n/** @ignore */\r\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\r\n/** @ignore */\r\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\r\n/** @ignore */\r\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\r\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\r\n    constructor(options: BuilderOptions<Uint64, TNull>) {\r\n        if (options['nullValues']) {\r\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\r\n        }\r\n        super(options);\r\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\r\n    }\r\n    public get values64() { return this._values.buffer64; }\r\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\r\n}\r\n\r\nconst toBigInt = ((memo: any) => (value: any) => {\r\n    if (ArrayBuffer.isView(value)) {\r\n        memo.buffer = value.buffer;\r\n        memo.byteOffset = value.byteOffset;\r\n        memo.byteLength = value.byteLength;\r\n        value = bignumToBigInt(memo);\r\n        memo.buffer = null;\r\n    }\r\n    return value;\r\n})({ 'BigIntArray': BigInt64Array });\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { FixedWidthBuilder } from '../builder';\r\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\r\n\r\n/** @ignore */\r\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\r\n/** @ignore */\r\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\r\n/** @ignore */\r\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\r\n/** @ignore */\r\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\r\n/** @ignore */\r\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { FixedWidthBuilder } from '../builder';\r\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\r\n\r\n/** @ignore */\r\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\r\n/** @ignore */\r\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\r\n/** @ignore */\r\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\r\n/** @ignore */\r\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\r\n/** @ignore */\r\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { FixedWidthBuilder } from '../builder';\r\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\r\n\r\n/** @ignore */\r\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\r\n/** @ignore */\r\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\r\n/** @ignore */\r\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Binary } from '../type';\r\nimport { toUint8Array } from '../util/buffer';\r\nimport { BufferBuilder } from './buffer';\r\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\r\n\r\n/** @ignore */\r\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\r\n    constructor(opts: BuilderOptions<Binary, TNull>) {\r\n        super(opts);\r\n        this._values = new BufferBuilder(new Uint8Array(0));\r\n    }\r\n    public get byteLength(): number {\r\n        let size = this._pendingLength + (this.length * 4);\r\n        this._offsets && (size += this._offsets.byteLength);\r\n        this._values && (size += this._values.byteLength);\r\n        this._nulls && (size += this._nulls.byteLength);\r\n        return size;\r\n    }\r\n    public setValue(index: number, value: Uint8Array) {\r\n        return super.setValue(index, toUint8Array(value));\r\n    }\r\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\r\n        const offsets = this._offsets;\r\n        const data = this._values.reserve(pendingLength).buffer;\r\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\r\n        for ([index, value] of pending) {\r\n            if (value === undefined) {\r\n                offsets.set(index, 0);\r\n            } else {\r\n                length = value.length;\r\n                data.set(value, offset);\r\n                offsets.set(index, length);\r\n                offset += length;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Utf8 } from '../type';\r\nimport { encodeUtf8 } from '../util/utf8';\r\nimport { BinaryBuilder } from './binary';\r\nimport { BufferBuilder } from './buffer';\r\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\r\n\r\n/** @ignore */\r\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\r\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\r\n        super(opts);\r\n        this._values = new BufferBuilder(new Uint8Array(0));\r\n    }\r\n    public get byteLength(): number {\r\n        let size = this._pendingLength + (this.length * 4);\r\n        this._offsets && (size += this._offsets.byteLength);\r\n        this._values && (size += this._values.byteLength);\r\n        this._nulls && (size += this._nulls.byteLength);\r\n        return size;\r\n    }\r\n    public setValue(index: number, value: string) {\r\n        return super.setValue(index, encodeUtf8(value) as any);\r\n    }\r\n    // @ts-ignore\r\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\r\n}\r\n\r\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector';\r\nimport { DataType } from '../type';\r\n\r\n/** @ignore */\r\nexport class Run<T extends DataType = any, TNull = any> {\r\n    // @ts-ignore\r\n    protected _values: ArrayLike<T['TValue'] | TNull>;\r\n    public get length() { return this._values.length; }\r\n    public get(index: number) { return this._values[index]; }\r\n    public clear() { this._values = <any> null; return this; }\r\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\r\n        if (values instanceof Vector) {\r\n            return values;\r\n        }\r\n        this._values = values;\r\n        return this as any;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector';\r\nimport { StructVector } from './struct';\r\nimport { valueToString } from '../util/pretty';\r\nimport { DataType, Struct, RowLike } from '../type';\r\n\r\n/** @ignore */ const kParent = Symbol.for('parent');\r\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\r\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\r\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\r\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\r\n\r\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\r\n\r\n    public readonly size: number;\r\n    public readonly [Symbol.toStringTag]: string;\r\n\r\n    protected [kRowIndex]: number;\r\n    protected [kParent]: Vector<Struct>;\r\n    protected [kKeyToIdx]: Map<K, number>;\r\n    protected [kIdxToVal]: V[];\r\n\r\n    constructor(parent: Vector<Struct>, numKeys: number) {\r\n        this[kParent] = parent;\r\n        this.size = numKeys;\r\n    }\r\n\r\n    public abstract keys(): IterableIterator<K>;\r\n    public abstract values(): IterableIterator<V>;\r\n    public abstract getKey(idx: number): K;\r\n    public abstract getIndex(key: K): number;\r\n    public abstract getValue(idx: number): V;\r\n    public abstract setValue(idx: number, val: V): void;\r\n\r\n    public entries() { return this[Symbol.iterator](); }\r\n\r\n    public has(key: K) { return this.get(key) !== undefined; }\r\n\r\n    public get(key: K) {\r\n        let val = undefined;\r\n        if (key !== null && key !== undefined) {\r\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\r\n            let idx = ktoi.get(key);\r\n            if (idx !== undefined) {\r\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\r\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\r\n            } else if ((idx = this.getIndex(key)) > -1) {\r\n                ktoi.set(key, idx);\r\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\r\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\r\n            }\r\n        }\r\n        return val;\r\n    }\r\n\r\n    public set(key: K, val: V) {\r\n        if (key !== null && key !== undefined) {\r\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\r\n            let idx = ktoi.get(key);\r\n            if (idx === undefined) {\r\n                ktoi.set(key, idx = this.getIndex(key));\r\n            }\r\n            if (idx > -1) {\r\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\r\n                itov[idx] = <any> this.setValue(idx, val);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\r\n\r\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\r\n\r\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\r\n\r\n        const ki = this.keys();\r\n        const vi = this.values();\r\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\r\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\r\n\r\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\r\n            !((kr = ki.next()).done || (vr = vi.next()).done);\r\n            ++i\r\n        ) {\r\n            k = kr.value;\r\n            v = vr.value;\r\n            itov[i] = v;\r\n            ktoi.has(k) || ktoi.set(k, i);\r\n            yield [k, v];\r\n        }\r\n    }\r\n\r\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\r\n\r\n        const ki = this.keys();\r\n        const vi = this.values();\r\n        const callback = thisArg === undefined ? callbackfn :\r\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\r\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\r\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\r\n\r\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\r\n            !((kr = ki.next()).done || (vr = vi.next()).done);\r\n            ++i\r\n        ) {\r\n            k = kr.value;\r\n            v = vr.value;\r\n            itov[i] = v;\r\n            ktoi.has(k) || ktoi.set(k, i);\r\n            callback(v, k, this);\r\n        }\r\n    }\r\n\r\n    public toArray() { return [...this.values()]; }\r\n    public toJSON() {\r\n        const obj = {} as any;\r\n        this.forEach((val, key) => obj[key] = val);\r\n        return obj;\r\n    }\r\n\r\n    public inspect() { return this.toString(); }\r\n    public [kCustomInspect]() { return this.toString(); }\r\n    public toString() {\r\n        const str: string[] = [];\r\n        this.forEach((val, key) => {\r\n            key = valueToString(key);\r\n            val = valueToString(val);\r\n            str.push(`${key}: ${val}`);\r\n        });\r\n        return `{ ${str.join(', ')} }`;\r\n    }\r\n\r\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\r\n        Object.defineProperties(proto, {\r\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\r\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\r\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\r\n        });\r\n        return (proto as any)[Symbol.toStringTag] = 'Row';\r\n    })(Row.prototype);\r\n}\r\n\r\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\r\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\r\n        super(slice, slice.length);\r\n        return createRowProxy(this);\r\n    }\r\n    public keys() {\r\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\r\n    }\r\n    public values() {\r\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\r\n    }\r\n    public getKey(idx: number): K['TValue'] {\r\n        return this[kParent].getChildAt(0)!.get(idx);\r\n    }\r\n    public getIndex(key: K['TValue']): number {\r\n        return this[kParent].getChildAt(0)!.indexOf(key);\r\n    }\r\n    public getValue(index: number): V['TValue'] | null {\r\n        return this[kParent].getChildAt(1)!.get(index);\r\n    }\r\n    public setValue(index: number, value: V['TValue'] | null): void {\r\n        this[kParent].getChildAt(1)!.set(index, value);\r\n    }\r\n}\r\n\r\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\r\n    constructor(parent: StructVector<T>) {\r\n        super(parent, parent.type.children.length);\r\n        return defineRowProxyProperties(this);\r\n    }\r\n    public *keys() {\r\n        for (const field of this[kParent].type.children) {\r\n            yield field.name as keyof T;\r\n        }\r\n    }\r\n    public *values() {\r\n        for (const field of this[kParent].type.children) {\r\n            yield (this as RowLike<T>)[field.name];\r\n        }\r\n    }\r\n    public getKey(idx: number): keyof T {\r\n        return this[kParent].type.children[idx].name as keyof T;\r\n    }\r\n    public getIndex(key: keyof T): number {\r\n        return this[kParent].type.children.findIndex((f) => f.name === key);\r\n    }\r\n    public getValue(index: number): T[keyof T]['TValue'] | null {\r\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\r\n    }\r\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\r\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\r\n    }\r\n}\r\n\r\nObject.setPrototypeOf(Row.prototype, Map.prototype);\r\n\r\n/** @ignore */\r\nconst defineRowProxyProperties = (() => {\r\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\r\n    return <T extends Row>(row: T) => {\r\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\r\n        const getter = (key: any) => function(this: T) { return this.get(key); };\r\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\r\n        for (const key of row.keys()) {\r\n            ktoi.set(key, ++idx);\r\n            desc.get = getter(key);\r\n            desc.set = setter(key);\r\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\r\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\r\n        }\r\n        desc.get = desc.set = null;\r\n        return row;\r\n    };\r\n})();\r\n\r\n/** @ignore */\r\nconst createRowProxy = (() => {\r\n    if (typeof Proxy === 'undefined') {\r\n        return defineRowProxyProperties;\r\n    }\r\n    const has = Row.prototype.has;\r\n    const get = Row.prototype.get;\r\n    const set = Row.prototype.set;\r\n    const getKey = Row.prototype.getKey;\r\n    const RowProxyHandler: ProxyHandler<Row> = {\r\n        isExtensible() { return false; },\r\n        deleteProperty() { return false; },\r\n        preventExtensions() { return true; },\r\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\r\n        has(row: Row, key: PropertyKey) {\r\n            switch (key) {\r\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\r\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\r\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\r\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\r\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\r\n                    return true;\r\n            }\r\n            if (typeof key === 'number' && !row.has(key)) {\r\n                key = row.getKey(key);\r\n            }\r\n            return row.has(key);\r\n        },\r\n        get(row: Row, key: PropertyKey, receiver: any) {\r\n            switch (key) {\r\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\r\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\r\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\r\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\r\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\r\n                    return Reflect.get(row, key, receiver);\r\n            }\r\n            if (typeof key === 'number' && !has.call(receiver, key)) {\r\n                key = getKey.call(receiver, key);\r\n            }\r\n            return get.call(receiver, key);\r\n        },\r\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\r\n            switch (key) {\r\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\r\n                    return Reflect.set(row, key, val, receiver);\r\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\r\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\r\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\r\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\r\n                case Symbol.iterator: case Symbol.toStringTag:\r\n                    return false;\r\n            }\r\n            if (typeof key === 'number' && !has.call(receiver, key)) {\r\n                key = getKey.call(receiver, key);\r\n            }\r\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\r\n        },\r\n    };\r\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\r\n})();\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector';\r\nimport { MapRow, StructRow } from '../vector/row';\r\nimport { compareArrayLike } from '../util/buffer';\r\nimport { BigInt, BigIntAvailable } from './compat';\r\n\r\n/** @ignore */\r\ntype RangeLike = { length: number; stride?: number };\r\n/** @ignore */\r\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\r\n/** @ignore */\r\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\r\n\r\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\r\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\r\n/** @ignore */\r\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\r\n    const length = source.length;\r\n    const adjust = index > -1 ? index : (length + (index % length));\r\n    return then ? then(source, adjust) : adjust;\r\n}\r\n\r\n/** @ignore */\r\nlet tmp: number;\r\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\r\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\r\n/** @ignore */\r\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\r\n\r\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\r\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\r\n    // slice(-1, 5) or slice(5, -1)\r\n    let { length: len = 0 } = source;\r\n    let lhs = typeof begin !== 'number' ? 0 : begin;\r\n    let rhs = typeof end !== 'number' ? len : end;\r\n    // wrap around on negative start/end positions\r\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\r\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\r\n    // ensure lhs <= rhs\r\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\r\n     // ensure rhs <= length\r\n    (rhs > len) && (rhs = len);\r\n\r\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\r\n}\r\n\r\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\r\nconst isNaNFast = (value: any) => value !== value;\r\n\r\n/** @ignore */\r\nexport function createElementComparator(search: any) {\r\n    let typeofSearch = typeof search;\r\n    // Compare primitives\r\n    if (typeofSearch !== 'object' || search === null) {\r\n        // Compare NaN\r\n        if (isNaNFast(search)) {\r\n            return isNaNFast;\r\n        }\r\n        return typeofSearch !== 'bigint'\r\n            ? (value: any) => value === search\r\n            : (value: any) => (big0 + value) === search;\r\n    }\r\n    // Compare Dates\r\n    if (search instanceof Date) {\r\n        const valueOfSearch = search.valueOf();\r\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\r\n    }\r\n    // Compare TypedArrays\r\n    if (ArrayBuffer.isView(search)) {\r\n        return (value: any) => value ? compareArrayLike(search, value) : false;\r\n    }\r\n    // Compare Maps and Rows\r\n    if (search instanceof Map) { return creatMapComparator(search); }\r\n    // Compare Array-likes\r\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\r\n    // Compare Vectors\r\n    if (search instanceof Vector) { return createVectorComparator(search); }\r\n    // Compare non-empty Objects\r\n    return createObjectComparator(search);\r\n}\r\n\r\n/** @ignore */\r\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\r\n    const comparators = [] as ((x: any) => boolean)[];\r\n    for (let i = -1, n = lhs.length; ++i < n;) {\r\n        comparators[i] = createElementComparator(lhs[i]);\r\n    }\r\n    return createSubElementsComparator(comparators);\r\n}\r\n\r\n/** @ignore */\r\nfunction creatMapComparator(lhs: Map<any, any>) {\r\n    let i = -1;\r\n    const comparators = [] as ((x: any) => boolean)[];\r\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\r\n    return createSubElementsComparator(comparators);\r\n}\r\n\r\n/** @ignore */\r\nfunction createVectorComparator(lhs: Vector<any>) {\r\n    const comparators = [] as ((x: any) => boolean)[];\r\n    for (let i = -1, n = lhs.length; ++i < n;) {\r\n        comparators[i] = createElementComparator(lhs.get(i));\r\n    }\r\n    return createSubElementsComparator(comparators);\r\n}\r\n\r\n/** @ignore */\r\nfunction createObjectComparator(lhs: any) {\r\n    const keys = Object.keys(lhs);\r\n    // Only compare non-empty Objects\r\n    if (keys.length === 0) { return () => false; }\r\n    const comparators = [] as ((x: any) => boolean)[];\r\n    for (let i = -1, n = keys.length; ++i < n;) {\r\n        comparators[i] = createElementComparator(lhs[keys[i]]);\r\n    }\r\n    return createSubElementsComparator(comparators, keys);\r\n}\r\n\r\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\r\n    return (rhs: any) => {\r\n        if (!rhs || typeof rhs !== 'object') {\r\n            return false;\r\n        }\r\n        switch (rhs.constructor) {\r\n            case Array: return compareArray(comparators, rhs);\r\n            case Map:\r\n            case MapRow:\r\n            case StructRow:\r\n                return compareObject(comparators, rhs, rhs.keys());\r\n            case Object:\r\n            case undefined: // support `Object.create(null)` objects\r\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\r\n        }\r\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\r\n    };\r\n}\r\n\r\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\r\n    const n = comparators.length;\r\n    if (arr.length !== n) { return false; }\r\n    for (let i = -1; ++i < n;) {\r\n        if (!(comparators[i](arr[i]))) { return false; }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\r\n    const n = comparators.length;\r\n    if (vec.length !== n) { return false; }\r\n    for (let i = -1; ++i < n;) {\r\n        if (!(comparators[i](vec.get(i)))) { return false; }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\r\n\r\n    const lKeyItr = keys[Symbol.iterator]();\r\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\r\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\r\n\r\n    let i = 0;\r\n    let n = comparators.length;\r\n    let rVal = rValItr.next();\r\n    let lKey = lKeyItr.next();\r\n    let rKey = rKeyItr.next();\r\n\r\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\r\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\r\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\r\n            break;\r\n        }\r\n    }\r\n    if (i === n && lKey.done && rKey.done && rVal.done) {\r\n        return true;\r\n    }\r\n    lKeyItr.return && lKeyItr.return();\r\n    rKeyItr.return && rKeyItr.return();\r\n    rValItr.return && rValItr.return();\r\n    return false;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Field } from '../schema';\r\nimport { clampRange } from '../util/vector';\r\nimport { DataType, Dictionary } from '../type';\r\nimport { selectChunkArgs } from '../util/args';\r\nimport { DictionaryVector } from './dictionary';\r\nimport { AbstractVector, Vector } from '../vector';\r\nimport { Clonable, Sliceable, Applicative } from '../vector';\r\n\r\n/** @ignore */\r\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\r\n/** @ignore */\r\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\r\n\r\n/** @ignore */\r\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\r\n\r\n/** @ignore */\r\nexport class Chunked<T extends DataType = any>\r\n    extends AbstractVector<T>\r\n    implements Clonable<Chunked<T>>,\r\n               Sliceable<Chunked<T>>,\r\n               Applicative<T, Chunked<T>> {\r\n\r\n    /** @nocollapse */\r\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\r\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\r\n        const chunks = Chunked.flatten<T>(...vectors);\r\n        return new Chunked<T>(chunks[0].type, chunks);\r\n    }\r\n\r\n    protected _type: T;\r\n    protected _length: number;\r\n    protected _chunks: Vector<T>[];\r\n    protected _numChildren: number;\r\n    protected _children?: Chunked[];\r\n    protected _nullCount: number = -1;\r\n    protected _chunkOffsets: Uint32Array;\r\n\r\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\r\n        super();\r\n        this._type = type;\r\n        this._chunks = chunks;\r\n        this._chunkOffsets = offsets;\r\n        this._length = offsets[offsets.length - 1];\r\n        this._numChildren = (this._type.children || []).length;\r\n    }\r\n\r\n    public get type() { return this._type; }\r\n    public get length() { return this._length; }\r\n    public get chunks() { return this._chunks; }\r\n    public get typeId(): T['TType'] { return this._type.typeId; }\r\n    public get VectorName() { return `Chunked<${this._type}>`; }\r\n    public get data(): Data<T> {\r\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\r\n    }\r\n\r\n    public get ArrayType() { return this._type.ArrayType; }\r\n    public get numChildren() { return this._numChildren; }\r\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\r\n    public get byteLength(): number {\r\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\r\n    }\r\n    public get nullCount() {\r\n        let nullCount = this._nullCount;\r\n        if (nullCount < 0) {\r\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\r\n        }\r\n        return nullCount;\r\n    }\r\n\r\n    protected _indices?: ChunkedKeys<T>;\r\n    public get indices(): ChunkedKeys<T> | null {\r\n        if (DataType.isDictionary(this._type)) {\r\n            if (!this._indices) {\r\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\r\n                this._indices = (chunks.length === 1\r\n                    ? chunks[0].indices\r\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\r\n            }\r\n            return this._indices;\r\n        }\r\n        return null;\r\n    }\r\n    public get dictionary(): ChunkedDict<T> | null {\r\n        if (DataType.isDictionary(this._type)) {\r\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\r\n        for (const chunk of this._chunks) {\r\n            yield* chunk;\r\n        }\r\n    }\r\n\r\n    public clone(chunks = this._chunks): Chunked<T> {\r\n        return new Chunked(this._type, chunks);\r\n    }\r\n\r\n    public concat(...others: Vector<T>[]): Chunked<T> {\r\n        return this.clone(Chunked.flatten(this, ...others));\r\n    }\r\n\r\n    public slice(begin?: number, end?: number): Chunked<T> {\r\n        return clampRange(this, begin, end, this._sliceInternal);\r\n    }\r\n\r\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\r\n\r\n        if (index < 0 || index >= this._numChildren) { return null; }\r\n\r\n        let columns = this._children || (this._children = []);\r\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\r\n\r\n        if (child = columns[index]) { return child; }\r\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\r\n            chunks = this._chunks\r\n                .map((vector) => vector.getChildAt<R>(index))\r\n                .filter((vec): vec is Vector<R> => vec != null);\r\n            if (chunks.length > 0) {\r\n                return (columns[index] = new Chunked<R>(field.type, chunks));\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public search(index: number): [number, number] | null;\r\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\r\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\r\n        let idx = index;\r\n        // binary search to find the child vector and value indices\r\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\r\n        // return early if out of bounds, or if there's just one child\r\n        if (idx < 0            ) { return null; }\r\n        if (idx >= offsets[rhs]) { return null; }\r\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\r\n        let lhs = 0, pos = 0, mid = 0;\r\n        do {\r\n            if (lhs + 1 === rhs) {\r\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\r\n            }\r\n            mid = lhs + ((rhs - lhs) / 2) | 0;\r\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\r\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\r\n        return null;\r\n    }\r\n\r\n    public isValid(index: number): boolean {\r\n        return !!this.search(index, this.isValidInternal);\r\n    }\r\n\r\n    public get(index: number): T['TValue'] | null {\r\n        return this.search(index, this.getInternal);\r\n    }\r\n\r\n    public set(index: number, value: T['TValue'] | null): void {\r\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\r\n    }\r\n\r\n    public indexOf(element: T['TValue'], offset?: number): number {\r\n        if (offset && typeof offset === 'number') {\r\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\r\n        }\r\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\r\n    }\r\n\r\n    public toArray(): T['TArray'] {\r\n        const { chunks } = this;\r\n        const n = chunks.length;\r\n        let ArrayType: any = this._type.ArrayType;\r\n        if (n <= 0) { return new ArrayType(0); }\r\n        if (n <= 1) { return chunks[0].toArray(); }\r\n        let len = 0, src = new Array(n);\r\n        for (let i = -1; ++i < n;) {\r\n            len += (src[i] = chunks[i].toArray()).length;\r\n        }\r\n        if (ArrayType !== src[0].constructor) {\r\n            ArrayType = src[0].constructor;\r\n        }\r\n        let dst = new ArrayType(len);\r\n        let set: any = ArrayType === Array ? arraySet : typedSet;\r\n        for (let i = -1, idx = 0; ++i < n;) {\r\n            idx = set(src[i], dst, idx);\r\n        }\r\n        return dst;\r\n    }\r\n\r\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\r\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\r\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\r\n        let i = chunkIndex - 1, n = _chunks.length;\r\n        let start = fromIndex, offset = 0, found = -1;\r\n        while (++i < n) {\r\n            if (~(found = _chunks[i].indexOf(element, start))) {\r\n                return offset + found;\r\n            }\r\n            start = 0;\r\n            offset += _chunks[i].length;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\r\n        const slices: Vector<T>[] = [];\r\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\r\n        for (let i = -1, n = chunks.length; ++i < n;) {\r\n            const chunk = chunks[i];\r\n            const chunkLength = chunk.length;\r\n            const chunkOffset = chunkOffsets[i];\r\n            // If the child is to the right of the slice boundary, we can stop\r\n            if (chunkOffset >= end) { break; }\r\n            // If the child is to the left of of the slice boundary, exclude\r\n            if (begin >= chunkOffset + chunkLength) { continue; }\r\n            // If the child is between both left and right boundaries, include w/o slicing\r\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\r\n                slices.push(chunk);\r\n                continue;\r\n            }\r\n            // If the child overlaps one of the slice boundaries, include that slice\r\n            const from = Math.max(0, begin - chunkOffset);\r\n            const to = Math.min(end - chunkOffset, chunkLength);\r\n            slices.push(chunk.slice(from, to) as Vector<T>);\r\n        }\r\n        return self.clone(slices);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\r\n    let offsets = new Uint32Array((vectors || []).length + 1);\r\n    let offset = offsets[0] = 0, length = offsets.length;\r\n    for (let index = 0; ++index < length;) {\r\n        offsets[index] = (offset += vectors[index - 1].length);\r\n    }\r\n    return offsets;\r\n}\r\n\r\n/** @ignore */\r\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\r\n    dst.set(src, offset);\r\n    return (offset + src.length);\r\n};\r\n\r\n/** @ignore */\r\nconst arraySet = (src: any[], dst: any[], offset: number) => {\r\n    let idx = offset;\r\n    for (let i = -1, n = src.length; ++i < n;) {\r\n        dst[idx++] = src[i];\r\n    }\r\n    return idx;\r\n};\r\n\r\n/** @ignore */\r\ninterface TypedArray extends ArrayBufferView {\r\n    readonly length: number;\r\n    readonly [n: number]: number;\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from './data';\r\nimport { Field } from './schema';\r\nimport { DataType } from './type';\r\nimport { Vector } from './vector';\r\nimport { Clonable, Sliceable, Applicative } from './vector';\r\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\r\nimport { Chunked, SearchContinuation } from './vector/chunked';\r\n\r\nexport interface Column<T extends DataType = any> {\r\n    concat(...others: Vector<T>[]): Column<T>;\r\n    slice(begin?: number, end?: number): Column<T>;\r\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\r\n}\r\n\r\nexport class Column<T extends DataType = any>\r\n    extends Chunked<T>\r\n    implements Clonable<Column<T>>,\r\n               Sliceable<Column<T>>,\r\n               Applicative<T, Column<T>> {\r\n\r\n    public static new<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\r\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\r\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\r\n    /** @nocollapse */\r\n    public static new<T extends DataType = any>(...args: any[]) {\r\n\r\n        let [field, data, ...rest] = args as [\r\n            string | Field<T>,\r\n            Data<T> | Vector<T> | (Data<T> | Vector<T>)[],\r\n            ...any[]\r\n        ];\r\n\r\n        if (typeof field !== 'string' && !(field instanceof Field)) {\r\n            data = <Data<T> | Vector<T> | (Data<T> | Vector<T>)[]> field;\r\n            field = '';\r\n        }\r\n\r\n        const chunks = Chunked.flatten<T>(\r\n            Array.isArray(data) ? [...data, ...rest] :\r\n            data instanceof Vector ? [data, ...rest] :\r\n            [Vector.new(data, ...rest)]\r\n        );\r\n\r\n        if (typeof field === 'string') {\r\n            const type = chunks[0].data.type;\r\n            field = new Field(field, type, true);\r\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\r\n            field = field.clone({ nullable: true });\r\n        }\r\n        return new Column(field, chunks);\r\n    }\r\n\r\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\r\n        vectors = Chunked.flatten<T>(...vectors);\r\n        super(field.type, vectors, offsets);\r\n        this._field = field;\r\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\r\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\r\n        }\r\n    }\r\n\r\n    protected _field: Field<T>;\r\n    protected _children?: Column[];\r\n\r\n    public get field() { return this._field; }\r\n    public get name() { return this._field.name; }\r\n    public get nullable() { return this._field.nullable; }\r\n    public get metadata() { return this._field.metadata; }\r\n\r\n    public clone(chunks = this._chunks) {\r\n        return new Column(this._field, chunks);\r\n    }\r\n\r\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\r\n\r\n        if (index < 0 || index >= this.numChildren) { return null; }\r\n\r\n        let columns = this._children || (this._children = []);\r\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\r\n\r\n        if (column = columns[index]) { return column; }\r\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\r\n            chunks = this._chunks\r\n                .map((vector) => vector.getChildAt<R>(index))\r\n                .filter((vec): vec is Vector<R> => vec != null);\r\n            if (chunks.length > 0) {\r\n                return (columns[index] = new Column<R>(field, chunks));\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\r\n    protected _chunk: Vector<T>;\r\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\r\n        super(field, [vector], offsets);\r\n        this._chunk = vector;\r\n    }\r\n    public search(index: number): [number, number] | null;\r\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\r\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\r\n        return then ? then(this, 0, index) : [0, index];\r\n    }\r\n    public isValid(index: number): boolean {\r\n        return this._chunk.isValid(index);\r\n    }\r\n    public get(index: number): T['TValue'] | null {\r\n        return this._chunk.get(index);\r\n    }\r\n    public set(index: number, value: T['TValue'] | null): void {\r\n        this._chunk.set(index, value);\r\n    }\r\n    public indexOf(element: T['TValue'], offset?: number): number {\r\n        return this._chunk.indexOf(element, offset);\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Field } from '../schema';\r\nimport { Column } from '../column';\r\nimport { Vector } from '../vector';\r\nimport { DataType } from '../type';\r\nimport { Chunked } from '../vector/chunked';\r\n\r\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\r\n\r\nconst isArray = Array.isArray;\r\n\r\n/** @ignore */\r\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\r\n/** @ignore */\r\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\r\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\r\n    return values.map((x, i) =>\r\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\r\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\r\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\r\n};\r\n\r\n/** @ignore */\r\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\r\n/** @ignore */\r\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\r\n/** @ignore */\r\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\r\n/** @ignore */\r\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\r\n\r\n/** @ignore */\r\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\r\n    let value: any, j = idx;\r\n    let i = -1, n = vals.length;\r\n    while (++i < n) {\r\n        if (isArray(value = vals[i])) {\r\n            j = _selectArgs(Ctor, value, res, j).length;\r\n        } else if (value instanceof Ctor) { res[j++] = value; }\r\n    }\r\n    return res;\r\n}\r\n\r\n/** @ignore */\r\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\r\n    let value: any, j = idx;\r\n    let i = -1, n = vals.length;\r\n    while (++i < n) {\r\n        if (isArray(value = vals[i])) {\r\n            j = _selectChunkArgs(Ctor, value, res, j).length;\r\n        } else if (value instanceof Chunked) {\r\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\r\n        } else if (value instanceof Ctor) { res[j++] = value; }\r\n    }\r\n    return res;\r\n}\r\n\r\n/** @ignore */\r\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\r\n    let value: any, j = idx;\r\n    let i = -1, n = vals.length;\r\n    while (++i < n) {\r\n        if (isArray(value = vals[i])) {\r\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\r\n        } else if (value instanceof Ctor) {\r\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\r\n        } else if (value instanceof Vector) { res[j++] = value as T; }\r\n    }\r\n    return res;\r\n}\r\n\r\n/** @ignore */\r\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\r\n    let value: any, j = idx;\r\n    let i = -1, n = vals.length;\r\n    while (++i < n) {\r\n        if (isArray(value = vals[i])) {\r\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\r\n        } else if (value instanceof Ctor) {\r\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\r\n        } else if (value instanceof Column) { res[j++] = value as T; }\r\n    }\r\n    return res;\r\n}\r\n\r\n/** @ignore */\r\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\r\n\r\n/** @ignore */\r\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\r\n    let keys: any[], n: number;\r\n    switch (n = vals.length) {\r\n        case 0: return ret;\r\n        case 1:\r\n            keys = ret[0];\r\n            if (!(vals[0])) { return ret; }\r\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\r\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\r\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\r\n            }\r\n            break;\r\n        default:\r\n            !isArray(keys = vals[n - 1])\r\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\r\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\r\n    }\r\n\r\n    let fieldIndex = -1;\r\n    let valueIndex = -1;\r\n    let idx = -1, len = vals.length;\r\n    let field: number | string | Field<T[keyof T]>;\r\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\r\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\r\n\r\n    while (++idx < len) {\r\n        val = vals[idx];\r\n        if (val instanceof Column && (values[++valueIndex] = val)) {\r\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\r\n        } else {\r\n            ({ [idx]: field = idx } = keys);\r\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\r\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\r\n            } else if (val && val.type && (values[++valueIndex] = val)) {\r\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\r\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from './data';\r\nimport { Vector } from './vector';\r\nimport { DataType } from './type';\r\nimport { selectArgs } from './util/args';\r\nimport { selectFieldArgs } from './util/args';\r\nimport { instance as comparer } from './visitor/typecomparator';\r\n\r\ntype VectorMap = { [key: string]: Vector };\r\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\r\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\r\n\r\nexport class Schema<T extends { [key: string]: DataType } = any> {\r\n\r\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\r\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\r\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\r\n    /** @nocollapse */\r\n    public static from(...args: any[]) {\r\n        return Schema.new(args[0], args[1]);\r\n    }\r\n\r\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\r\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\r\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\r\n    /** @nocollapse */\r\n    public static new(...args: any[]) {\r\n        return new Schema(selectFieldArgs(args)[0]);\r\n    }\r\n\r\n    public readonly fields: Field<T[keyof T]>[];\r\n    public readonly metadata: Map<string, string>;\r\n    public readonly dictionaries: Map<number, DataType>;\r\n\r\n    constructor(fields: Field[] = [],\r\n                metadata?: Map<string, string> | null,\r\n                dictionaries?: Map<number, DataType> | null) {\r\n        this.fields = (fields || []) as Field<T[keyof T]>[];\r\n        this.metadata = metadata || new Map();\r\n        if (!dictionaries) {\r\n            dictionaries = generateDictionaryMap(fields);\r\n        }\r\n        this.dictionaries = dictionaries;\r\n    }\r\n    public get [Symbol.toStringTag]() { return 'Schema'; }\r\n    public toString() {\r\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\r\n    }\r\n\r\n    public compareTo(other?: Schema | null): other is Schema<T> {\r\n        return comparer.compareSchemas(this, other);\r\n    }\r\n\r\n    public select<K extends keyof T = any>(...columnNames: K[]) {\r\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\r\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\r\n    }\r\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\r\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\r\n    }\r\n\r\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\r\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\r\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\r\n\r\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\r\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\r\n\r\n        const curFields = [...this.fields] as Field[];\r\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\r\n        const newFields = other.fields.filter((f2) => {\r\n            const i = curFields.findIndex((f) => f.name === f2.name);\r\n            return ~i ? (curFields[i] = f2.clone({\r\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\r\n            })) && false : true;\r\n        }) as Field[];\r\n\r\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\r\n\r\n        return new Schema<T & R>(\r\n            [...curFields, ...newFields], metadata,\r\n            new Map([...this.dictionaries, ...newDictionaries])\r\n        );\r\n    }\r\n}\r\n\r\nexport class Field<T extends DataType = any> {\r\n\r\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\r\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\r\n    /** @nocollapse */\r\n    public static new<T extends DataType = any>(...args: any[]) {\r\n        let [name, type, nullable, metadata] = args;\r\n        if (args[0] && typeof args[0] === 'object') {\r\n            ({ name } = args[0]);\r\n            (type === undefined) && (type = args[0].type);\r\n            (nullable === undefined) && (nullable = args[0].nullable);\r\n            (metadata === undefined) && (metadata = args[0].metadata);\r\n        }\r\n        return new Field<T>(`${name}`, type, nullable, metadata);\r\n    }\r\n\r\n    public readonly type: T;\r\n    public readonly name: string;\r\n    public readonly nullable: boolean;\r\n    public readonly metadata: Map<string, string>;\r\n\r\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.nullable = nullable;\r\n        this.metadata = metadata || new Map();\r\n    }\r\n\r\n    public get typeId() { return this.type.typeId; }\r\n    public get [Symbol.toStringTag]() { return 'Field'; }\r\n    public toString() { return `${this.name}: ${this.type}`; }\r\n    public compareTo(other?: Field | null): other is Field<T> {\r\n        return comparer.compareField(this, other);\r\n    }\r\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\r\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\r\n    public clone<R extends DataType = T>(...args: any[]) {\r\n        let [name, type, nullable, metadata] = args;\r\n        (!args[0] || typeof args[0] !== 'object')\r\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\r\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\r\n        return Field.new<R>(name, type, nullable, metadata);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\r\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\r\n}\r\n\r\n/** @ignore */\r\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\r\n\r\n    for (let i = -1, n = fields.length; ++i < n;) {\r\n        const field = fields[i];\r\n        const type = field.type;\r\n        if (DataType.isDictionary(type)) {\r\n            if (!dictionaries.has(type.id)) {\r\n                dictionaries.set(type.id, type.dictionary);\r\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\r\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\r\n            }\r\n        }\r\n        if (type.children && type.children.length > 0) {\r\n            generateDictionaryMap(type.children, dictionaries);\r\n        }\r\n    }\r\n\r\n    return dictionaries;\r\n}\r\n\r\n// Add these here so they're picked up by the externs creator\r\n// in the build, and closure-compiler doesn't minify them away\r\n(Schema.prototype as any).fields = null;\r\n(Schema.prototype as any).metadata = null;\r\n(Schema.prototype as any).dictionaries = null;\r\n\r\n(Field.prototype as any).type = null;\r\n(Field.prototype as any).name = null;\r\n(Field.prototype as any).nullable = null;\r\n(Field.prototype as any).metadata = null;\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Run } from './run';\r\nimport { Field } from '../schema';\r\nimport { DataType, List } from '../type';\r\nimport { OffsetsBufferBuilder } from './buffer';\r\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\r\n\r\n/** @ignore */\r\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\r\n    protected _run = new Run<T, TNull>();\r\n    protected _offsets: OffsetsBufferBuilder;\r\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\r\n        super(opts);\r\n        this._offsets = new OffsetsBufferBuilder();\r\n    }\r\n    public addChild(child: Builder<T>, name = '0') {\r\n        if (this.numChildren > 0) {\r\n            throw new Error('ListBuilder can only have one child.');\r\n        }\r\n        this.children[this.numChildren] = child;\r\n        this.type = new List(new Field(name, child.type, true));\r\n        return this.numChildren - 1;\r\n    }\r\n    public clear() {\r\n        this._run.clear();\r\n        return super.clear();\r\n    }\r\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\r\n        const run = this._run;\r\n        const offsets = this._offsets;\r\n        const setValue = this._setValue;\r\n        let index = 0, value: Uint8Array | undefined;\r\n        for ([index, value] of pending) {\r\n            if (value === undefined) {\r\n                offsets.set(index, 0);\r\n            } else {\r\n                offsets.set(index, value.length);\r\n                setValue(this, index, run.bind(value));\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Run } from './run';\r\nimport { Field } from '../schema';\r\nimport { Builder } from '../builder';\r\nimport { DataType, FixedSizeList } from '../type';\r\n\r\n/** @ignore */\r\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\r\n    protected _run = new Run<T, TNull>();\r\n    public setValue(index: number, value: T['TValue']) {\r\n        super.setValue(index, this._run.bind(value));\r\n    }\r\n    public addChild(child: Builder<T>, name = '0') {\r\n        if (this.numChildren > 0) {\r\n            throw new Error('FixedSizeListBuilder can only have one child.');\r\n        }\r\n        const childIndex = this.children.push(child);\r\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\r\n        return childIndex;\r\n    }\r\n    public clear() {\r\n        this._run.clear();\r\n        return super.clear();\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Field } from '../schema';\r\nimport { DataType, Map_, Struct } from '../type';\r\nimport { Builder, VariableWidthBuilder } from '../builder';\r\n\r\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\r\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\r\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\r\n\r\n/** @ignore */\r\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\r\n\r\n    protected _pending: MapValues<K, V> | undefined;\r\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\r\n        return super.set(index, value as MapValue<K, V> | TNull);\r\n    }\r\n\r\n    public setValue(index: number, value: MapValueExt<K, V>) {\r\n        value = value instanceof Map ? value : new Map(Object.entries(value));\r\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\r\n        const current = pending.get(index);\r\n        current && (this._pendingLength -= current.size);\r\n        this._pendingLength += value.size;\r\n        pending.set(index, value);\r\n    }\r\n\r\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\r\n        if (this.numChildren > 0) {\r\n            throw new Error('ListBuilder can only have one child.');\r\n        }\r\n        this.children[this.numChildren] = child;\r\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\r\n        return this.numChildren - 1;\r\n    }\r\n\r\n    protected _flushPending(pending: MapValues<K, V>) {\r\n        const offsets = this._offsets;\r\n        const setValue = this._setValue;\r\n        pending.forEach((value, index) => {\r\n            if (value === undefined) {\r\n                offsets.set(index, 0);\r\n            } else {\r\n                offsets.set(index, value.size);\r\n                setValue(this, index, value);\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Field } from '../schema';\r\nimport { Builder } from '../builder';\r\nimport { DataType, Struct } from '../type';\r\n\r\n/** @ignore */\r\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\r\n    public addChild(child: Builder, name = `${this.numChildren}`) {\r\n        const childIndex = this.children.push(child);\r\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\r\n        return childIndex;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Field } from '../schema';\r\nimport { DataBufferBuilder } from './buffer';\r\nimport { Builder, BuilderOptions } from '../builder';\r\nimport { Union, SparseUnion, DenseUnion } from '../type';\r\n\r\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\r\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\r\n}\r\n\r\n/** @ignore */\r\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\r\n\r\n    protected _typeIds: DataBufferBuilder<Int8Array>;\r\n\r\n    constructor(options: UnionBuilderOptions<T, TNull>) {\r\n        super(options);\r\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\r\n        if (typeof options['valueToChildTypeId'] === 'function') {\r\n            this._valueToChildTypeId = options['valueToChildTypeId'];\r\n        }\r\n    }\r\n\r\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\r\n\r\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\r\n        return this.set(this.length, value, childTypeId);\r\n    }\r\n\r\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\r\n        if (childTypeId === undefined) {\r\n            childTypeId = this._valueToChildTypeId(this, value, index);\r\n        }\r\n        if (this.setValid(index, this.isValid(value))) {\r\n            this.setValue(index, value, childTypeId);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // @ts-ignore\r\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\r\n        this._typeIds.set(index, childTypeId!);\r\n        super.setValue(index, value);\r\n    }\r\n\r\n    // @ts-ignore\r\n    public addChild(child: Builder, name = `${this.children.length}`) {\r\n        const childTypeId = this.children.push(child);\r\n        const { type: { children, mode, typeIds } } = this;\r\n        const fields = [...children, new Field(name, child.type)];\r\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\r\n        return childTypeId;\r\n    }\r\n\r\n    /** @ignore */\r\n    // @ts-ignore\r\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\r\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\r\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\r\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\r\n/** @ignore */\r\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\r\n\r\n    protected _offsets: DataBufferBuilder<Int32Array>;\r\n\r\n    constructor(options: UnionBuilderOptions<T, TNull>) {\r\n        super(options);\r\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\r\n    }\r\n\r\n    /** @ignore */\r\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\r\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\r\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\r\n        return super.setValue(index, value, childTypeId);\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Field } from '../schema';\r\nimport { Vector } from '../vector';\r\nimport { Visitor } from '../visitor';\r\nimport { encodeUtf8 } from '../util/utf8';\r\nimport { VectorType } from '../interfaces';\r\nimport { float64ToUint16 } from '../util/math';\r\nimport { toArrayBufferView } from '../util/buffer';\r\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\r\nimport {\r\n    DataType, Dictionary,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n    Float, Float16, Float32, Float64,\r\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\r\n    Date_, DateDay, DateMillisecond,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Union, DenseUnion, SparseUnion,\r\n} from '../type';\r\n\r\n/** @ignore */\r\nexport interface SetVisitor extends Visitor {\r\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\r\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\r\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\r\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\r\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\r\n}\r\n\r\n/** @ignore */\r\nexport class SetVisitor extends Visitor {}\r\n\r\n/** @ignore */\r\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\r\n/** @ignore */\r\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\r\n    data[index] = (epochMs % 4294967296) | 0;\r\n    data[index + 1] = (epochMs / 4294967296) | 0;\r\n};\r\n/** @ignore */\r\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\r\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\r\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\r\n};\r\n/** @ignore */\r\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\r\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\r\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\r\n};\r\n\r\n/** @ignore */\r\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\r\n    const { [index]: x, [index + 1]: y } = valueOffsets;\r\n    if (x != null && y != null) {\r\n        values.set(value.subarray(0, y - x), x);\r\n    }\r\n};\r\n\r\n/** @ignore */\r\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\r\n    const idx = offset + index;\r\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\r\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\r\n\r\n};\r\n\r\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\r\n/** @ignore */ type Numeric2X = Int64 | Uint64;\r\n\r\n/** @ignore */\r\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\r\n/** @ignore */\r\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\r\n/** @ignore */\r\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\r\n/** @ignore */\r\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\r\n/** @ignore */\r\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    switch (typeof value) {\r\n        case 'bigint': vector.values64[index] = value; break;\r\n        case 'number': vector.values[index * vector.stride] = value; break;\r\n        default:\r\n            const val = value as T['TArray'];\r\n            const { stride, ArrayType } = vector;\r\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\r\n            vector.values.set(long.subarray(0, stride), stride * index);\r\n    }\r\n};\r\n/** @ignore */\r\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\r\n\r\n/** @ignore */\r\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\r\n/** @ignore */\r\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\r\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\r\n};\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    vector.type.bitWidth < 64\r\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\r\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\r\n};\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    vector.type.precision !== Precision.HALF\r\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\r\n        : setFloat16(vector as VectorType<Float16>, index, value);\r\n};\r\n\r\n/* istanbul ignore next */\r\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    vector.type.unit === DateUnit.DAY\r\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\r\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\r\n};\r\n\r\n/** @ignore */\r\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\r\n/** @ignore */\r\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\r\n/** @ignore */\r\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\r\n/** @ignore */\r\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    switch (vector.type.unit) {\r\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\r\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\r\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\r\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\r\n    }\r\n};\r\n\r\n/** @ignore */\r\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\r\n/** @ignore */\r\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\r\n/** @ignore */\r\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\r\n/** @ignore */\r\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    switch (vector.type.unit) {\r\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\r\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\r\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\r\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\r\n    }\r\n};\r\n\r\n/** @ignore */\r\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\r\n\r\n/** @ignore */\r\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\r\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\r\n        values.set(itr++, value.get(++idx));\r\n    }\r\n};\r\n\r\n/** @ignore */\r\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\r\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\r\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\r\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\r\n        values.set(itr++, entries[++idx]);\r\n    }\r\n};\r\n\r\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\r\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\r\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\r\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\r\n/** @ignore */\r\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\r\n\r\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\r\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\r\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\r\n                                               _setStructObjectValue(index, value) ;\r\n\r\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\r\n};\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst setUnion = <\r\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\r\n>(vector: V, index: number, value: V['TValue']) => {\r\n    vector.type.mode === UnionMode.Dense ?\r\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\r\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\r\n};\r\n\r\n/** @ignore */\r\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\r\n    const child = vector.getChildAt(childIndex);\r\n    child && child.set(vector.valueOffsets[index], value);\r\n};\r\n\r\n/** @ignore */\r\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\r\n    const child = vector.getChildAt(childIndex);\r\n    child && child.set(index, value);\r\n};\r\n\r\n/** @ignore */\r\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    const key = vector.getKey(index);\r\n    if (key !== null) {\r\n        vector.setValue(key, value);\r\n    }\r\n};\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    (vector.type.unit === IntervalUnit.DAY_TIME)\r\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\r\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\r\n};\r\n\r\n/** @ignore */\r\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\r\n/** @ignore */\r\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\r\n\r\n/** @ignore */\r\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\r\n    const child = vector.getChildAt(0)!, { stride } = vector;\r\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\r\n        child.set(offset + idx, value.get(idx));\r\n    }\r\n};\r\n\r\nSetVisitor.prototype.visitBool                 =                 setBool;\r\nSetVisitor.prototype.visitInt                  =                  setInt;\r\nSetVisitor.prototype.visitInt8                 =              setNumeric;\r\nSetVisitor.prototype.visitInt16                =              setNumeric;\r\nSetVisitor.prototype.visitInt32                =              setNumeric;\r\nSetVisitor.prototype.visitInt64                =            setNumericX2;\r\nSetVisitor.prototype.visitUint8                =              setNumeric;\r\nSetVisitor.prototype.visitUint16               =              setNumeric;\r\nSetVisitor.prototype.visitUint32               =              setNumeric;\r\nSetVisitor.prototype.visitUint64               =            setNumericX2;\r\nSetVisitor.prototype.visitFloat                =                setFloat;\r\nSetVisitor.prototype.visitFloat16              =              setFloat16;\r\nSetVisitor.prototype.visitFloat32              =              setNumeric;\r\nSetVisitor.prototype.visitFloat64              =              setNumeric;\r\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\r\nSetVisitor.prototype.visitBinary               =               setBinary;\r\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\r\nSetVisitor.prototype.visitDate                 =                 setDate;\r\nSetVisitor.prototype.visitDateDay              =              setDateDay;\r\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\r\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\r\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\r\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\r\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\r\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\r\nSetVisitor.prototype.visitTime                 =                 setTime;\r\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\r\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\r\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\r\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\r\nSetVisitor.prototype.visitDecimal              =              setDecimal;\r\nSetVisitor.prototype.visitList                 =                 setList;\r\nSetVisitor.prototype.visitStruct               =               setStruct;\r\nSetVisitor.prototype.visitUnion                =                setUnion;\r\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\r\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\r\nSetVisitor.prototype.visitDictionary           =           setDictionary;\r\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\r\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\r\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\r\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\r\nSetVisitor.prototype.visitMap                  =                  setMap;\r\n\r\n/** @ignore */\r\nexport const instance = new SetVisitor();\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Type } from '../enum';\r\nimport { DataType } from '../type';\r\nimport { Visitor } from '../visitor';\r\nimport { VectorType, BuilderCtor } from '../interfaces';\r\nimport { BinaryBuilder } from '../builder/binary';\r\nimport { BoolBuilder } from '../builder/bool';\r\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\r\nimport { DecimalBuilder } from '../builder/decimal';\r\nimport { DictionaryBuilder } from '../builder/dictionary';\r\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\r\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\r\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\r\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\r\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\r\nimport { ListBuilder } from '../builder/list';\r\nimport { MapBuilder } from '../builder/map';\r\nimport { NullBuilder } from '../builder/null';\r\nimport { StructBuilder } from '../builder/struct';\r\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\r\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\r\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\r\nimport { Utf8Builder } from '../builder/utf8';\r\n\r\n/** @ignore */\r\nexport interface GetBuilderCtor extends Visitor {\r\n    visit<T extends Type>(type: T): BuilderCtor<T>;\r\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\r\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\r\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\r\n}\r\n\r\n/** @ignore */\r\nexport class GetBuilderCtor extends Visitor {\r\n    public visitNull                 () { return NullBuilder;                 }\r\n    public visitBool                 () { return BoolBuilder;                 }\r\n    public visitInt                  () { return IntBuilder;                  }\r\n    public visitInt8                 () { return Int8Builder;                 }\r\n    public visitInt16                () { return Int16Builder;                }\r\n    public visitInt32                () { return Int32Builder;                }\r\n    public visitInt64                () { return Int64Builder;                }\r\n    public visitUint8                () { return Uint8Builder;                }\r\n    public visitUint16               () { return Uint16Builder;               }\r\n    public visitUint32               () { return Uint32Builder;               }\r\n    public visitUint64               () { return Uint64Builder;               }\r\n    public visitFloat                () { return FloatBuilder;                }\r\n    public visitFloat16              () { return Float16Builder;              }\r\n    public visitFloat32              () { return Float32Builder;              }\r\n    public visitFloat64              () { return Float64Builder;              }\r\n    public visitUtf8                 () { return Utf8Builder;                 }\r\n    public visitBinary               () { return BinaryBuilder;               }\r\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\r\n    public visitDate                 () { return DateBuilder;                 }\r\n    public visitDateDay              () { return DateDayBuilder;              }\r\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\r\n    public visitTimestamp            () { return TimestampBuilder;            }\r\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\r\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\r\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\r\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\r\n    public visitTime                 () { return TimeBuilder;                 }\r\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\r\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\r\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\r\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\r\n    public visitDecimal              () { return DecimalBuilder;              }\r\n    public visitList                 () { return ListBuilder;                 }\r\n    public visitStruct               () { return StructBuilder;               }\r\n    public visitUnion                () { return UnionBuilder;                }\r\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\r\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\r\n    public visitDictionary           () { return DictionaryBuilder;           }\r\n    public visitInterval             () { return IntervalBuilder;             }\r\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\r\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\r\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\r\n    public visitMap                  () { return MapBuilder;                  }\r\n}\r\n\r\n/** @ignore */\r\nexport const instance = new GetBuilderCtor();\r\n","// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport { flatbuffers } from 'flatbuffers';\r\nimport * as NS7624605610262437867 from './Schema';\r\n/**\r\n * ----------------------------------------------------------------------\r\n * Arrow File metadata\r\n *\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Footer {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Footer\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Footer= obj\r\n         * @returns Footer\r\n         */\r\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\r\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\r\n         */\r\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\r\n        }\r\n\r\n        /**\r\n         * @param org.apache.arrow.flatbuf.Schema= obj\r\n         * @returns org.apache.arrow.flatbuf.Schema|null\r\n         */\r\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.Block= obj\r\n         * @returns org.apache.arrow.flatbuf.Block\r\n         */\r\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        dictionariesLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.Block= obj\r\n         * @returns org.apache.arrow.flatbuf.Block\r\n         */\r\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 10);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        recordBatchesLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 10);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startFooter(builder: flatbuffers.Builder) {\r\n            builder.startObject(4);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\r\n         */\r\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\r\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset schemaOffset\r\n         */\r\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(1, schemaOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset dictionariesOffset\r\n         */\r\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(2, dictionariesOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(24, numElems, 8);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset recordBatchesOffset\r\n         */\r\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(24, numElems, 8);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset offset\r\n         */\r\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n            builder.finish(offset);\r\n        }\r\n\r\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n            Footer.startFooter(builder);\r\n            Footer.addVersion(builder, version);\r\n            Footer.addSchema(builder, schemaOffset);\r\n            Footer.addDictionaries(builder, dictionariesOffset);\r\n            Footer.addRecordBatches(builder, recordBatchesOffset);\r\n            return Footer.endFooter(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Block {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Block\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Index to the start of the RecordBlock (note this is past the Message header)\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        offset(): flatbuffers.Long {\r\n            return this.bb!.readInt64(this.bb_pos);\r\n        }\r\n\r\n        /**\r\n         * Length of the metadata\r\n         *\r\n         * @returns number\r\n         */\r\n        metaDataLength(): number {\r\n            return this.bb!.readInt32(this.bb_pos + 8);\r\n        }\r\n\r\n        /**\r\n         * Length of the data (this is aligned so there can be a gap between this and\r\n         * the metatdata).\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        bodyLength(): flatbuffers.Long {\r\n            return this.bb!.readInt64(this.bb_pos + 16);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long offset\r\n         * @param number metaDataLength\r\n         * @param flatbuffers.Long bodyLength\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\r\n            builder.prep(8, 24);\r\n            builder.writeInt64(bodyLength);\r\n            builder.pad(4);\r\n            builder.writeInt32(metaDataLength);\r\n            builder.writeInt64(offset);\r\n            return builder.offset();\r\n        }\r\n\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\n/** @ignore */\r\nexport { Builder, BuilderOptions } from '../builder';\r\nexport { BoolBuilder } from './bool';\r\nexport { NullBuilder } from './null';\r\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\r\nexport { DecimalBuilder } from './decimal';\r\nexport { DictionaryBuilder } from './dictionary';\r\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\r\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\r\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\r\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\r\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\r\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\r\nexport { Utf8Builder } from './utf8';\r\nexport { BinaryBuilder } from './binary';\r\nexport { ListBuilder } from './list';\r\nexport { FixedSizeListBuilder } from './fixedsizelist';\r\nexport { MapBuilder } from './map';\r\nexport { StructBuilder } from './struct';\r\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\r\n\r\nimport { Type } from '../enum';\r\nimport { Field } from '../schema';\r\nimport { DataType } from '../type';\r\nimport { Utf8Builder } from './utf8';\r\nimport { BuilderType as B } from '../interfaces';\r\nimport { Builder, BuilderOptions } from '../builder';\r\nimport { instance as setVisitor } from '../visitor/set';\r\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\r\n\r\n/** @nocollapse */\r\nBuilder.new = newBuilder;\r\n\r\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\r\n\r\n    const type = options.type;\r\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\r\n\r\n    if (type.children && type.children.length > 0) {\r\n\r\n        const children = options['children'] || [] as BuilderOptions[];\r\n        const defaultOptions = { 'nullValues': options['nullValues'] };\r\n        const getChildOptions = Array.isArray(children)\r\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\r\n            : (({ name }: Field) => children[name] || defaultOptions);\r\n\r\n        type.children.forEach((field, index) => {\r\n            const { type } = field;\r\n            const opts = getChildOptions(field, index);\r\n            builder.children.push(newBuilder({ ...opts, type }));\r\n        });\r\n    }\r\n\r\n    return builder as B<T, TNull>;\r\n}\r\n\r\n(Object.keys(Type) as any[])\r\n    .map((T: any) => Type[T] as any)\r\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\r\n    .forEach((typeId) => {\r\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\r\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\r\n    });\r\n\r\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\n/* tslint:disable:class-name */\r\n\r\nimport * as File_ from '../../fb/File';\r\nimport { flatbuffers } from 'flatbuffers';\r\n\r\nimport Long = flatbuffers.Long;\r\nimport Builder = flatbuffers.Builder;\r\nimport ByteBuffer = flatbuffers.ByteBuffer;\r\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\r\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\r\n\r\nimport { Schema } from '../../schema';\r\nimport { MetadataVersion } from '../../enum';\r\nimport { toUint8Array } from '../../util/buffer';\r\nimport { ArrayBufferViewInput } from '../../util/buffer';\r\n\r\n/** @ignore */\r\nclass Footer_ {\r\n\r\n    /** @nocollapse */\r\n    public static decode(buf: ArrayBufferViewInput) {\r\n        buf = new ByteBuffer(toUint8Array(buf));\r\n        const footer = _Footer.getRootAsFooter(buf);\r\n        const schema = Schema.decode(footer.schema()!);\r\n        return new OffHeapFooter(schema, footer) as Footer_;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static encode(footer: Footer_) {\r\n\r\n        const b: Builder = new Builder();\r\n        const schemaOffset = Schema.encode(b, footer.schema);\r\n\r\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\r\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\r\n        const recordBatchesOffset = b.endVector();\r\n\r\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\r\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\r\n\r\n        const dictionaryBatchesOffset = b.endVector();\r\n\r\n        _Footer.startFooter(b);\r\n        _Footer.addSchema(b, schemaOffset);\r\n        _Footer.addVersion(b, MetadataVersion.V4);\r\n        _Footer.addRecordBatches(b, recordBatchesOffset);\r\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\r\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\r\n\r\n        return b.asUint8Array();\r\n    }\r\n\r\n    // @ts-ignore\r\n    protected _recordBatches: FileBlock[];\r\n    // @ts-ignore\r\n    protected _dictionaryBatches: FileBlock[];\r\n    public get numRecordBatches() { return this._recordBatches.length; }\r\n    public get numDictionaries() { return this._dictionaryBatches.length; }\r\n\r\n    constructor(public schema: Schema,\r\n                public version: MetadataVersion = MetadataVersion.V4,\r\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\r\n        recordBatches && (this._recordBatches = recordBatches);\r\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\r\n    }\r\n\r\n    public *recordBatches(): Iterable<FileBlock> {\r\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\r\n            if (block = this.getRecordBatch(i)) { yield block; }\r\n        }\r\n    }\r\n\r\n    public *dictionaryBatches(): Iterable<FileBlock> {\r\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\r\n            if (block = this.getDictionaryBatch(i)) { yield block; }\r\n        }\r\n    }\r\n\r\n    public getRecordBatch(index: number) {\r\n        return index >= 0\r\n            && index < this.numRecordBatches\r\n            && this._recordBatches[index] || null;\r\n    }\r\n\r\n    public getDictionaryBatch(index: number) {\r\n        return index >= 0\r\n            && index < this.numDictionaries\r\n            && this._dictionaryBatches[index] || null;\r\n    }\r\n}\r\n\r\nexport { Footer_ as Footer };\r\n\r\n/** @ignore */\r\nclass OffHeapFooter extends Footer_ {\r\n\r\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\r\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\r\n\r\n    constructor(schema: Schema, protected _footer: _Footer) {\r\n        super(schema, _footer.version());\r\n    }\r\n\r\n    public getRecordBatch(index: number) {\r\n        if (index >= 0 && index < this.numRecordBatches) {\r\n            const fileBlock = this._footer.recordBatches(index);\r\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getDictionaryBatch(index: number) {\r\n        if (index >= 0 && index < this.numDictionaries) {\r\n            const fileBlock = this._footer.dictionaries(index);\r\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class FileBlock {\r\n\r\n    /** @nocollapse */\r\n    public static decode(block: _Block) {\r\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static encode(b: Builder, fileBlock: FileBlock) {\r\n        const { metaDataLength } = fileBlock;\r\n        const offset = new Long(fileBlock.offset, 0);\r\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\r\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\r\n    }\r\n\r\n    public offset: number;\r\n    public bodyLength: number;\r\n    public metaDataLength: number;\r\n\r\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\r\n        this.metaDataLength = metaDataLength;\r\n        this.offset = typeof offset === 'number' ? offset : offset.low;\r\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport streamAdapters from './adapters';\r\nimport { decodeUtf8 } from '../util/utf8';\r\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\r\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\r\n\r\nimport {\r\n    isPromise, isFetchResponse,\r\n    isIterable, isAsyncIterable,\r\n    isReadableDOMStream, isReadableNodeStream\r\n} from '../util/compat';\r\n\r\n/** @ignore */\r\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\r\n/** @ignore */\r\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\r\n\r\n/** @ignore */\r\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\r\n    public write(value: ArrayBufferViewInput | Uint8Array) {\r\n        if ((value = toUint8Array(value)).byteLength > 0) {\r\n            return super.write(value as T);\r\n        }\r\n    }\r\n    public toString(sync: true): string;\r\n    public toString(sync?: false): Promise<string>;\r\n    public toString(sync = false) {\r\n        return sync\r\n            ? decodeUtf8(this.toUint8Array(true))\r\n            : this.toUint8Array(false).then(decodeUtf8);\r\n    }\r\n    public toUint8Array(sync: true): Uint8Array;\r\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\r\n    public toUint8Array(sync = false) {\r\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\r\n            let buffers = [], byteLength = 0;\r\n            for await (const chunk of this) {\r\n                buffers.push(chunk);\r\n                byteLength += chunk.byteLength;\r\n            }\r\n            return joinUint8Arrays(buffers, byteLength)[0];\r\n        })();\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class ByteStream implements IterableIterator<Uint8Array> {\r\n    // @ts-ignore\r\n    private source: ByteStreamSource<Uint8Array>;\r\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\r\n        if (source) {\r\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\r\n        }\r\n    }\r\n    [Symbol.iterator]() { return this; }\r\n    public next(value?: any) { return this.source.next(value); }\r\n    public throw(value?: any) { return this.source.throw(value); }\r\n    public return(value?: any) { return this.source.return(value); }\r\n    public peek(size?: number | null) { return this.source.peek(size); }\r\n    public read(size?: number | null) { return this.source.read(size); }\r\n}\r\n\r\n/** @ignore */\r\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\r\n    // @ts-ignore\r\n    private source: AsyncByteStreamSource<Uint8Array>;\r\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\r\n        if (source instanceof AsyncByteStream) {\r\n            this.source = (source as AsyncByteStream).source;\r\n        } else if (source instanceof AsyncByteQueue) {\r\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\r\n        } else if (isReadableNodeStream(source)) {\r\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\r\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\r\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\r\n        } else if (isFetchResponse(source)) {\r\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\r\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\r\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\r\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\r\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\r\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\r\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\r\n        }\r\n    }\r\n    [Symbol.asyncIterator]() { return this; }\r\n    public next(value?: any) { return this.source.next(value); }\r\n    public throw(value?: any) { return this.source.throw(value); }\r\n    public return(value?: any) { return this.source.return(value); }\r\n    public get closed(): Promise<void> { return this.source.closed; }\r\n    public cancel(reason?: any) { return this.source.cancel(reason); }\r\n    public peek(size?: number | null) { return this.source.peek(size); }\r\n    public read(size?: number | null) { return this.source.read(size); }\r\n}\r\n\r\n/** @ignore */\r\ntype ByteStreamSourceIterator<T> = Generator<T, null, { cmd: 'peek' | 'read', size?: number | null }>;\r\n/** @ignore */\r\ntype AsyncByteStreamSourceIterator<T> = AsyncGenerator<T, null, { cmd: 'peek' | 'read', size?: number | null }>;\r\n\r\n/** @ignore */\r\nclass ByteStreamSource<T> {\r\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\r\n    public cancel(reason?: any) { this.return(reason); }\r\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\r\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\r\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\r\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\r\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\r\n}\r\n\r\n/** @ignore */\r\nclass AsyncByteStreamSource<T> implements Readable<T> {\r\n\r\n    private _closedPromise: Promise<void>;\r\n    private _closedPromiseResolve?: (value?: any) => void;\r\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\r\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\r\n    }\r\n    public async cancel(reason?: any) { await this.return(reason); }\r\n    public get closed(): Promise<void> { return this._closedPromise; }\r\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\r\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\r\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\r\n    public async throw(value?: any) {\r\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\r\n        this._closedPromiseResolve && this._closedPromiseResolve();\r\n        this._closedPromiseResolve = undefined;\r\n        return Object.create(result);\r\n    }\r\n    public async return(value?: any) {\r\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\r\n        this._closedPromiseResolve && this._closedPromiseResolve();\r\n        this._closedPromiseResolve = undefined;\r\n        return Object.create(result);\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { FileHandle } from './interfaces';\r\nimport { ByteStream, AsyncByteStream } from './stream';\r\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\r\n\r\n/** @ignore */\r\nexport class RandomAccessFile extends ByteStream {\r\n    public size: number;\r\n    public position: number = 0;\r\n    protected buffer: Uint8Array | null;\r\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\r\n        super();\r\n        this.buffer = toUint8Array(buffer);\r\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\r\n    }\r\n    public readInt32(position: number) {\r\n        const { buffer, byteOffset } = this.readAt(position, 4);\r\n        return new DataView(buffer, byteOffset).getInt32(0, true);\r\n    }\r\n    public seek(position: number) {\r\n        this.position = Math.min(position, this.size);\r\n        return position < this.size;\r\n    }\r\n    public read(nBytes?: number | null) {\r\n        const { buffer, size, position } = this;\r\n        if (buffer && position < size) {\r\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\r\n            this.position = Math.min(size,\r\n                 position + Math.min(size - position, nBytes));\r\n            return buffer.subarray(position, this.position);\r\n        }\r\n        return null;\r\n    }\r\n    public readAt(position: number, nBytes: number) {\r\n        const buf = this.buffer;\r\n        const end = Math.min(this.size, position + nBytes);\r\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\r\n    }\r\n    public close() { this.buffer && (this.buffer = null); }\r\n    public throw(value?: any) { this.close(); return { done: true, value }; }\r\n    public return(value?: any) { this.close(); return { done: true, value }; }\r\n}\r\n\r\n/** @ignore */\r\nexport class AsyncRandomAccessFile extends AsyncByteStream {\r\n    // @ts-ignore\r\n    public size: number;\r\n    public position: number = 0;\r\n    public _pending?: Promise<void>;\r\n    protected _handle: FileHandle | null;\r\n    constructor(file: FileHandle, byteLength?: number) {\r\n        super();\r\n        this._handle = file;\r\n        if (typeof byteLength === 'number') {\r\n            this.size = byteLength;\r\n        } else {\r\n            this._pending = (async () => {\r\n                this.size = (await file.stat()).size;\r\n                delete this._pending;\r\n            })();\r\n        }\r\n    }\r\n    public async readInt32(position: number) {\r\n        const { buffer, byteOffset } = await this.readAt(position, 4);\r\n        return new DataView(buffer, byteOffset).getInt32(0, true);\r\n    }\r\n    public async seek(position: number) {\r\n        this._pending && await this._pending;\r\n        this.position = Math.min(position, this.size);\r\n        return position < this.size;\r\n    }\r\n    public async read(nBytes?: number | null) {\r\n        this._pending && await this._pending;\r\n        const { _handle: file, size, position } = this;\r\n        if (file && position < size) {\r\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\r\n            let pos = position, offset = 0, bytesRead = 0;\r\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\r\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\r\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\r\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\r\n            }\r\n            return buffer;\r\n        }\r\n        return null;\r\n    }\r\n    public async readAt(position: number, nBytes: number) {\r\n        this._pending && await this._pending;\r\n        const { _handle: file, size } = this;\r\n        if (file && (position + nBytes) < size) {\r\n            const end = Math.min(size, position + nBytes);\r\n            const buffer = new Uint8Array(end - position);\r\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\r\n        }\r\n        return new Uint8Array(nBytes);\r\n    }\r\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\r\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\r\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\n/** @ignore */\r\nconst carryBit16 = 1 << 16;\r\n\r\n/** @ignore */\r\nfunction intAsHex(value: number): string {\r\n    if (value < 0) {\r\n        value = 0xFFFFFFFF + value + 1;\r\n    }\r\n    return `0x${value.toString(16)}`;\r\n}\r\n\r\n/** @ignore */\r\nconst kInt32DecimalDigits = 8;\r\n/** @ignore */\r\nconst kPowersOfTen = [1,\r\n                      10,\r\n                      100,\r\n                      1000,\r\n                      10000,\r\n                      100000,\r\n                      1000000,\r\n                      10000000,\r\n                      100000000];\r\n\r\n/** @ignore */\r\nexport class BaseInt64 {\r\n    constructor (protected buffer: Uint32Array) {}\r\n\r\n    public high(): number { return this.buffer[1]; }\r\n    public low (): number { return this.buffer[0]; }\r\n\r\n    protected _times(other: BaseInt64) {\r\n        // Break the left and right numbers into 16 bit chunks\r\n        // so that we can multiply them without overflow.\r\n        const L = new Uint32Array([\r\n            this.buffer[1] >>> 16,\r\n            this.buffer[1] & 0xFFFF,\r\n            this.buffer[0] >>> 16,\r\n            this.buffer[0] & 0xFFFF\r\n        ]);\r\n\r\n        const R = new Uint32Array([\r\n            other.buffer[1] >>> 16,\r\n            other.buffer[1] & 0xFFFF,\r\n            other.buffer[0] >>> 16,\r\n            other.buffer[0] & 0xFFFF\r\n        ]);\r\n\r\n        let product = L[3] * R[3];\r\n        this.buffer[0] = product & 0xFFFF;\r\n\r\n        let sum = product >>> 16;\r\n\r\n        product = L[2] * R[3];\r\n        sum += product;\r\n\r\n        product = (L[3] * R[2]) >>> 0;\r\n        sum += product;\r\n\r\n        this.buffer[0] += sum << 16;\r\n\r\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\r\n\r\n        this.buffer[1] += sum >>> 16;\r\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\r\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\r\n\r\n        return this;\r\n      }\r\n\r\n    protected _plus(other: BaseInt64) {\r\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\r\n        this.buffer[1] += other.buffer[1];\r\n        if (sum < (this.buffer[0] >>> 0)) {\r\n          ++this.buffer[1];\r\n        }\r\n        this.buffer[0] = sum;\r\n    }\r\n\r\n    public lessThan(other: BaseInt64): boolean {\r\n        return this.buffer[1] < other.buffer[1] ||\r\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\r\n    }\r\n\r\n    public equals(other: BaseInt64): boolean {\r\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\r\n    }\r\n\r\n    public greaterThan(other: BaseInt64): boolean {\r\n        return other.lessThan(this);\r\n    }\r\n\r\n    public hex(): string {\r\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Uint64 extends BaseInt64 {\r\n    public times(other: Uint64): Uint64 {\r\n        this._times(other);\r\n        return this;\r\n    }\r\n\r\n    public plus(other: Uint64): Uint64 {\r\n        this._plus(other);\r\n        return this;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\r\n        return Uint64.fromString(\r\n            typeof(val) === 'string' ? val : val.toString(),\r\n            out_buffer\r\n        );\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\r\n        // Always parse numbers as strings - pulling out high and low bits\r\n        // directly seems to lose precision sometimes\r\n        // For example:\r\n        //     > -4613034156400212000 >>> 0\r\n        //     721782784\r\n        // The correct lower 32-bits are 721782752\r\n        return Uint64.fromString(num.toString(), out_buffer);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\r\n        const length = str.length;\r\n\r\n        let out = new Uint64(out_buffer);\r\n        for (let posn = 0; posn < length;) {\r\n            const group = kInt32DecimalDigits < length - posn ?\r\n                          kInt32DecimalDigits : length - posn;\r\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\r\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\r\n\r\n            out.times(multiple);\r\n            out.plus(chunk);\r\n\r\n            posn += group;\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static convertArray(values: (string|number)[]): Uint32Array {\r\n        const data = new Uint32Array(values.length * 2);\r\n        for (let i = -1, n = values.length; ++i < n;) {\r\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\r\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\r\n        return rtrn.times(right);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static add(left: Uint64, right: Uint64): Uint64 {\r\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\r\n        return rtrn.plus(right);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Int64 extends BaseInt64 {\r\n    public negate(): Int64 {\r\n        this.buffer[0] = ~this.buffer[0] + 1;\r\n        this.buffer[1] = ~this.buffer[1];\r\n\r\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\r\n        return this;\r\n    }\r\n\r\n    public times(other: Int64): Int64 {\r\n        this._times(other);\r\n        return this;\r\n    }\r\n\r\n    public plus(other: Int64): Int64 {\r\n        this._plus(other);\r\n        return this;\r\n    }\r\n\r\n    public lessThan(other: Int64): boolean {\r\n        // force high bytes to be signed\r\n        const this_high = this.buffer[1] << 0;\r\n        const other_high = other.buffer[1] << 0;\r\n        return this_high < other_high ||\r\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\r\n        return Int64.fromString(\r\n            typeof(val) === 'string' ? val : val.toString(),\r\n            out_buffer\r\n        );\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\r\n        // Always parse numbers as strings - pulling out high and low bits\r\n        // directly seems to lose precision sometimes\r\n        // For example:\r\n        //     > -4613034156400212000 >>> 0\r\n        //     721782784\r\n        // The correct lower 32-bits are 721782752\r\n        return Int64.fromString(num.toString(), out_buffer);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\r\n        // TODO: Assert that out_buffer is 0 and length = 2\r\n        const negate = str.startsWith('-');\r\n        const length = str.length;\r\n\r\n        let out = new Int64(out_buffer);\r\n        for (let posn = negate ? 1 : 0; posn < length;) {\r\n            const group = kInt32DecimalDigits < length - posn ?\r\n                          kInt32DecimalDigits : length - posn;\r\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\r\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\r\n\r\n            out.times(multiple);\r\n            out.plus(chunk);\r\n\r\n            posn += group;\r\n        }\r\n        return negate ? out.negate() : out;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static convertArray(values: (string|number)[]): Uint32Array {\r\n        const data = new Uint32Array(values.length * 2);\r\n        for (let i = -1, n = values.length; ++i < n;) {\r\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static multiply(left: Int64, right: Int64): Int64 {\r\n        let rtrn = new Int64(new Uint32Array(left.buffer));\r\n        return rtrn.times(right);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static add(left: Int64, right: Int64): Int64 {\r\n        let rtrn = new Int64(new Uint32Array(left.buffer));\r\n        return rtrn.plus(right);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Int128 {\r\n    constructor (private buffer: Uint32Array) {\r\n        // buffer[3] MSB (high)\r\n        // buffer[2]\r\n        // buffer[1]\r\n        // buffer[0] LSB (low)\r\n    }\r\n\r\n    public high(): Int64 {\r\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\r\n    }\r\n\r\n    public low(): Int64 {\r\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\r\n    }\r\n\r\n    public negate(): Int128 {\r\n        this.buffer[0] = ~this.buffer[0] + 1;\r\n        this.buffer[1] = ~this.buffer[1];\r\n        this.buffer[2] = ~this.buffer[2];\r\n        this.buffer[3] = ~this.buffer[3];\r\n\r\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\r\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\r\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\r\n        return this;\r\n    }\r\n\r\n    public times(other: Int128): Int128 {\r\n        // Break the left and right numbers into 32 bit chunks\r\n        // so that we can multiply them without overflow.\r\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\r\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\r\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\r\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\r\n\r\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\r\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\r\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\r\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\r\n\r\n        let product = Uint64.multiply(L3, R3);\r\n        this.buffer[0] = product.low();\r\n\r\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\r\n\r\n        product = Uint64.multiply(L2, R3);\r\n        sum.plus(product);\r\n\r\n        product = Uint64.multiply(L3, R2);\r\n        sum.plus(product);\r\n\r\n        this.buffer[1] = sum.low();\r\n\r\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\r\n\r\n        this.buffer[2] = sum.high();\r\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\r\n\r\n        high.plus(Uint64.multiply(L1, R3))\r\n            .plus(Uint64.multiply(L2, R2))\r\n            .plus(Uint64.multiply(L3, R1));\r\n        this.buffer[3] += Uint64.multiply(L0, R3)\r\n                        .plus(Uint64.multiply(L1, R2))\r\n                        .plus(Uint64.multiply(L2, R1))\r\n                        .plus(Uint64.multiply(L3, R0)).low();\r\n\r\n        return this;\r\n    }\r\n\r\n    public plus(other: Int128): Int128 {\r\n        let sums = new Uint32Array(4);\r\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\r\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\r\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\r\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\r\n\r\n        if (sums[0] < (this.buffer[0] >>> 0)) {\r\n            ++sums[1];\r\n        }\r\n        if (sums[1] < (this.buffer[1] >>> 0)) {\r\n            ++sums[2];\r\n        }\r\n        if (sums[2] < (this.buffer[2] >>> 0)) {\r\n            ++sums[3];\r\n        }\r\n\r\n        this.buffer[3] = sums[3];\r\n        this.buffer[2] = sums[2];\r\n        this.buffer[1] = sums[1];\r\n        this.buffer[0] = sums[0];\r\n\r\n        return this;\r\n    }\r\n\r\n    public hex(): string {\r\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static multiply(left: Int128, right: Int128): Int128 {\r\n        let rtrn = new Int128(new Uint32Array(left.buffer));\r\n        return rtrn.times(right);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static add(left: Int128, right: Int128): Int128 {\r\n        let rtrn = new Int128(new Uint32Array(left.buffer));\r\n        return rtrn.plus(right);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\r\n        return Int128.fromString(\r\n            typeof(val) === 'string' ? val : val.toString(),\r\n            out_buffer\r\n        );\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\r\n        // Always parse numbers as strings - pulling out high and low bits\r\n        // directly seems to lose precision sometimes\r\n        // For example:\r\n        //     > -4613034156400212000 >>> 0\r\n        //     721782784\r\n        // The correct lower 32-bits are 721782752\r\n        return Int128.fromString(num.toString(), out_buffer);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\r\n        // TODO: Assert that out_buffer is 0 and length = 4\r\n        const negate = str.startsWith('-');\r\n        const length = str.length;\r\n\r\n        let out = new Int128(out_buffer);\r\n        for (let posn = negate ? 1 : 0; posn < length;) {\r\n            const group = kInt32DecimalDigits < length - posn ?\r\n                          kInt32DecimalDigits : length - posn;\r\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\r\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\r\n\r\n            out.times(multiple);\r\n            out.plus(chunk);\r\n\r\n            posn += group;\r\n        }\r\n\r\n        return negate ? out.negate() : out;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static convertArray(values: (string|number)[]): Uint32Array {\r\n        // TODO: Distinguish between string and number at compile-time\r\n        const data = new Uint32Array(values.length * 4);\r\n        for (let i = -1, n = values.length; ++i < n;) {\r\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\r\n        }\r\n        return data;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport * as type from '../type';\r\nimport { Field } from '../schema';\r\nimport { Vector } from '../vector';\r\nimport { DataType } from '../type';\r\nimport { Visitor } from '../visitor';\r\nimport { packBools } from '../util/bit';\r\nimport { encodeUtf8 } from '../util/utf8';\r\nimport { Int64, Int128 } from '../util/int';\r\nimport { UnionMode, DateUnit } from '../enum';\r\nimport { toArrayBufferView } from '../util/buffer';\r\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\r\n\r\n/** @ignore */\r\nexport interface VectorLoader extends Visitor {\r\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\r\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\r\n}\r\n\r\n/** @ignore */\r\nexport class VectorLoader extends Visitor {\r\n    private bytes: Uint8Array;\r\n    private nodes: FieldNode[];\r\n    private nodesIndex: number = -1;\r\n    private buffers: BufferRegion[];\r\n    private buffersIndex: number = -1;\r\n    private dictionaries: Map<number, Vector<any>>;\r\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\r\n        super();\r\n        this.bytes = bytes;\r\n        this.nodes = nodes;\r\n        this.buffers = buffers;\r\n        this.dictionaries = dictionaries;\r\n    }\r\n\r\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\r\n        return super.visit(node instanceof Field ? node.type : node);\r\n    }\r\n\r\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\r\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\r\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\r\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\r\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\r\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\r\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\r\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\r\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\r\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\r\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\r\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\r\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\r\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\r\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\r\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\r\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\r\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\r\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\r\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\r\n\r\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\r\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\r\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\r\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\r\n    }\r\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\r\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\r\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\r\n        return this.bytes.subarray(offset, offset + length);\r\n    }\r\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\r\n        return this.dictionaries.get(type.id)!;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class JSONVectorLoader extends VectorLoader {\r\n    private sources: any[][];\r\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\r\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\r\n        this.sources = sources;\r\n    }\r\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\r\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\r\n    }\r\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\r\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\r\n    }\r\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\r\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\r\n    }\r\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\r\n        const { sources } = this;\r\n        if (DataType.isTimestamp(type)) {\r\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\r\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\r\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\r\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\r\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\r\n        } else if (DataType.isDecimal(type)) {\r\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\r\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\r\n            return binaryDataFromJSON(sources[offset] as string[]);\r\n        } else if (DataType.isBool(type)) {\r\n            return packBools(sources[offset] as number[]);\r\n        } else if (DataType.isUtf8(type)) {\r\n            return encodeUtf8((sources[offset] as string[]).join(''));\r\n        }\r\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction binaryDataFromJSON(values: string[]) {\r\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\r\n    // There are definitely more efficient ways to do this... but it gets the\r\n    // job done.\r\n    const joined = values.join('');\r\n    const data = new Uint8Array(joined.length / 2);\r\n    for (let i = 0; i < joined.length; i += 2) {\r\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\r\n    }\r\n    return data;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { flatbuffers } from 'flatbuffers';\r\nimport Long = flatbuffers.Long;\r\nimport Builder = flatbuffers.Builder;\r\nimport * as Schema_ from '../fb/Schema';\r\n\r\nimport * as type from '../type';\r\nimport { Visitor } from '../visitor';\r\n\r\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\r\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\r\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\r\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\r\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\r\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\r\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\r\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\r\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\r\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\r\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\r\nimport List = Schema_.org.apache.arrow.flatbuf.List;\r\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\r\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\r\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\r\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\r\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\r\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\r\n\r\n/** @ignore */\r\nexport interface TypeAssembler extends Visitor {\r\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\r\n}\r\n\r\n/** @ignore */\r\nexport class TypeAssembler extends Visitor {\r\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\r\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\r\n    }\r\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\r\n        Null.startNull(b);\r\n        return Null.endNull(b);\r\n    }\r\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\r\n        Int.startInt(b);\r\n        Int.addBitWidth(b, node.bitWidth);\r\n        Int.addIsSigned(b, node.isSigned);\r\n        return Int.endInt(b);\r\n    }\r\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\r\n        FloatingPoint.startFloatingPoint(b);\r\n        FloatingPoint.addPrecision(b, node.precision);\r\n        return FloatingPoint.endFloatingPoint(b);\r\n    }\r\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\r\n        Binary.startBinary(b);\r\n        return Binary.endBinary(b);\r\n    }\r\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\r\n        Bool.startBool(b);\r\n        return Bool.endBool(b);\r\n    }\r\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\r\n        Utf8.startUtf8(b);\r\n        return Utf8.endUtf8(b);\r\n    }\r\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\r\n        Decimal.startDecimal(b);\r\n        Decimal.addScale(b, node.scale);\r\n        Decimal.addPrecision(b, node.precision);\r\n        return Decimal.endDecimal(b);\r\n    }\r\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\r\n        Date.startDate(b);\r\n        Date.addUnit(b, node.unit);\r\n        return Date.endDate(b);\r\n    }\r\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\r\n        Time.startTime(b);\r\n        Time.addUnit(b, node.unit);\r\n        Time.addBitWidth(b, node.bitWidth);\r\n        return Time.endTime(b);\r\n    }\r\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\r\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\r\n        Timestamp.startTimestamp(b);\r\n        Timestamp.addUnit(b, node.unit);\r\n        if (timezone !== undefined) {\r\n            Timestamp.addTimezone(b, timezone);\r\n        }\r\n        return Timestamp.endTimestamp(b);\r\n    }\r\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\r\n        Interval.startInterval(b);\r\n        Interval.addUnit(b, node.unit);\r\n        return Interval.endInterval(b);\r\n    }\r\n    public visitList<T extends type.List>(_node: T, b: Builder) {\r\n        List.startList(b);\r\n        return List.endList(b);\r\n    }\r\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\r\n        Struct.startStruct_(b);\r\n        return Struct.endStruct_(b);\r\n    }\r\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\r\n        Union.startTypeIdsVector(b, node.typeIds.length);\r\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\r\n        Union.startUnion(b);\r\n        Union.addMode(b, node.mode);\r\n        Union.addTypeIds(b, typeIds);\r\n        return Union.endUnion(b);\r\n    }\r\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\r\n        const indexType = this.visit(node.indices, b);\r\n        DictionaryEncoding.startDictionaryEncoding(b);\r\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\r\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\r\n        if (indexType !== undefined) {\r\n            DictionaryEncoding.addIndexType(b, indexType);\r\n        }\r\n        return DictionaryEncoding.endDictionaryEncoding(b);\r\n    }\r\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\r\n        FixedSizeBinary.startFixedSizeBinary(b);\r\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\r\n        return FixedSizeBinary.endFixedSizeBinary(b);\r\n    }\r\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\r\n        FixedSizeList.startFixedSizeList(b);\r\n        FixedSizeList.addListSize(b, node.listSize);\r\n        return FixedSizeList.endFixedSizeList(b);\r\n    }\r\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\r\n        Map_.startMap(b);\r\n        Map_.addKeysSorted(b, node.keysSorted);\r\n        return Map_.endMap(b);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport const instance = new TypeAssembler();\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Schema, Field } from '../../schema';\r\nimport {\r\n    DataType, Dictionary, TimeBitWidth,\r\n    Utf8, Binary, Decimal, FixedSizeBinary,\r\n    List, FixedSizeList, Map_, Struct, Union,\r\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\r\n} from '../../type';\r\n\r\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\r\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\r\n\r\n/** @ignore */\r\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\r\n    return new Schema(\r\n        schemaFieldsFromJSON(_schema, dictionaries),\r\n        customMetadataFromJSON(_schema['customMetadata']),\r\n        dictionaries\r\n    );\r\n}\r\n\r\n/** @ignore */\r\nexport function recordBatchFromJSON(b: any) {\r\n    return new RecordBatch(\r\n        b['count'],\r\n        fieldNodesFromJSON(b['columns']),\r\n        buffersFromJSON(b['columns'])\r\n    );\r\n}\r\n\r\n/** @ignore */\r\nexport function dictionaryBatchFromJSON(b: any) {\r\n    return new DictionaryBatch(\r\n        recordBatchFromJSON(b['data']),\r\n        b['id'], b['isDelta']\r\n    );\r\n}\r\n\r\n/** @ignore */\r\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\r\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\r\n}\r\n\r\n/** @ignore */\r\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\r\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\r\n}\r\n\r\n/** @ignore */\r\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\r\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\r\n        ...fieldNodes,\r\n        new FieldNode(\r\n            column['count'],\r\n            nullCountFromJSON(column['VALIDITY'])\r\n        ),\r\n        ...fieldNodesFromJSON(column['children'])\r\n    ], [] as FieldNode[]);\r\n}\r\n\r\n/** @ignore */\r\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\r\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\r\n        const column = xs[i];\r\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\r\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\r\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\r\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\r\n        buffers = buffersFromJSON(column['children'], buffers);\r\n    }\r\n    return buffers;\r\n}\r\n\r\n/** @ignore */\r\nfunction nullCountFromJSON(validity: number[]) {\r\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\r\n}\r\n\r\n/** @ignore */\r\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\r\n\r\n    let id: number;\r\n    let keys: TKeys | null;\r\n    let field: Field | void;\r\n    let dictMeta: any;\r\n    let type: DataType<any>;\r\n    let dictType: Dictionary;\r\n\r\n    // If no dictionary encoding\r\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\r\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\r\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\r\n    }\r\n    // tslint:disable\r\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\r\n    // the data type and child fields, then wrap in a Dictionary type and insert the\r\n    // data type into the dictionary types map.\r\n    else if (!dictionaries.has(id = dictMeta['id'])) {\r\n        // a dictionary index defaults to signed 32 bit int if unspecified\r\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\r\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\r\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\r\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\r\n    }\r\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\r\n    // data type and wrap in a new Dictionary type and field.\r\n    else {\r\n        // a dictionary index defaults to signed 32 bit int if unspecified\r\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\r\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\r\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\r\n    }\r\n    return field || null;\r\n}\r\n\r\n/** @ignore */\r\nfunction customMetadataFromJSON(_metadata?: object) {\r\n    return new Map<string, string>(Object.entries(_metadata || {}));\r\n}\r\n\r\n/** @ignore */\r\nfunction indexTypeFromJSON(_type: any) {\r\n    return new Int(_type['isSigned'], _type['bitWidth']);\r\n}\r\n\r\n/** @ignore */\r\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\r\n\r\n    const typeId = f['type']['name'];\r\n\r\n    switch (typeId) {\r\n        case 'NONE':   return new Null();\r\n        case 'null':   return new Null();\r\n        case 'binary': return new Binary();\r\n        case 'utf8':   return new Utf8();\r\n        case 'bool':   return new Bool();\r\n        case 'list':   return new List((children || [])[0]);\r\n        case 'struct': return new Struct(children || []);\r\n        case 'struct_': return new Struct(children || []);\r\n    }\r\n\r\n    switch (typeId) {\r\n        case 'int': {\r\n            const t = f['type'];\r\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\r\n        }\r\n        case 'floatingpoint': {\r\n            const t = f['type'];\r\n            return new Float(Precision[t['precision']] as any);\r\n        }\r\n        case 'decimal': {\r\n            const t = f['type'];\r\n            return new Decimal(t['scale'], t['precision']);\r\n        }\r\n        case 'date': {\r\n            const t = f['type'];\r\n            return new Date_(DateUnit[t['unit']] as any);\r\n        }\r\n        case 'time': {\r\n            const t = f['type'];\r\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\r\n        }\r\n        case 'timestamp': {\r\n            const t = f['type'];\r\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\r\n        }\r\n        case 'interval': {\r\n            const t = f['type'];\r\n            return new Interval(IntervalUnit[t['unit']] as any);\r\n        }\r\n        case 'union': {\r\n            const t = f['type'];\r\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\r\n        }\r\n        case 'fixedsizebinary': {\r\n            const t = f['type'];\r\n            return new FixedSizeBinary(t['byteWidth']);\r\n        }\r\n        case 'fixedsizelist': {\r\n            const t = f['type'];\r\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\r\n        }\r\n        case 'map': {\r\n            const t = f['type'];\r\n            return new Map_((children || [])[0], t['keysSorted']);\r\n        }\r\n    }\r\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { flatbuffers } from 'flatbuffers';\r\nimport * as Schema_ from '../../fb/Schema';\r\nimport * as Message_ from '../../fb/Message';\r\n\r\nimport { Schema, Field } from '../../schema';\r\nimport { toUint8Array } from '../../util/buffer';\r\nimport { ArrayBufferViewInput } from '../../util/buffer';\r\nimport { MessageHeader, MetadataVersion } from '../../enum';\r\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\r\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\r\n\r\nimport Long = flatbuffers.Long;\r\nimport Builder = flatbuffers.Builder;\r\nimport ByteBuffer = flatbuffers.ByteBuffer;\r\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\r\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\r\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\r\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\r\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\r\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\r\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\r\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\r\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\r\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\r\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\r\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\r\n\r\nimport {\r\n    DataType, Dictionary, TimeBitWidth,\r\n    Utf8, Binary, Decimal, FixedSizeBinary,\r\n    List, FixedSizeList, Map_, Struct, Union,\r\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\r\n} from '../../type';\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class Message<T extends MessageHeader = any> {\r\n\r\n    /** @nocollapse */\r\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\r\n        const message = new Message(0, MetadataVersion.V4, headerType);\r\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\r\n        return message;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static decode(buf: ArrayBufferViewInput) {\r\n        buf = new ByteBuffer(toUint8Array(buf));\r\n        const _message = _Message.getRootAsMessage(buf);\r\n        const bodyLength: Long = _message.bodyLength()!;\r\n        const version: MetadataVersion = _message.version();\r\n        const headerType: MessageHeader = _message.headerType();\r\n        const message = new Message(bodyLength, version, headerType);\r\n        message._createHeader = decodeMessageHeader(_message, headerType);\r\n        return message;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static encode<T extends MessageHeader>(message: Message<T>) {\r\n        let b = new Builder(), headerOffset = -1;\r\n        if (message.isSchema()) {\r\n            headerOffset = Schema.encode(b, message.header() as Schema);\r\n        } else if (message.isRecordBatch()) {\r\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\r\n        } else if (message.isDictionaryBatch()) {\r\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\r\n        }\r\n        _Message.startMessage(b);\r\n        _Message.addVersion(b, MetadataVersion.V4);\r\n        _Message.addHeader(b, headerOffset);\r\n        _Message.addHeaderType(b, message.headerType);\r\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\r\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\r\n        return b.asUint8Array();\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\r\n        if (header instanceof Schema) {\r\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\r\n        }\r\n        if (header instanceof RecordBatch) {\r\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\r\n        }\r\n        if (header instanceof DictionaryBatch) {\r\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\r\n        }\r\n        throw new Error(`Unrecognized Message header: ${header}`);\r\n    }\r\n\r\n    // @ts-ignore\r\n    public body: Uint8Array;\r\n    protected _headerType: T;\r\n    protected _bodyLength: number;\r\n    protected _version: MetadataVersion;\r\n    public get type() { return this.headerType; }\r\n    public get version() { return this._version; }\r\n    public get headerType() { return this._headerType; }\r\n    public get bodyLength() { return this._bodyLength; }\r\n    // @ts-ignore\r\n    protected _createHeader: MessageHeaderDecoder;\r\n    public header() { return this._createHeader<T>(); }\r\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\r\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\r\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\r\n\r\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\r\n        this._version = version;\r\n        this._headerType = headerType;\r\n        this.body = new Uint8Array(0);\r\n        header && (this._createHeader = () => header);\r\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class RecordBatch {\r\n    protected _length: number;\r\n    protected _nodes: FieldNode[];\r\n    protected _buffers: BufferRegion[];\r\n    public get nodes() { return this._nodes; }\r\n    public get length() { return this._length; }\r\n    public get buffers() { return this._buffers; }\r\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\r\n        this._nodes = nodes;\r\n        this._buffers = buffers;\r\n        this._length = typeof length === 'number' ? length : length.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class DictionaryBatch {\r\n\r\n    protected _id: number;\r\n    protected _isDelta: boolean;\r\n    protected _data: RecordBatch;\r\n    public get id() { return this._id; }\r\n    public get data() { return this._data; }\r\n    public get isDelta() { return this._isDelta; }\r\n    public get length(): number { return this.data.length; }\r\n    public get nodes(): FieldNode[] { return this.data.nodes; }\r\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\r\n\r\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\r\n        this._data = data;\r\n        this._isDelta = isDelta;\r\n        this._id = typeof id === 'number' ? id : id.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class BufferRegion {\r\n    public offset: number;\r\n    public length: number;\r\n    constructor(offset: Long | number, length: Long | number) {\r\n        this.offset = typeof offset === 'number' ? offset : offset.low;\r\n        this.length = typeof length === 'number' ? length : length.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class FieldNode {\r\n    public length: number;\r\n    public nullCount: number;\r\n    constructor(length: Long | number, nullCount: Long | number) {\r\n        this.length = typeof length === 'number' ? length : length.low;\r\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\r\n    return (() => {\r\n        switch (type) {\r\n            case MessageHeader.Schema: return Schema.fromJSON(message);\r\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\r\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\r\n        }\r\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\r\n    }) as MessageHeaderDecoder;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\r\n    return (() => {\r\n        switch (type) {\r\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\r\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\r\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\r\n        }\r\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\r\n    }) as MessageHeaderDecoder;\r\n}\r\n\r\nField['encode'] = encodeField;\r\nField['decode'] = decodeField;\r\nField['fromJSON'] = fieldFromJSON;\r\n\r\nSchema['encode'] = encodeSchema;\r\nSchema['decode'] = decodeSchema;\r\nSchema['fromJSON'] = schemaFromJSON;\r\n\r\nRecordBatch['encode'] = encodeRecordBatch;\r\nRecordBatch['decode'] = decodeRecordBatch;\r\nRecordBatch['fromJSON'] = recordBatchFromJSON;\r\n\r\nDictionaryBatch['encode'] = encodeDictionaryBatch;\r\nDictionaryBatch['decode'] = decodeDictionaryBatch;\r\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\r\n\r\nFieldNode['encode'] = encodeFieldNode;\r\nFieldNode['decode'] = decodeFieldNode;\r\n\r\nBufferRegion['encode'] = encodeBufferRegion;\r\nBufferRegion['decode'] = decodeBufferRegion;\r\n\r\ndeclare module '../../schema' {\r\n    namespace Field {\r\n        export { encodeField as encode };\r\n        export { decodeField as decode };\r\n        export { fieldFromJSON as fromJSON };\r\n    }\r\n    namespace Schema {\r\n        export { encodeSchema as encode };\r\n        export { decodeSchema as decode };\r\n        export { schemaFromJSON as fromJSON };\r\n    }\r\n}\r\n\r\ndeclare module './message' {\r\n    namespace RecordBatch {\r\n        export { encodeRecordBatch as encode };\r\n        export { decodeRecordBatch as decode };\r\n        export { recordBatchFromJSON as fromJSON };\r\n    }\r\n    namespace DictionaryBatch {\r\n        export { encodeDictionaryBatch as encode };\r\n        export { decodeDictionaryBatch as decode };\r\n        export { dictionaryBatchFromJSON as fromJSON };\r\n    }\r\n    namespace FieldNode {\r\n        export { encodeFieldNode as encode };\r\n        export { decodeFieldNode as decode };\r\n    }\r\n    namespace BufferRegion {\r\n        export { encodeBufferRegion as encode };\r\n        export { decodeBufferRegion as decode };\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\r\n    const fields = decodeSchemaFields(_schema, dictionaries);\r\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\r\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\r\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeBufferRegion(b: _Buffer) {\r\n    return new BufferRegion(b.offset(), b.length());\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldNode(f: _FieldNode) {\r\n    return new FieldNode(f.length(), f.nullCount());\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldNodes(batch: _RecordBatch) {\r\n    const nodes = [] as FieldNode[];\r\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\r\n        if (f = batch.nodes(i)) {\r\n            nodes[++j] = FieldNode.decode(f);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\r\n    const bufferRegions = [] as BufferRegion[];\r\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\r\n        if (b = batch.buffers(i)) {\r\n        // If this Arrow buffer was written before version 4,\r\n        // advance the buffer's bb_pos 8 bytes to skip past\r\n        // the now-removed page_id field\r\n        if (version < MetadataVersion.V4) {\r\n                b.bb_pos += (8 * (i + 1));\r\n            }\r\n            bufferRegions[++j] = BufferRegion.decode(b);\r\n        }\r\n    }\r\n    return bufferRegions;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\r\n    const fields = [] as Field[];\r\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\r\n        if (f = schema.fields(i)) {\r\n            fields[++j] = Field.decode(f, dictionaries);\r\n        }\r\n    }\r\n    return fields;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\r\n    const children = [] as Field[];\r\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\r\n        if (f = field.children(i)) {\r\n            children[++j] = Field.decode(f, dictionaries);\r\n        }\r\n    }\r\n    return children;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\r\n\r\n    let id: number;\r\n    let field: Field | void;\r\n    let type: DataType<any>;\r\n    let keys: _Int | TKeys | null;\r\n    let dictType: Dictionary;\r\n    let dictMeta: _DictionaryEncoding | null;\r\n\r\n    // If no dictionary encoding\r\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\r\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\r\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\r\n    }\r\n    // tslint:disable\r\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\r\n    // the data type and child fields, then wrap in a Dictionary type and insert the\r\n    // data type into the dictionary types map.\r\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\r\n        // a dictionary index defaults to signed 32 bit int if unspecified\r\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\r\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\r\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\r\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\r\n    }\r\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\r\n    // data type and wrap in a new Dictionary type and field.\r\n    else {\r\n        // a dictionary index defaults to signed 32 bit int if unspecified\r\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\r\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\r\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\r\n    }\r\n    return field || null;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\r\n    const data = new Map<string, string>();\r\n    if (parent) {\r\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\r\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\r\n                data.set(key, entry.value()!);\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeIndexType(_type: _Int) {\r\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\r\n\r\n    const typeId = f.typeType();\r\n\r\n    switch (typeId) {\r\n        case Type.NONE:    return new Null();\r\n        case Type.Null:    return new Null();\r\n        case Type.Binary:  return new Binary();\r\n        case Type.Utf8:    return new Utf8();\r\n        case Type.Bool:    return new Bool();\r\n        case Type.List:    return new List((children || [])[0]);\r\n        case Type.Struct_: return new Struct(children || []);\r\n    }\r\n\r\n    switch (typeId) {\r\n        case Type.Int: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\r\n            return new Int(t.isSigned(), t.bitWidth());\r\n        }\r\n        case Type.FloatingPoint: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\r\n            return new Float(t.precision());\r\n        }\r\n        case Type.Decimal: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\r\n            return new Decimal(t.scale(), t.precision());\r\n        }\r\n        case Type.Date: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\r\n            return new Date_(t.unit());\r\n        }\r\n        case Type.Time: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\r\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\r\n        }\r\n        case Type.Timestamp: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\r\n            return new Timestamp(t.unit(), t.timezone());\r\n        }\r\n        case Type.Interval: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\r\n            return new Interval(t.unit());\r\n        }\r\n        case Type.Union: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\r\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\r\n        }\r\n        case Type.FixedSizeBinary: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\r\n            return new FixedSizeBinary(t.byteWidth());\r\n        }\r\n        case Type.FixedSizeList: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\r\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\r\n        }\r\n        case Type.Map: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\r\n            return new Map_((children || [])[0], t.keysSorted());\r\n        }\r\n    }\r\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeSchema(b: Builder, schema: Schema) {\r\n\r\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\r\n\r\n    _Schema.startFieldsVector(b, fieldOffsets.length);\r\n\r\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\r\n\r\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\r\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\r\n            const key = b.createString(`${k}`);\r\n            const val = b.createString(`${v}`);\r\n            _KeyValue.startKeyValue(b);\r\n            _KeyValue.addKey(b, key);\r\n            _KeyValue.addValue(b, val);\r\n            return _KeyValue.endKeyValue(b);\r\n        }));\r\n\r\n    _Schema.startSchema(b);\r\n    _Schema.addFields(b, fieldsVectorOffset);\r\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\r\n\r\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\r\n\r\n    return _Schema.endSchema(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeField(b: Builder, field: Field) {\r\n\r\n    let nameOffset = -1;\r\n    let typeOffset = -1;\r\n    let dictionaryOffset = -1;\r\n\r\n    let type = field.type;\r\n    let typeId: Type = <any> field.typeId;\r\n\r\n    if (!DataType.isDictionary(type)) {\r\n        typeOffset = typeAssembler.visit(type, b)!;\r\n    } else {\r\n        typeId = type.dictionary.typeId;\r\n        dictionaryOffset = typeAssembler.visit(type, b)!;\r\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\r\n    }\r\n\r\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\r\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\r\n\r\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\r\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\r\n            const key = b.createString(`${k}`);\r\n            const val = b.createString(`${v}`);\r\n            _KeyValue.startKeyValue(b);\r\n            _KeyValue.addKey(b, key);\r\n            _KeyValue.addValue(b, val);\r\n            return _KeyValue.endKeyValue(b);\r\n        }));\r\n\r\n    if (field.name) {\r\n        nameOffset = b.createString(field.name);\r\n    }\r\n\r\n    _Field.startField(b);\r\n    _Field.addType(b, typeOffset);\r\n    _Field.addTypeType(b, typeId);\r\n    _Field.addChildren(b, childrenVectorOffset);\r\n    _Field.addNullable(b, !!field.nullable);\r\n\r\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\r\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\r\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\r\n\r\n    return _Field.endField(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\r\n\r\n    const nodes = recordBatch.nodes || [];\r\n    const buffers = recordBatch.buffers || [];\r\n\r\n    _RecordBatch.startNodesVector(b, nodes.length);\r\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\r\n\r\n    const nodesVectorOffset = b.endVector();\r\n\r\n    _RecordBatch.startBuffersVector(b, buffers.length);\r\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\r\n\r\n    const buffersVectorOffset = b.endVector();\r\n\r\n    _RecordBatch.startRecordBatch(b);\r\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\r\n    _RecordBatch.addNodes(b, nodesVectorOffset);\r\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\r\n    return _RecordBatch.endRecordBatch(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\r\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\r\n    _DictionaryBatch.startDictionaryBatch(b);\r\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\r\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\r\n    _DictionaryBatch.addData(b, dataOffset);\r\n    return _DictionaryBatch.endDictionaryBatch(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\r\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\r\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\r\n}\r\n\r\n/** @ignore */\r\nconst platformIsLittleEndian = (function() {\r\n    const buffer = new ArrayBuffer(2);\r\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\r\n    // Int16Array uses the platform's endianness.\r\n    return new Int16Array(buffer)[0] === 256;\r\n})();\r\n\r\n/** @ignore */\r\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\r\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\r\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { MessageHeader } from '../enum';\r\nimport { flatbuffers } from 'flatbuffers';\r\nimport ByteBuffer = flatbuffers.ByteBuffer;\r\nimport { Message } from './metadata/message';\r\nimport { isFileHandle } from '../util/compat';\r\nimport { AsyncRandomAccessFile } from '../io/file';\r\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\r\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\r\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\r\n\r\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\r\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\r\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\r\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\r\n\r\n/** @ignore */\r\nexport class MessageReader implements IterableIterator<Message> {\r\n    protected source: ByteStream;\r\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\r\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\r\n    }\r\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\r\n    public next(): IteratorResult<Message> {\r\n        let r;\r\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\r\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\r\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\r\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\r\n        if ((r.value === -1) &&\r\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\r\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\r\n        return (<any> r) as IteratorResult<Message>;\r\n    }\r\n    public throw(value?: any) { return this.source.throw(value); }\r\n    public return(value?: any) { return this.source.return(value); }\r\n    public readMessage<T extends MessageHeader>(type?: T | null) {\r\n        let r: IteratorResult<Message<T>>;\r\n        if ((r = this.next()).done) { return null; }\r\n        if ((type != null) && r.value.headerType !== type) {\r\n            throw new Error(invalidMessageType(type));\r\n        }\r\n        return r.value;\r\n    }\r\n    public readMessageBody(bodyLength: number): Uint8Array {\r\n        if (bodyLength <= 0) { return new Uint8Array(0); }\r\n        const buf = toUint8Array(this.source.read(bodyLength));\r\n        if (buf.byteLength < bodyLength) {\r\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\r\n        }\r\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\r\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\r\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\r\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\r\n    }\r\n    public readSchema(throwIfNull = false) {\r\n        const type = MessageHeader.Schema;\r\n        const message = this.readMessage(type);\r\n        const schema = message && message.header();\r\n        if (throwIfNull && !schema) {\r\n            throw new Error(nullMessage(type));\r\n        }\r\n        return schema;\r\n    }\r\n    protected readMetadataLength(): IteratorResult<number> {\r\n        const buf = this.source.read(PADDING);\r\n        const bb = buf && new ByteBuffer(buf);\r\n        const len = bb && bb.readInt32(0) || 0;\r\n        return { done: len === 0, value: len };\r\n    }\r\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\r\n        const buf = this.source.read(metadataLength);\r\n        if (!buf) { return ITERATOR_DONE; }\r\n        if (buf.byteLength < metadataLength) {\r\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\r\n        }\r\n        return { done: false, value: Message.decode(buf) };\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\r\n    protected source: AsyncByteStream;\r\n    constructor(source: ReadableSource<Uint8Array>);\r\n    constructor(source: FileHandle, byteLength?: number);\r\n    constructor(source: any, byteLength?: number) {\r\n        this.source = source instanceof AsyncByteStream ? source\r\n            : isFileHandle(source)\r\n            ? new AsyncRandomAccessFile(source, byteLength!)\r\n            : new AsyncByteStream(source);\r\n    }\r\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\r\n    public async next(): Promise<IteratorResult<Message>> {\r\n        let r;\r\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\r\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\r\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\r\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\r\n        if ((r.value === -1) &&\r\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\r\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\r\n        return (<any> r) as IteratorResult<Message>;\r\n    }\r\n    public async throw(value?: any) { return await this.source.throw(value); }\r\n    public async return(value?: any) { return await this.source.return(value); }\r\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\r\n        let r: IteratorResult<Message<T>>;\r\n        if ((r = await this.next()).done) { return null; }\r\n        if ((type != null) && r.value.headerType !== type) {\r\n            throw new Error(invalidMessageType(type));\r\n        }\r\n        return r.value;\r\n    }\r\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\r\n        if (bodyLength <= 0) { return new Uint8Array(0); }\r\n        const buf = toUint8Array(await this.source.read(bodyLength));\r\n        if (buf.byteLength < bodyLength) {\r\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\r\n        }\r\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\r\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\r\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\r\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\r\n    }\r\n    public async readSchema(throwIfNull = false) {\r\n        const type = MessageHeader.Schema;\r\n        const message = await this.readMessage(type);\r\n        const schema = message && message.header();\r\n        if (throwIfNull && !schema) {\r\n            throw new Error(nullMessage(type));\r\n        }\r\n        return schema;\r\n    }\r\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\r\n        const buf = await this.source.read(PADDING);\r\n        const bb = buf && new ByteBuffer(buf);\r\n        const len = bb && bb.readInt32(0) || 0;\r\n        return { done: len === 0, value: len };\r\n    }\r\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\r\n        const buf = await this.source.read(metadataLength);\r\n        if (!buf) { return ITERATOR_DONE; }\r\n        if (buf.byteLength < metadataLength) {\r\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\r\n        }\r\n        return { done: false, value: Message.decode(buf) };\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class JSONMessageReader extends MessageReader {\r\n    private _schema = false;\r\n    private _json: ArrowJSON;\r\n    private _body: any[] = [];\r\n    private _batchIndex = 0;\r\n    private _dictionaryIndex = 0;\r\n    constructor(source: ArrowJSON | ArrowJSONLike) {\r\n        super(new Uint8Array(0));\r\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\r\n    }\r\n    public next() {\r\n        const { _json } = this;\r\n        if (!this._schema) {\r\n            this._schema = true;\r\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\r\n            return { done: false, value: message };\r\n        }\r\n        if (this._dictionaryIndex < _json.dictionaries.length) {\r\n            const batch = _json.dictionaries[this._dictionaryIndex++];\r\n            this._body = batch['data']['columns'];\r\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\r\n            return { done: false, value: message };\r\n        }\r\n        if (this._batchIndex < _json.batches.length) {\r\n            const batch = _json.batches[this._batchIndex++];\r\n            this._body = batch['columns'];\r\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\r\n            return { done: false, value: message };\r\n        }\r\n        this._body = [];\r\n        return ITERATOR_DONE;\r\n    }\r\n    public readMessageBody(_bodyLength?: number) {\r\n        return flattenDataSources(this._body) as any;\r\n        function flattenDataSources(xs: any[]): any[][] {\r\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\r\n                ...buffers,\r\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\r\n                ...(column['TYPE'] && [column['TYPE']] || []),\r\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\r\n                ...(column['DATA'] && [column['DATA']] || []),\r\n                ...flattenDataSources(column['children'])\r\n            ], [] as any[][]);\r\n        }\r\n    }\r\n    public readMessage<T extends MessageHeader>(type?: T | null) {\r\n        let r: IteratorResult<Message<T>>;\r\n        if ((r = this.next()).done) { return null; }\r\n        if ((type != null) && r.value.headerType !== type) {\r\n            throw new Error(invalidMessageType(type));\r\n        }\r\n        return r.value;\r\n    }\r\n    public readSchema() {\r\n        const type = MessageHeader.Schema;\r\n        const message = this.readMessage(type);\r\n        const schema = message && message.header();\r\n        if (!message || !schema) {\r\n            throw new Error(nullMessage(type));\r\n        }\r\n        return schema;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport const PADDING = 4;\r\n/** @ignore */\r\nexport const MAGIC_STR = 'ARROW1';\r\n/** @ignore */\r\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\r\n\r\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\r\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\r\n}\r\n\r\n/** @ignore */\r\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\r\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\r\n        if (MAGIC[i] !== buffer[index + i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/** @ignore */\r\nexport const magicLength = MAGIC.length;\r\n/** @ignore */\r\nexport const magicAndPadding = magicLength + PADDING;\r\n/** @ignore */\r\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Vector } from '../vector';\r\nimport { Visitor } from '../visitor';\r\nimport { Type, UnionMode } from '../enum';\r\nimport { RecordBatch } from '../recordbatch';\r\nimport { VectorType as V } from '../interfaces';\r\nimport { rebaseValueOffsets } from '../util/buffer';\r\nimport { packBools, truncateBitmap } from '../util/bit';\r\nimport { selectVectorChildrenArgs } from '../util/args';\r\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\r\nimport {\r\n    DataType, Dictionary,\r\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n} from '../type';\r\n\r\n/** @ignore */\r\nexport interface VectorAssembler extends Visitor {\r\n    visit<T extends Vector>(node: T): this;\r\n    visitMany<T extends Vector>(nodes: T[]): this[];\r\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\r\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\r\n\r\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\r\n    visitInt                  <T extends Int>             (vector: V<T>): this;\r\n    visitFloat                <T extends Float>           (vector: V<T>): this;\r\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\r\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\r\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\r\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\r\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\r\n    visitTime                 <T extends Time>            (vector: V<T>): this;\r\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\r\n    visitList                 <T extends List>            (vector: V<T>): this;\r\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\r\n    visitUnion                <T extends Union>           (vector: V<T>): this;\r\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\r\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\r\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\r\n}\r\n\r\n/** @ignore */\r\nexport class VectorAssembler extends Visitor {\r\n\r\n    /** @nocollapse */\r\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\r\n        const assembler = new VectorAssembler();\r\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\r\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\r\n        return assembleResult;\r\n    }\r\n\r\n    private constructor() { super(); }\r\n\r\n    public visit<T extends Vector>(vector: T): this {\r\n        if (!DataType.isDictionary(vector.type)) {\r\n            const { data, length, nullCount } = vector;\r\n            if (length > 2147483647) {\r\n                /* istanbul ignore next */\r\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\r\n            }\r\n            if (!DataType.isNull(vector.type)) {\r\n                addBuffer.call(this, nullCount <= 0\r\n                    ? new Uint8Array(0) // placeholder validity buffer\r\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\r\n                );\r\n            }\r\n            this.nodes.push(new FieldNode(length, nullCount));\r\n        }\r\n        return super.visit(vector);\r\n    }\r\n\r\n    public visitNull<T extends Null>(_nullV: V<T>) {\r\n        return this;\r\n    }\r\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\r\n        // Assemble the indices here, Dictionary assembled separately.\r\n        return this.visit(vector.indices);\r\n    }\r\n\r\n    public get nodes() { return this._nodes; }\r\n    public get buffers() { return this._buffers; }\r\n    public get byteLength() { return this._byteLength; }\r\n    public get bufferRegions() { return this._bufferRegions; }\r\n\r\n    protected _byteLength = 0;\r\n    protected _nodes: FieldNode[] = [];\r\n    protected _buffers: ArrayBufferView[] = [];\r\n    protected _bufferRegions: BufferRegion[] = [];\r\n}\r\n\r\n/** @ignore */\r\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\r\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\r\n    this.buffers.push(values);\r\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\r\n    this._byteLength += byteLength;\r\n    return this;\r\n}\r\n\r\n/** @ignore */\r\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\r\n    const { type, length, typeIds, valueOffsets } = vector;\r\n    // All Union Vectors have a typeIds buffer\r\n    addBuffer.call(this, typeIds);\r\n    // If this is a Sparse Union, treat it like all other Nested types\r\n    if (type.mode === UnionMode.Sparse) {\r\n        return assembleNestedVector.call(this, vector);\r\n    } else if (type.mode === UnionMode.Dense) {\r\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\r\n        if (vector.offset <= 0) {\r\n            // If the Vector hasn't been sliced, write the existing valueOffsets\r\n            addBuffer.call(this, valueOffsets);\r\n            // We can treat this like all other Nested types\r\n            return assembleNestedVector.call(this, vector);\r\n        } else {\r\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\r\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\r\n            // Union typeIds are not necessary 0-indexed\r\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\r\n            const childLengths = new Int32Array(maxChildTypeId + 1);\r\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\r\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\r\n            const shiftedOffsets = new Int32Array(length);\r\n            // If we have a non-zero offset, then the value offsets do not start at\r\n            // zero. We must a) create a new offsets array with shifted offsets and\r\n            // b) slice the values array accordingly\r\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\r\n            for (let typeId, shift, index = -1; ++index < length;) {\r\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\r\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\r\n                }\r\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\r\n                ++childLengths[typeId];\r\n            }\r\n            addBuffer.call(this, shiftedOffsets);\r\n            // Slice and visit children accordingly\r\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\r\n                if (child = vector.getChildAt(childIndex)) {\r\n                    const typeId = type.typeIds[childIndex];\r\n                    const childLength = Math.min(length, childLengths[typeId]);\r\n                    this.visit(child.slice(childOffsets[typeId], childLength));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n}\r\n\r\n/** @ignore */\r\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\r\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\r\n    let values: Uint8Array;\r\n    if (vector.nullCount >= vector.length) {\r\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\r\n        return addBuffer.call(this, new Uint8Array(0));\r\n    } else if ((values = vector.values) instanceof Uint8Array) {\r\n        // If values is already a Uint8Array, slice the bitmap (fast path)\r\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\r\n    }\r\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\r\n    // values as bools and re-pack them into a Uint8Array. This code isn't\r\n    // reachable unless you're trying to manipulate the Data internals,\r\n    // we we're only doing this for safety.\r\n    /* istanbul ignore next */\r\n    return addBuffer.call(this, packBools(vector));\r\n}\r\n\r\n/** @ignore */\r\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\r\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\r\n}\r\n\r\n/** @ignore */\r\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\r\n    const { length, values, valueOffsets } = vector;\r\n    const firstOffset = valueOffsets[0];\r\n    const lastOffset = valueOffsets[length];\r\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\r\n    // Push in the order FlatList types read their buffers\r\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\r\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\r\n    return this;\r\n}\r\n\r\n/** @ignore */\r\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\r\n    const { length, valueOffsets } = vector;\r\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\r\n    if (valueOffsets) {\r\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\r\n    }\r\n    // Then insert the List's values child\r\n    return this.visit(vector.getChildAt(0)!);\r\n}\r\n\r\n/** @ignore */\r\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\r\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\r\n}\r\n\r\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\r\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\r\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\r\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\r\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\r\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\r\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\r\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\r\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\r\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\r\nVectorAssembler.prototype.visitList            =     assembleListVector;\r\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\r\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\r\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\r\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\r\nVectorAssembler.prototype.visitMap             =     assembleListVector;\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport * as type from '../type';\r\nimport { Visitor } from '../visitor';\r\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\r\n\r\n/** @ignore */\r\nexport interface JSONTypeAssembler extends Visitor {\r\n    visit<T extends type.DataType>(node: T): object | undefined;\r\n}\r\n\r\n/** @ignore */\r\nexport class JSONTypeAssembler extends Visitor {\r\n    public visit<T extends type.DataType>(node: T): object | undefined {\r\n        return node == null ? undefined : super.visit(node);\r\n    }\r\n    public visitNull<T extends type.Null>({ typeId }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase() };\r\n    }\r\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\r\n    }\r\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\r\n    }\r\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase() };\r\n    }\r\n    public visitBool<T extends type.Bool>({ typeId }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase() };\r\n    }\r\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase() };\r\n    }\r\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\r\n    }\r\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\r\n    }\r\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\r\n    }\r\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\r\n    }\r\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\r\n    }\r\n    public visitList<T extends type.List>({ typeId }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase() };\r\n    }\r\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase() };\r\n    }\r\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\r\n        return {\r\n            'name': ArrowType[typeId].toLowerCase(),\r\n            'mode': UnionMode[mode],\r\n            'typeIds': [...typeIds]\r\n        };\r\n    }\r\n    public visitDictionary<T extends type.Dictionary>(node: T) {\r\n        return this.visit(node.dictionary);\r\n    }\r\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\r\n    }\r\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\r\n    }\r\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\r\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { BN } from '../util/bn';\r\nimport { Column } from '../column';\r\nimport { Vector } from '../vector';\r\nimport { Visitor } from '../visitor';\r\nimport { BufferType } from '../enum';\r\nimport { RecordBatch } from '../recordbatch';\r\nimport { VectorType as V } from '../interfaces';\r\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\r\nimport { iterateBits, getBit, getBool } from '../util/bit';\r\nimport { selectColumnChildrenArgs } from '../util/args';\r\nimport {\r\n    DataType,\r\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n} from '../type';\r\n\r\n/** @ignore */\r\nexport interface JSONVectorAssembler extends Visitor {\r\n\r\n    visit     <T extends Column>  (node: T  ): object;\r\n    visitMany <T extends Column>  (cols: T[]): object[];\r\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\r\n\r\n    visitNull                 <T extends Null>            (vector: V<T>): { };\r\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\r\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\r\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\r\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[], OFFSET: number[] };\r\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[], OFFSET: number[] };\r\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\r\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\r\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\r\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\r\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\r\n    visitList                 <T extends List>            (vector: V<T>): { children: any[], OFFSET: number[] };\r\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\r\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[], TYPE: number[],  };\r\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\r\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\r\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\r\n}\r\n\r\n/** @ignore */\r\nexport class JSONVectorAssembler extends Visitor {\r\n\r\n    /** @nocollapse */\r\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\r\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\r\n    }\r\n\r\n    public visit<T extends Column>(column: T) {\r\n        const { data, name, length } = column;\r\n        const { offset, nullCount, nullBitmap } = data;\r\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\r\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\r\n        return {\r\n            'name': name,\r\n            'count': length,\r\n            'VALIDITY': DataType.isNull(type) ? undefined\r\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\r\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\r\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\r\n        };\r\n    }\r\n    public visitNull() { return {}; }\r\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\r\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\r\n    }\r\n    public visitInt<T extends Int>(vector: V<T>) {\r\n        return {\r\n            'DATA': vector.type.bitWidth < 64\r\n                ? [...vector.values]\r\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\r\n        };\r\n    }\r\n    public visitFloat<T extends Float>(vector: V<T>) {\r\n        return { 'DATA': [...vector.values] };\r\n    }\r\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\r\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\r\n    }\r\n    public visitBinary<T extends Binary>(vector: V<T>) {\r\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\r\n    }\r\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\r\n        return { 'DATA': [...binaryToString(vector)] };\r\n    }\r\n    public visitDate<T extends Date_>(vector: V<T>) {\r\n        return {\r\n            'DATA': vector.type.unit === DateUnit.DAY\r\n                ? [...vector.values]\r\n                : [...bigNumsToStrings(vector.values, 2)]\r\n        };\r\n    }\r\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\r\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\r\n    }\r\n    public visitTime<T extends Time>(vector: V<T>) {\r\n        return {\r\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\r\n                ? [...vector.values]\r\n                : [...bigNumsToStrings(vector.values, 2)]\r\n        };\r\n    }\r\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\r\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\r\n    }\r\n    public visitList<T extends List>(vector: V<T>) {\r\n        return {\r\n            'OFFSET': [...vector.valueOffsets],\r\n            'children': vector.type.children.map((f, i) =>\r\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\r\n        };\r\n    }\r\n    public visitStruct<T extends Struct>(vector: V<T>) {\r\n        return {\r\n            'children': vector.type.children.map((f, i) =>\r\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\r\n        };\r\n    }\r\n    public visitUnion<T extends Union>(vector: V<T>) {\r\n        return {\r\n            'TYPE': [...vector.typeIds],\r\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\r\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\r\n        };\r\n    }\r\n    public visitInterval<T extends Interval>(vector: V<T>) {\r\n        return { 'DATA': [...vector.values] };\r\n    }\r\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\r\n        return {\r\n            'children': vector.type.children.map((f, i) =>\r\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\r\n        };\r\n    }\r\n    public visitMap<T extends Map_>(vector: V<T>) {\r\n        return {\r\n            'OFFSET': [...vector.valueOffsets],\r\n            'children': vector.type.children.map((f, i) =>\r\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\r\n        };\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\r\n    for (const octets of vector as Iterable<Uint8Array>) {\r\n        yield octets.reduce((str, byte) => {\r\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\r\n        }, '').toUpperCase();\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\r\n    for (let i = -1, n = values.length / stride; ++i < n;) {\r\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Table } from '../table';\r\nimport { MAGIC } from './message';\r\nimport { Vector } from '../vector';\r\nimport { Column } from '../column';\r\nimport { DataType } from '../type';\r\nimport { Schema, Field } from '../schema';\r\nimport { Message } from './metadata/message';\r\nimport * as metadata from './metadata/message';\r\nimport { FileBlock, Footer } from './metadata/file';\r\nimport { MessageHeader, MetadataVersion } from '../enum';\r\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\r\nimport { VectorAssembler } from '../visitor/vectorassembler';\r\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\r\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\r\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\r\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\r\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\r\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\r\n\r\nexport interface RecordBatchStreamWriterOptions {\r\n    /**\r\n     *\r\n     */\r\n    autoDestroy?: boolean;\r\n    /**\r\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\r\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\r\n     * length instead of 8.\r\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\r\n     */\r\n    writeLegacyIpcFormat?: boolean;\r\n}\r\n\r\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\r\n\r\n    /** @nocollapse */\r\n    // @ts-ignore\r\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\r\n        throw new Error(`\"throughNode\" not available in this environment`);\r\n    }\r\n    /** @nocollapse */\r\n    public static throughDOM<T extends { [key: string]: DataType }>(\r\n        // @ts-ignore\r\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\r\n        // @ts-ignore\r\n        readableStrategy?: { highWaterMark?: number, size?: any }\r\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\r\n        throw new Error(`\"throughDOM\" not available in this environment`);\r\n    }\r\n\r\n    constructor(options?: RecordBatchStreamWriterOptions) {\r\n        super();\r\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\r\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\r\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\r\n    }\r\n\r\n    protected _position = 0;\r\n    protected _started = false;\r\n    protected _autoDestroy: boolean;\r\n    protected _writeLegacyIpcFormat: boolean;\r\n    // @ts-ignore\r\n    protected _sink = new AsyncByteQueue();\r\n    protected _schema: Schema | null = null;\r\n    protected _dictionaryBlocks: FileBlock[] = [];\r\n    protected _recordBatchBlocks: FileBlock[] = [];\r\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\r\n\r\n    public toString(sync: true): string;\r\n    public toString(sync?: false): Promise<string>;\r\n    public toString(sync: any = false) {\r\n        return this._sink.toString(sync) as Promise<string> | string;\r\n    }\r\n    public toUint8Array(sync: true): Uint8Array;\r\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\r\n    public toUint8Array(sync: any = false) {\r\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\r\n    }\r\n\r\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\r\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\r\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\r\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\r\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\r\n        if (isPromise<any>(input)) {\r\n            return input.then((x) => this.writeAll(x));\r\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\r\n            return writeAllAsync(this, input);\r\n        }\r\n        return writeAll(this, <any> input);\r\n    }\r\n\r\n    public get closed() { return this._sink.closed; }\r\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\r\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\r\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\r\n\r\n    public close() {\r\n        return this.reset()._sink.close();\r\n    }\r\n    public abort(reason?: any) {\r\n        return this.reset()._sink.abort(reason);\r\n    }\r\n    public finish() {\r\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\r\n        return this;\r\n    }\r\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\r\n\r\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\r\n            this._sink = sink as AsyncByteQueue;\r\n        } else {\r\n            this._sink = new AsyncByteQueue();\r\n            if (sink && isWritableDOMStream(sink)) {\r\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\r\n            } else if (sink && isWritableNodeStream(sink)) {\r\n                this.toNodeStream({ objectMode: false }).pipe(sink);\r\n            }\r\n        }\r\n\r\n        if (this._started && this._schema) {\r\n            this._writeFooter(this._schema);\r\n        }\r\n\r\n        this._started = false;\r\n        this._dictionaryBlocks = [];\r\n        this._recordBatchBlocks = [];\r\n        this._dictionaryDeltaOffsets = new Map();\r\n\r\n        if (!schema || !(schema.compareTo(this._schema))) {\r\n            if (schema === null) {\r\n                this._position = 0;\r\n                this._schema = null;\r\n            } else {\r\n                this._started = true;\r\n                this._schema = schema;\r\n                this._writeSchema(schema);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\r\n\r\n        let schema: Schema<T> | null = null;\r\n\r\n        if (!this._sink) {\r\n            throw new Error(`RecordBatchWriter is closed`);\r\n        } else if (payload === null || payload === undefined) {\r\n            return this.finish() && undefined;\r\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\r\n            return this.finish() && undefined;\r\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\r\n            return this.finish() && undefined;\r\n        }\r\n\r\n        if (schema && !schema.compareTo(this._schema)) {\r\n            if (this._started && this._autoDestroy) {\r\n                return this.close();\r\n            }\r\n            this.reset(this._sink, schema);\r\n        }\r\n\r\n        if (payload instanceof RecordBatch) {\r\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\r\n                this._writeRecordBatch(payload);\r\n            }\r\n        } else if (payload instanceof Table) {\r\n            this.writeAll(payload.chunks);\r\n        } else if (isIterable(payload)) {\r\n            this.writeAll(payload);\r\n        }\r\n    }\r\n\r\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\r\n\r\n        const a = alignment - 1;\r\n        const buffer = Message.encode(message);\r\n        const flatbufferSize = buffer.byteLength;\r\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\r\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\r\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\r\n\r\n        if (message.headerType === MessageHeader.RecordBatch) {\r\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\r\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\r\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\r\n        }\r\n\r\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\r\n        if (!this._writeLegacyIpcFormat) {\r\n            this._write(Int32Array.of(-1));\r\n        }\r\n        // Write the flatbuffer size prefix including padding\r\n        this._write(Int32Array.of(alignedSize - prefixSize));\r\n        // Write the flatbuffer\r\n        if (flatbufferSize > 0) { this._write(buffer); }\r\n        // Write any padding\r\n        return this._writePadding(nPaddingBytes);\r\n    }\r\n\r\n    protected _write(chunk: ArrayBufferViewInput) {\r\n        if (this._started) {\r\n            const buffer = toUint8Array(chunk);\r\n            if (buffer && buffer.byteLength > 0) {\r\n                this._sink.write(buffer);\r\n                this._position += buffer.byteLength;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected _writeSchema(schema: Schema<T>) {\r\n        return this._writeMessage(Message.from(schema));\r\n    }\r\n\r\n    // @ts-ignore\r\n    protected _writeFooter(schema: Schema<T>) {\r\n        // eos bytes\r\n        return this._writeLegacyIpcFormat\r\n            ? this._write(Int32Array.of(0))\r\n            : this._write(Int32Array.of(-1, 0));\r\n    }\r\n\r\n    protected _writeMagic() {\r\n        return this._write(MAGIC);\r\n    }\r\n\r\n    protected _writePadding(nBytes: number) {\r\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\r\n    }\r\n\r\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\r\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\r\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\r\n        const message = Message.from(recordBatch, byteLength);\r\n        return this\r\n            ._writeDictionaries(batch)\r\n            ._writeMessage(message)\r\n            ._writeBodyBuffers(buffers);\r\n    }\r\n\r\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\r\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\r\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\r\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\r\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\r\n        const message = Message.from(dictionaryBatch, byteLength);\r\n        return this\r\n            ._writeMessage(message)\r\n            ._writeBodyBuffers(buffers);\r\n    }\r\n\r\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\r\n        let buffer: ArrayBufferView;\r\n        let size: number, padding: number;\r\n        for (let i = -1, n = buffers.length; ++i < n;) {\r\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\r\n                this._write(buffer);\r\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\r\n                    this._writePadding(padding);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected _writeDictionaries(batch: RecordBatch<T>) {\r\n        for (let [id, dictionary] of batch.dictionaries) {\r\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\r\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\r\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\r\n                for (const chunk of chunks) {\r\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\r\n                    offset += chunk.length;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\r\n    /** @nocollapse */\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\r\n        const writer = new RecordBatchStreamWriter<T>(options);\r\n        if (isPromise<any>(input)) {\r\n            return input.then((x) => writer.writeAll(x));\r\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\r\n            return writeAllAsync(writer, input);\r\n        }\r\n        return writeAll(writer, input);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\r\n    /** @nocollapse */\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\r\n        const writer = new RecordBatchFileWriter<T>();\r\n        if (isPromise<any>(input)) {\r\n            return input.then((x) => writer.writeAll(x));\r\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\r\n            return writeAllAsync(writer, input);\r\n        }\r\n        return writeAll(writer, input);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this._autoDestroy = true;\r\n    }\r\n\r\n    // @ts-ignore\r\n    protected _writeSchema(schema: Schema<T>) {\r\n        return this._writeMagic()._writePadding(2);\r\n    }\r\n\r\n    protected _writeFooter(schema: Schema<T>) {\r\n        const buffer = Footer.encode(new Footer(\r\n            schema, MetadataVersion.V4,\r\n            this._recordBatchBlocks, this._dictionaryBlocks\r\n        ));\r\n        return super\r\n            ._writeFooter(schema) // EOS bytes for sequential readers\r\n            ._write(buffer) // Write the flatbuffer\r\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\r\n            ._writeMagic(); // then the magic suffix\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\r\n\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\r\n    // @ts-ignore\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\r\n    /** @nocollapse */\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\r\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\r\n    }\r\n\r\n    private _recordBatches: RecordBatch[];\r\n    private _dictionaries: RecordBatch[];\r\n\r\n    constructor() {\r\n        super();\r\n        this._autoDestroy = true;\r\n        this._recordBatches = [];\r\n        this._dictionaries = [];\r\n    }\r\n\r\n    protected _writeMessage() { return this; }\r\n    // @ts-ignore\r\n    protected _writeFooter(schema: Schema<T>) { return this; }\r\n    protected _writeSchema(schema: Schema<T>) {\r\n        return this._write(`{\\n  \"schema\": ${\r\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\r\n        }`);\r\n    }\r\n    protected _writeDictionaries(batch: RecordBatch<T>) {\r\n        if (batch.dictionaries.size > 0) {\r\n            this._dictionaries.push(batch);\r\n        }\r\n        return this;\r\n    }\r\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\r\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\r\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\r\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\r\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\r\n        return this;\r\n    }\r\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\r\n        this._writeDictionaries(batch);\r\n        this._recordBatches.push(batch);\r\n        return this;\r\n    }\r\n    public close() {\r\n\r\n        if (this._dictionaries.length > 0) {\r\n            this._write(`,\\n  \"dictionaries\": [\\n`);\r\n            for (const batch of this._dictionaries) {\r\n                super._writeDictionaries(batch);\r\n            }\r\n            this._write(`\\n  ]`);\r\n        }\r\n\r\n        if (this._recordBatches.length > 0) {\r\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\r\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\r\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\r\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\r\n            }\r\n            this._write(`\\n  ]`);\r\n        }\r\n\r\n        if (this._schema) {\r\n            this._write(`\\n}`);\r\n        }\r\n\r\n        this._dictionaries = [];\r\n        this._recordBatches = [];\r\n\r\n        return super.close();\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\r\n    let chunks = input as Iterable<RecordBatch<T>>;\r\n    if (input instanceof Table) {\r\n        chunks = input.chunks;\r\n        writer.reset(undefined, input.schema);\r\n    }\r\n    for (const batch of chunks) {\r\n        writer.write(batch);\r\n    }\r\n    return writer.finish();\r\n}\r\n\r\n/** @ignore */\r\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\r\n    for await (const batch of batches) {\r\n        writer.write(batch);\r\n    }\r\n    return writer.finish();\r\n}\r\n\r\n/** @ignore */\r\nfunction fieldToJSON({ name, type, nullable }: Field): object {\r\n    const assembler = new JSONTypeAssembler();\r\n    return {\r\n        'name': name, 'nullable': nullable,\r\n        'type': assembler.visit(type),\r\n        'children': (type.children || []).map(fieldToJSON),\r\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\r\n            'id': type.id,\r\n            'isOrdered': type.isOrdered,\r\n            'indexType': assembler.visit(type.indices)\r\n        }\r\n    };\r\n}\r\n\r\n/** @ignore */\r\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\r\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\r\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\r\n    return JSON.stringify({\r\n        'id': id,\r\n        'isDelta': isDelta,\r\n        'data': {\r\n            'count': dictionary.length,\r\n            'columns': columns\r\n        }\r\n    }, null, 2);\r\n}\r\n\r\n/** @ignore */\r\nfunction recordBatchToJSON(records: RecordBatch) {\r\n    return JSON.stringify({\r\n        'count': records.length,\r\n        'columns': JSONVectorAssembler.assemble(records)\r\n    }, null, 2);\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Column } from '../column';\r\nimport { Vector } from '../vector';\r\nimport { DataType } from '../type';\r\nimport { Data, Buffers } from '../data';\r\nimport { Schema, Field } from '../schema';\r\nimport { Chunked } from '../vector/chunked';\r\nimport { RecordBatch } from '../recordbatch';\r\n\r\nconst noopBuf = new Uint8Array(0);\r\nconst nullBufs = (bitmapLength: number) => <unknown> [\r\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\r\n] as Buffers<any>;\r\n\r\n/** @ignore */\r\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\r\n    schema: Schema<T>,\r\n    chunks: Data<T[keyof T]>[],\r\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\r\n) {\r\n    let data: Data<T[keyof T]>;\r\n    let field: Field<T[keyof T]>;\r\n    let i = -1, n = chunks.length;\r\n    const fields = [...schema.fields];\r\n    const batchData = [] as Data<T[keyof T]>[];\r\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\r\n    while (++i < n) {\r\n        if ((data = chunks[i]) && data.length === batchLength) {\r\n            batchData[i] = data;\r\n        } else {\r\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\r\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\r\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\r\n        }\r\n    }\r\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\r\n}\r\n\r\n/** @ignore */\r\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\r\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\r\n}\r\n\r\n/** @ignore */\r\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\r\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\r\n}\r\n\r\n/** @ignore */\r\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\r\n\r\n    const fields = [...schema.fields];\r\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\r\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\r\n\r\n    let numBatches = 0, batchLength = 0;\r\n    let i: number = -1, numColumns = columns.length;\r\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\r\n\r\n    while (memo.numBatches-- > 0) {\r\n\r\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\r\n            childData[i] = child = columns[i].shift()!;\r\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\r\n        }\r\n\r\n        if (isFinite(batchLength)) {\r\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\r\n            if (batchLength > 0) {\r\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\r\n            }\r\n        }\r\n    }\r\n    return [\r\n        schema = new Schema<T>(fields, schema.metadata),\r\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\r\n    ];\r\n}\r\n\r\n/** @ignore */\r\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\r\n    let data: Data<T[keyof T]>;\r\n    let field: Field<T[keyof T]>;\r\n    let length = 0, i = -1, n = columns.length;\r\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\r\n    while (++i < n) {\r\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\r\n            if (length === batchLength) {\r\n                childData[i] = data;\r\n            } else {\r\n                childData[i] = data.slice(0, batchLength);\r\n                data = data.slice(batchLength, length - batchLength);\r\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\r\n            }\r\n        } else {\r\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\r\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\r\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\r\n        }\r\n    }\r\n    return childData;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Type } from '../enum';\r\nimport { DataType } from '../type';\r\nimport { Chunked } from './chunked';\r\nimport { clampRange } from '../util/vector';\r\nimport { VectorType as V } from '../interfaces';\r\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\r\n\r\n/** @ignore */\r\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\r\n    slice(begin?: number, end?: number): V<T>;\r\n    concat(...others: Vector<T>[]): Chunked<T>;\r\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\r\n}\r\n\r\n/** @ignore */\r\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\r\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\r\n\r\n    protected _children?: Vector[];\r\n\r\n    constructor(data: Data<T>, children?: Vector[]) {\r\n        super();\r\n        this._children = children;\r\n        this.numChildren = data.childData.length;\r\n        this._bindDataAccessors(this.data = data);\r\n    }\r\n\r\n    public readonly data: Data<T>;\r\n    public readonly numChildren: number;\r\n\r\n    public get type() { return this.data.type; }\r\n    public get typeId() { return this.data.typeId; }\r\n    public get length() { return this.data.length; }\r\n    public get offset() { return this.data.offset; }\r\n    public get stride() { return this.data.stride; }\r\n    public get nullCount() { return this.data.nullCount; }\r\n    public get byteLength() { return this.data.byteLength; }\r\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\r\n\r\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\r\n\r\n    public get values() { return this.data.values; }\r\n    public get typeIds() { return this.data.typeIds; }\r\n    public get nullBitmap() { return this.data.nullBitmap; }\r\n    public get valueOffsets() { return this.data.valueOffsets; }\r\n\r\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\r\n\r\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\r\n        return Vector.new<R>(data, children) as any;\r\n    }\r\n\r\n    public concat(...others: Vector<T>[]) {\r\n        return Chunked.concat<T>(this, ...others);\r\n    }\r\n\r\n    public slice(begin?: number, end?: number) {\r\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\r\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\r\n        // slice(-1, 5) or slice(5, -1)\r\n        return clampRange(this, begin, end, this._sliceInternal);\r\n    }\r\n\r\n    public isValid(index: number): boolean {\r\n        if (this.nullCount > 0) {\r\n            const idx = this.offset + index;\r\n            const val = this.nullBitmap[idx >> 3];\r\n            const mask = (val & (1 << (idx % 8)));\r\n            return mask !== 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\r\n        return index < 0 || index >= this.numChildren ? null : (\r\n            (this._children || (this._children = []))[index] ||\r\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\r\n        ) as Vector<R>;\r\n    }\r\n\r\n    public toJSON(): any { return [...this]; }\r\n\r\n    protected _sliceInternal(self: this, begin: number, end: number) {\r\n        return self.clone(self.data.slice(begin, end - begin), null!);\r\n    }\r\n\r\n    // @ts-ignore\r\n    protected _bindDataAccessors(data: Data<T>) {\r\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\r\n    }\r\n}\r\n\r\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector';\r\nimport { BaseVector } from './base';\r\nimport { Binary, Utf8 } from '../type';\r\n\r\n/** @ignore */\r\nexport class BinaryVector extends BaseVector<Binary> {\r\n    public asUtf8() {\r\n        return Vector.new(this.data.clone(new Utf8()));\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Bool } from '../type';\r\nimport { Chunked } from './chunked';\r\nimport { BaseVector } from './base';\r\nimport { VectorBuilderOptions } from './index';\r\nimport { vectorFromValuesWithType } from './index';\r\nimport { VectorBuilderOptionsAsync } from './index';\r\n\r\n/** @ignore */\r\nexport class BoolVector extends BaseVector<Bool> {\r\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\r\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\r\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, boolean | TNull>): Chunked<Bool>;\r\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, boolean | TNull>): Promise<Chunked<Bool>>;\r\n    /** @nocollapse */\r\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, boolean | TNull> | VectorBuilderOptionsAsync<Bool, boolean | TNull>) {\r\n        return vectorFromValuesWithType(() => new Bool(), input);\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { DateUnit } from '../enum';\r\nimport { Chunked } from './chunked';\r\nimport { BaseVector } from './base';\r\nimport { VectorType as V } from '../interfaces';\r\nimport { VectorBuilderOptions } from './index';\r\nimport { vectorFromValuesWithType } from './index';\r\nimport { VectorBuilderOptionsAsync } from './index';\r\nimport { Date_, DateDay, DateMillisecond  } from '../type';\r\n\r\n/** @ignore */\r\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\r\n\r\n/** @ignore */\r\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\r\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\r\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\r\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\r\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\r\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, Date | TNull>): Chunked<T>;\r\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, Date | TNull>): Promise<Chunked<T>>;\r\n    /** @nocollapse */\r\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, Date | TNull> | VectorBuilderOptionsAsync<T, Date | TNull>]) {\r\n        if (args.length === 2) {\r\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\r\n        }\r\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class DateDayVector extends DateVector<DateDay> {}\r\n\r\n/** @ignore */\r\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Decimal } from '../type';\r\nimport { BaseVector } from './base';\r\n\r\n/** @ignore */\r\nexport class DecimalVector extends BaseVector<Decimal> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Vector } from '../vector';\r\nimport { BaseVector } from './base';\r\nimport { VectorType as V } from '../interfaces';\r\nimport { VectorBuilderOptions } from './index';\r\nimport { vectorFromValuesWithType } from './index';\r\nimport { VectorBuilderOptionsAsync } from './index';\r\nimport { DataType, Dictionary, TKeys } from '../type';\r\n\r\n/** @ignore */\r\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\r\n\r\n/** @ignore */\r\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\r\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\r\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\r\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\r\n    /** @nocollapse */\r\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\r\n        if (args.length === 3) {\r\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\r\n            const type = new Dictionary(values.type, indices, null, null);\r\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\r\n        }\r\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\r\n    }\r\n\r\n    constructor(data: Data<Dictionary<T, TKey>>) {\r\n        super(data);\r\n        this.indices = Vector.new(data.clone(this.type.indices));\r\n    }\r\n\r\n    public readonly indices: V<TKey>;\r\n\r\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\r\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\r\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\r\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\r\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\r\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\r\n}\r\n\r\n(DictionaryVector.prototype as any).indices = null;\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { BaseVector } from './base';\r\nimport { FixedSizeBinary } from '../type';\r\n\r\n/** @ignore */\r\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { BaseVector } from './base';\r\nimport { DataType, FixedSizeList } from '../type';\r\n\r\n/** @ignore */\r\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Vector } from '../vector';\r\nimport { Chunked } from './chunked';\r\nimport { BaseVector } from './base';\r\nimport { VectorBuilderOptions } from './index';\r\nimport { vectorFromValuesWithType } from './index';\r\nimport { VectorBuilderOptionsAsync } from './index';\r\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\r\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\r\n\r\n/** @ignore */\r\ntype FloatVectorConstructors =\r\n    typeof FloatVector   |\r\n    typeof Float16Vector |\r\n    typeof Float32Vector |\r\n    typeof Float64Vector ;\r\n\r\n/** @ignore */\r\ntype FromInput<T extends Float, TNull = any> =\r\n    FloatArray                          |\r\n    Iterable<T['TValue'] | TNull>       |\r\n    AsyncIterable<T['TValue'] | TNull>  |\r\n    VectorBuilderOptions<T, TNull>      |\r\n    VectorBuilderOptionsAsync<T, TNull> ;\r\n\r\n/** @ignore */\r\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\r\n\r\n/** @ignore */\r\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\r\n\r\n    // Guaranteed zero-copy variants\r\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\r\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\r\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\r\n\r\n    // Zero-copy if input is a TypedArray of the same type as the\r\n    // Vector that from is called on, otherwise uses the Builders\r\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\r\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\r\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\r\n\r\n    // Not zero-copy\r\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\r\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\r\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\r\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\r\n    /** @nocollapse */\r\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\r\n\r\n        let ArrowType = vectorTypeToDataType(this);\r\n\r\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\r\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\r\n            // Special case, infer the Arrow DataType from the input if calling the base\r\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\r\n            if (ArrowType === null) {\r\n                ArrowType = InputType;\r\n            }\r\n            // If the DataType inferred from the Vector constructor matches the\r\n            // DataType inferred from the input arguments, return zero-copy view\r\n            if (ArrowType && ArrowType === InputType) {\r\n                let type = new ArrowType();\r\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\r\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\r\n                // let the Float16Builder handle casting the input values to Uint16s.\r\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\r\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (ArrowType) {\r\n            // If the DataType inferred from the Vector constructor is different than\r\n            // the DataType inferred from the input TypedArray, or if input isn't a\r\n            // TypedArray, use the Builders to construct the result Vector\r\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\r\n        }\r\n\r\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\r\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\r\n        }\r\n\r\n        throw new TypeError('Unrecognized FloatVector input');\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Float16Vector extends FloatVector<Float16> {\r\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\r\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\r\n    // extra compute or copies if you're calling `toArray()` in order to create\r\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\r\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\r\n    // and clamp to the desired byte lengths.\r\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\r\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\r\n}\r\n\r\n/** @ignore */\r\nexport class Float32Vector extends FloatVector<Float32> {}\r\n/** @ignore */\r\nexport class Float64Vector extends FloatVector<Float64> {}\r\n\r\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\r\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\r\n};\r\n\r\n/** @ignore */\r\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\r\n    switch (ctor) {\r\n        case Uint16Array:    return Float16;\r\n        case Float32Array:   return Float32;\r\n        case Float64Array:   return Float64;\r\n        default: return null;\r\n    }\r\n};\r\n\r\n/** @ignore */\r\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\r\n    switch (ctor) {\r\n        case Float16Vector: return Float16;\r\n        case Float32Vector: return Float32;\r\n        case Float64Vector: return Float64;\r\n        default: return null;\r\n    }\r\n};\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { BaseVector } from './base';\r\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\r\n\r\n/** @ignore */\r\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\r\n/** @ignore */\r\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\r\n/** @ignore */\r\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Vector } from '../vector';\r\nimport { Chunked } from './chunked';\r\nimport { BaseVector } from './base';\r\nimport { VectorBuilderOptions } from './index';\r\nimport { vectorFromValuesWithType } from './index';\r\nimport { VectorBuilderOptionsAsync } from './index';\r\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\r\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\r\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\r\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\r\n\r\n/** @ignore */\r\ntype IntVectorConstructors =\r\n    typeof IntVector    |\r\n    typeof Int8Vector   |\r\n    typeof Int16Vector  |\r\n    typeof Int32Vector  |\r\n    typeof Uint8Vector  |\r\n    typeof Uint16Vector |\r\n    typeof Uint32Vector |\r\n    typeof Int64Vector  |\r\n    typeof Uint64Vector ;\r\n\r\n/** @ignore */\r\ntype FromInput<T extends Int, TNull = any> =\r\n    IntArray | BigIntArray              |\r\n    Iterable<T['TValue'] | TNull>       |\r\n    AsyncIterable<T['TValue'] | TNull>  |\r\n    VectorBuilderOptions<T, TNull>      |\r\n    VectorBuilderOptionsAsync<T, TNull> ;\r\n\r\n/** @ignore */\r\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\r\n\r\n/** @ignore */\r\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\r\n\r\n/** @ignore */\r\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\r\n\r\n    // Guaranteed zero-copy variants\r\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\r\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\r\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\r\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\r\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\r\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\r\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\r\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\r\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\r\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\r\n\r\n    // Zero-copy if input is a TypedArray of the same type as the\r\n    // Vector that from is called on, otherwise uses the Builders\r\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\r\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\r\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\r\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\r\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\r\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\r\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\r\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\r\n\r\n    // Not zero-copy\r\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\r\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\r\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\r\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\r\n    /** @nocollapse */\r\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\r\n\r\n        let [input, is64bit = false] = args;\r\n        let ArrowType = vectorTypeToDataType(this, is64bit);\r\n\r\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\r\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\r\n            // Special case, infer the Arrow DataType from the input if calling the base\r\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\r\n            if (ArrowType === null) {\r\n                ArrowType = InputType;\r\n            }\r\n            // If the DataType inferred from the Vector constructor matches the\r\n            // DataType inferred from the input arguments, return zero-copy view\r\n            if (ArrowType && ArrowType === InputType) {\r\n                let type = new ArrowType();\r\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\r\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\r\n                if (convert32To64Bit(ArrowType, input.constructor)) {\r\n                    length *= 0.5;\r\n                }\r\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\r\n            }\r\n        }\r\n\r\n        if (ArrowType) {\r\n            // If the DataType inferred from the Vector constructor is different than\r\n            // the DataType inferred from the input TypedArray, or if input isn't a\r\n            // TypedArray, use the Builders to construct the result Vector\r\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\r\n        }\r\n\r\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\r\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\r\n        }\r\n\r\n        throw new TypeError('Unrecognized IntVector input');\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Int8Vector extends IntVector<Int8> {}\r\n/** @ignore */\r\nexport class Int16Vector extends IntVector<Int16> {}\r\n/** @ignore */\r\nexport class Int32Vector extends IntVector<Int32> {}\r\n/** @ignore */\r\nexport class Int64Vector extends IntVector<Int64> {\r\n    public toBigInt64Array() {\r\n        return toBigInt64Array(this.values);\r\n    }\r\n    // @ts-ignore\r\n    private _values64: BigInt64Array;\r\n    public get values64(): BigInt64Array {\r\n        return this._values64 || (this._values64 = this.toBigInt64Array());\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Uint8Vector extends IntVector<Uint8> {}\r\n/** @ignore */\r\nexport class Uint16Vector extends IntVector<Uint16> {}\r\n/** @ignore */\r\nexport class Uint32Vector extends IntVector<Uint32> {}\r\n/** @ignore */\r\nexport class Uint64Vector extends IntVector<Uint64> {\r\n    public toBigUint64Array() {\r\n        return toBigUint64Array(this.values);\r\n    }\r\n    // @ts-ignore\r\n    private _values64: BigUint64Array;\r\n    public get values64(): BigUint64Array {\r\n        return this._values64 || (this._values64 = this.toBigUint64Array());\r\n    }\r\n}\r\n\r\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\r\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\r\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\r\n};\r\n\r\n/** @ignore */\r\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\r\n    switch (ctor) {\r\n        case Int8Array:      return Int8;\r\n        case Int16Array:     return Int16;\r\n        case Int32Array:     return is64bit ? Int64 : Int32;\r\n        case BigInt64Array:  return Int64;\r\n        case Uint8Array:     return Uint8;\r\n        case Uint16Array:    return Uint16;\r\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\r\n        case BigUint64Array: return Uint64;\r\n        default: return null;\r\n    }\r\n};\r\n\r\n/** @ignore */\r\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\r\n    switch (ctor) {\r\n        case Int8Vector:   return Int8;\r\n        case Int16Vector:  return Int16;\r\n        case Int32Vector:  return is64bit ? Int64 : Int32;\r\n        case Int64Vector:  return Int64;\r\n        case Uint8Vector:  return Uint8;\r\n        case Uint16Vector: return Uint16;\r\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\r\n        case Uint64Vector: return Uint64;\r\n        default: return null;\r\n    }\r\n};\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { BaseVector } from './base';\r\nimport { DataType, List } from '../type';\r\n\r\n/** @ignore */\r\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { MapRow } from './row';\r\nimport { Field } from '../schema';\r\nimport { Vector } from '../vector';\r\nimport { BaseVector } from './base';\r\nimport { DataType, Map_, Struct, List } from '../type';\r\n\r\n/** @ignore */\r\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\r\n    public asList() {\r\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\r\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\r\n    }\r\n    public bind(index: number): Map_<K, V>['TValue'] {\r\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\r\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\r\n        return new MapRow(child!.slice(begin, end));\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Null } from '../type';\r\nimport { BaseVector } from './base';\r\n\r\n/** @ignore */\r\nexport class NullVector extends BaseVector<Null> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { StructRow } from './row';\r\nimport { BaseVector } from './base';\r\nimport { DataType, Struct } from '../type';\r\n\r\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\r\n/** @ignore */\r\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\r\n    // @ts-ignore\r\n    private _row: StructRow<T>;\r\n    public bind(index: number): Struct<T>['TValue'] {\r\n        const proto = this._row || (this._row = new StructRow<T>(this));\r\n        const bound = Object.create(proto);\r\n        bound[kRowIndex] = index;\r\n        return bound;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { BaseVector } from './base';\r\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\r\n\r\n/** @ignore */\r\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\r\n/** @ignore */\r\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\r\n/** @ignore */\r\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\r\n/** @ignore */\r\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\r\n/** @ignore */\r\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { BaseVector } from './base';\r\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\r\n\r\n/** @ignore */\r\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\r\n/** @ignore */\r\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\r\n/** @ignore */\r\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\r\n/** @ignore */\r\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\r\n/** @ignore */\r\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { BaseVector } from './base';\r\nimport { Union, DenseUnion, SparseUnion} from '../type';\r\n\r\n/** @ignore */\r\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\r\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\r\n}\r\n\r\n/** @ignore */\r\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\r\n    public get valueOffsets() { return this.data.valueOffsets!; }\r\n}\r\n\r\n/** @ignore */\r\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector';\r\nimport { Chunked } from './chunked';\r\nimport { BaseVector } from './base';\r\nimport { Binary, Utf8 } from '../type';\r\nimport { VectorBuilderOptions } from './index';\r\nimport { vectorFromValuesWithType } from './index';\r\nimport { VectorBuilderOptionsAsync } from './index';\r\n\r\n/** @ignore */\r\nexport class Utf8Vector extends BaseVector<Utf8> {\r\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\r\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\r\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, string | TNull>): Chunked<Utf8>;\r\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, string | TNull>): Promise<Chunked<Utf8>>;\r\n    /** @nocollapse */\r\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, string | TNull> | VectorBuilderOptionsAsync<Utf8, string | TNull>) {\r\n        return vectorFromValuesWithType(() => new Utf8(), input);\r\n    }\r\n    public asBinary() {\r\n        return Vector.new(this.data.clone(new Binary()));\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\n/** @ignore */\r\nexport function partial0<T>(visit: (node: T) => any) {\r\n    return function(this: T) { return visit(this); };\r\n}\r\n\r\n/** @ignore */\r\nexport function partial1<T>(visit: (node: T, a: any) => any) {\r\n    return function(this: T, a: any) { return visit(this, a); };\r\n}\r\n\r\n/** @ignore */\r\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\r\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { BN } from '../util/bn';\r\nimport { Visitor } from '../visitor';\r\nimport { decodeUtf8 } from '../util/utf8';\r\nimport { VectorType } from '../interfaces';\r\nimport { uint16ToFloat64 } from '../util/math';\r\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\r\nimport {\r\n    DataType, Dictionary,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n    Float, Float16, Float32, Float64,\r\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\r\n    Date_, DateDay, DateMillisecond,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Union, DenseUnion, SparseUnion,\r\n} from '../type';\r\n\r\n/** @ignore */\r\nexport interface GetVisitor extends Visitor {\r\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\r\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\r\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\r\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\r\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\r\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\r\n}\r\n\r\n/** @ignore */\r\nexport class GetVisitor extends Visitor {}\r\n\r\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\r\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\r\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\r\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\r\n\r\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\r\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\r\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\r\n\r\n/** @ignore */\r\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\r\n/** @ignore */\r\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\r\n    const { [index]: x, [index + 1]: y } = valueOffsets;\r\n    return x != null && y != null ? values.subarray(x, y) : null as any;\r\n};\r\n\r\n/** @ignore */\r\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\r\n    const idx = offset + index;\r\n    const byte = values[idx >> 3];\r\n    return (byte & 1 << (idx % 8)) !== 0;\r\n};\r\n\r\n/** @ignore */\r\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\r\n/** @ignore */\r\ntype Numeric2X = Int64 | Uint64;\r\n\r\n/** @ignore */\r\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\r\n/** @ignore */\r\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\r\n/** @ignore */\r\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\r\n/** @ignore */\r\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\r\n/** @ignore */\r\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\r\n/** @ignore */\r\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\r\n\r\n/** @ignore */\r\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\r\n/** @ignore */\r\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\r\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\r\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\r\n};\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\r\n    vector.type.bitWidth < 64\r\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\r\n        : getBigInts(vector as VectorType<Numeric2X>, index)\r\n);\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\r\n    vector.type.precision !== Precision.HALF\r\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\r\n        : getFloat16(vector as VectorType<Float16>, index)\r\n);\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\r\n    vector.type.unit === DateUnit.DAY\r\n        ? getDateDay(vector as VectorType<DateDay>, index)\r\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\r\n);\r\n\r\n/** @ignore */\r\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\r\n/** @ignore */\r\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\r\n/** @ignore */\r\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\r\n/** @ignore */\r\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\r\n    switch (vector.type.unit) {\r\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\r\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\r\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\r\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\r\n    }\r\n};\r\n\r\n/** @ignore */\r\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\r\n/** @ignore */\r\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\r\n/** @ignore */\r\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\r\n/** @ignore */\r\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\r\n    switch (vector.type.unit) {\r\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\r\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\r\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\r\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\r\n    }\r\n};\r\n\r\n/** @ignore */\r\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\r\n\r\n/** @ignore */\r\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\r\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\r\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\r\n};\r\n\r\n/** @ignore */\r\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\r\n    return vector.bind(index) as T['TValue'];\r\n};\r\n\r\n/** @ignore */\r\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\r\n    return vector.bind(index) as T['TValue'];\r\n};\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getUnion = <\r\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\r\n>(vector: V, index: number): V['TValue'] => {\r\n    return vector.type.mode === UnionMode.Dense ?\r\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\r\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\r\n};\r\n\r\n/** @ignore */\r\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\r\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\r\n    const child = vector.getChildAt(childIndex);\r\n    return child ? child.get(vector.valueOffsets[index]) : null;\r\n};\r\n\r\n/** @ignore */\r\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\r\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\r\n    const child = vector.getChildAt(childIndex);\r\n    return child ? child.get(index) : null;\r\n};\r\n\r\n/** @ignore */\r\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\r\n    return vector.getValue(vector.getKey(index)!);\r\n};\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\r\n    (vector.type.unit === IntervalUnit.DAY_TIME)\r\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\r\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\r\n\r\n/** @ignore */\r\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\r\n\r\n/** @ignore */\r\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\r\n    const interval = values[index];\r\n    const int32s = new Int32Array(2);\r\n    int32s[0] = interval / 12 | 0; /* years */\r\n    int32s[1] = interval % 12 | 0; /* months */\r\n    return int32s;\r\n};\r\n\r\n/** @ignore */\r\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\r\n    const child = vector.getChildAt(0)!, { stride } = vector;\r\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\r\n};\r\n\r\nGetVisitor.prototype.visitNull                 =                 getNull;\r\nGetVisitor.prototype.visitBool                 =                 getBool;\r\nGetVisitor.prototype.visitInt                  =                  getInt;\r\nGetVisitor.prototype.visitInt8                 =              getNumeric;\r\nGetVisitor.prototype.visitInt16                =              getNumeric;\r\nGetVisitor.prototype.visitInt32                =              getNumeric;\r\nGetVisitor.prototype.visitInt64                =              getBigInts;\r\nGetVisitor.prototype.visitUint8                =              getNumeric;\r\nGetVisitor.prototype.visitUint16               =              getNumeric;\r\nGetVisitor.prototype.visitUint32               =              getNumeric;\r\nGetVisitor.prototype.visitUint64               =              getBigInts;\r\nGetVisitor.prototype.visitFloat                =                getFloat;\r\nGetVisitor.prototype.visitFloat16              =              getFloat16;\r\nGetVisitor.prototype.visitFloat32              =              getNumeric;\r\nGetVisitor.prototype.visitFloat64              =              getNumeric;\r\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\r\nGetVisitor.prototype.visitBinary               =               getBinary;\r\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\r\nGetVisitor.prototype.visitDate                 =                 getDate;\r\nGetVisitor.prototype.visitDateDay              =              getDateDay;\r\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\r\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\r\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\r\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\r\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\r\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\r\nGetVisitor.prototype.visitTime                 =                 getTime;\r\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\r\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\r\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\r\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\r\nGetVisitor.prototype.visitDecimal              =              getDecimal;\r\nGetVisitor.prototype.visitList                 =                 getList;\r\nGetVisitor.prototype.visitStruct               =               getStruct;\r\nGetVisitor.prototype.visitUnion                =                getUnion;\r\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\r\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\r\nGetVisitor.prototype.visitDictionary           =           getDictionary;\r\nGetVisitor.prototype.visitInterval             =             getInterval;\r\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\r\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\r\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\r\nGetVisitor.prototype.visitMap                  =                  getMap;\r\n\r\n/** @ignore */\r\nexport const instance = new GetVisitor();\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Type } from '../enum';\r\nimport { Visitor } from '../visitor';\r\nimport { VectorType } from '../interfaces';\r\nimport { getBool, iterateBits } from '../util/bit';\r\nimport { createElementComparator } from '../util/vector';\r\nimport {\r\n    DataType, Dictionary,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n    Float, Float16, Float32, Float64,\r\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\r\n    Date_, DateDay, DateMillisecond,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Union, DenseUnion, SparseUnion,\r\n} from '../type';\r\n\r\n/** @ignore */\r\nexport interface IndexOfVisitor extends Visitor {\r\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\r\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\r\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\r\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\r\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\r\n}\r\n\r\n/** @ignore */\r\nexport class IndexOfVisitor extends Visitor {}\r\n\r\n/** @ignore */\r\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\r\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\r\n    return searchElement === null && vector.length > 0 ? 0 : -1;\r\n}\r\n\r\n/** @ignore */\r\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\r\n    const { nullBitmap } = vector.data;\r\n    if (!nullBitmap || vector.nullCount <= 0) {\r\n        return -1;\r\n    }\r\n    let i = 0;\r\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\r\n        if (!isValid) { return i; }\r\n        ++i;\r\n    }\r\n    return -1;\r\n}\r\n\r\n/** @ignore */\r\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\r\n    if (searchElement === undefined) { return -1; }\r\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\r\n    const compare = createElementComparator(searchElement);\r\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\r\n        if (compare(vector.get(i))) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\n/** @ignore */\r\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\r\n    // Unions are special -- they do have a nullBitmap, but so can their children.\r\n    // If the searchElement is null, we don't know whether it came from the Union's\r\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\r\n    // since that will report the wrong index if a child has a null before the Union.\r\n    const compare = createElementComparator(searchElement);\r\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\r\n        if (compare(vector.get(i))) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\r\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\r\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\r\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\r\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\r\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\r\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\r\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\r\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\r\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\r\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\r\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\r\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\r\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\r\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\r\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\r\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\r\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\r\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\r\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\r\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\r\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\r\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\r\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\r\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\r\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\r\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\r\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\r\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\r\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\r\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\r\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\r\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\r\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\r\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\r\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\r\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\r\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\r\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\r\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\r\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\r\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\r\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\r\n\r\n/** @ignore */\r\nexport const instance = new IndexOfVisitor();\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Type } from '../enum';\r\nimport { Visitor } from '../visitor';\r\nimport { VectorType } from '../interfaces';\r\nimport { iterateBits } from '../util/bit';\r\nimport { instance as getVisitor } from './get';\r\nimport {\r\n    DataType, Dictionary,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n    Float, Float16, Float32, Float64,\r\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\r\n    Date_, DateDay, DateMillisecond,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Union, DenseUnion, SparseUnion,\r\n} from '../type';\r\n\r\n/** @ignore */\r\nexport interface IteratorVisitor extends Visitor {\r\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\r\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\r\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\r\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\r\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n}\r\n\r\n/** @ignore */\r\nexport class IteratorVisitor extends Visitor {}\r\n\r\n/** @ignore */\r\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\r\n    const getFn = getVisitor.getVisitFn(vector);\r\n    return iterateBits<T['TValue'] | null>(\r\n        vector.data.nullBitmap, vector.data.offset, vector.length, vector,\r\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\r\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\r\n    );\r\n}\r\n\r\n/** @ignore */\r\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\r\n\r\n    // If nullable, iterate manually\r\n    if (vector.nullCount > 0) {\r\n        return nullableIterator<T>(vector);\r\n    }\r\n\r\n    const { type, typeId, length } = vector;\r\n\r\n    // Fast case, defer to native iterators if possible\r\n    if (vector.stride === 1 && (\r\n        (typeId === Type.Timestamp) ||\r\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\r\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\r\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\r\n    )) {\r\n        return vector.data.values.subarray(0, length)[Symbol.iterator]();\r\n    }\r\n\r\n    // Otherwise, iterate manually\r\n    return (function* (getFn) {\r\n        for (let index = -1; ++index < length;) {\r\n            yield getFn(vector, index);\r\n        }\r\n    })(getVisitor.getVisitFn(vector));\r\n}\r\n\r\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\r\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\r\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\r\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\r\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\r\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\r\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\r\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\r\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\r\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\r\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\r\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\r\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\r\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\r\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\r\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\r\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\r\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\r\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\r\nIteratorVisitor.prototype.visitList                 = vectorIterator;\r\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\r\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\r\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\r\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\r\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\r\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\r\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\r\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\r\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\r\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\r\n\r\n/** @ignore */\r\nexport const instance = new IteratorVisitor();\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Type } from '../enum';\r\nimport { Visitor } from '../visitor';\r\nimport { VectorType } from '../interfaces';\r\nimport { instance as iteratorVisitor } from './iterator';\r\nimport {\r\n    DataType, Dictionary,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n    Float, Float16, Float32, Float64,\r\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\r\n    Date_, DateDay, DateMillisecond,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Union, DenseUnion, SparseUnion,\r\n} from '../type';\r\n\r\n/** @ignore */\r\nexport interface ToArrayVisitor extends Visitor {\r\n    visit<T extends VectorType>(node: T): T['TArray'];\r\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\r\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\r\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\r\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\r\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\r\n}\r\n\r\n/** @ignore */\r\nexport class ToArrayVisitor extends Visitor {}\r\n\r\n/** @ignore */\r\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\r\n\r\n    const { type, length, stride } = vector;\r\n\r\n    // Fast case, return subarray if possible\r\n    switch (type.typeId) {\r\n        case Type.Int:\r\n        case Type.Float: case Type.Decimal:\r\n        case Type.Time: case Type.Timestamp:\r\n            return vector.data.values.subarray(0, length * stride);\r\n    }\r\n\r\n    // Otherwise if not primitive, slow copy\r\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\r\n}\r\n\r\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\r\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\r\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\r\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\r\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\r\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\r\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\r\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\r\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\r\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\r\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\r\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\r\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\r\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\r\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\r\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\r\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\r\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\r\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\r\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\r\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\r\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\r\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\r\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\r\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\r\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\r\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\r\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\r\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\r\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\r\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\r\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\r\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\r\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\r\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\r\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\r\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\r\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\r\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\r\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\r\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\r\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\r\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\r\n\r\n/** @ignore */\r\nexport const instance = new ToArrayVisitor();\r\n","/* istanbul ignore file */\r\n\r\n// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Visitor } from '../visitor';\r\nimport { VectorType } from '../interfaces';\r\nimport { Type, TimeUnit } from '../enum';\r\nimport { Schema, Field } from '../schema';\r\nimport {\r\n    DataType, Dictionary,\r\n    Float, Int, Date_, Interval, Time, Timestamp,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\r\n    List, FixedSizeList, Map_, Struct, Union,\r\n} from '../type';\r\n\r\n/** @ignore */ const sum = (x: number, y: number) => x + y;\r\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\r\n\r\n/** @ignore */\r\nexport interface ByteWidthVisitor extends Visitor {\r\n    visit<T extends DataType>(node: T): number;\r\n    visitMany<T extends DataType>(nodes: T[]): number[];\r\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\r\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\r\n}\r\n\r\n/** @ignore */\r\nexport class ByteWidthVisitor extends Visitor {\r\n    public visitNull            (____: Null            ) { return 0; }\r\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\r\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\r\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\r\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\r\n    public visitBool            (____: Bool            ) { return 1 / 8; }\r\n    public visitDecimal         (____: Decimal         ) { return 16; }\r\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\r\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\r\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\r\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\r\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\r\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\r\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\r\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\r\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\r\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\r\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\r\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\r\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\r\n}\r\n\r\n/** @ignore */\r\nexport const instance = new ByteWidthVisitor();\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Type } from '../enum';\r\nimport { DataType } from '../type';\r\nimport { Visitor } from '../visitor';\r\nimport { VectorType, VectorCtor } from '../interfaces';\r\n\r\nimport { BinaryVector } from '../vector/binary';\r\nimport { BoolVector } from '../vector/bool';\r\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\r\nimport { DecimalVector } from '../vector/decimal';\r\nimport { DictionaryVector } from '../vector/dictionary';\r\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\r\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\r\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\r\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\r\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\r\nimport { ListVector } from '../vector/list';\r\nimport { MapVector } from '../vector/map';\r\nimport { NullVector } from '../vector/null';\r\nimport { StructVector } from '../vector/struct';\r\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\r\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\r\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\r\nimport { Utf8Vector } from '../vector/utf8';\r\n\r\n/** @ignore */\r\nexport interface GetVectorConstructor extends Visitor {\r\n    visit<T extends Type>(node: T): VectorCtor<T>;\r\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\r\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\r\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\r\n}\r\n\r\n/** @ignore */\r\nexport class GetVectorConstructor extends Visitor {\r\n    public visitNull                 () { return NullVector; }\r\n    public visitBool                 () { return BoolVector; }\r\n    public visitInt                  () { return IntVector; }\r\n    public visitInt8                 () { return Int8Vector; }\r\n    public visitInt16                () { return Int16Vector; }\r\n    public visitInt32                () { return Int32Vector; }\r\n    public visitInt64                () { return Int64Vector; }\r\n    public visitUint8                () { return Uint8Vector; }\r\n    public visitUint16               () { return Uint16Vector; }\r\n    public visitUint32               () { return Uint32Vector; }\r\n    public visitUint64               () { return Uint64Vector; }\r\n    public visitFloat                () { return FloatVector; }\r\n    public visitFloat16              () { return Float16Vector; }\r\n    public visitFloat32              () { return Float32Vector; }\r\n    public visitFloat64              () { return Float64Vector; }\r\n    public visitUtf8                 () { return Utf8Vector; }\r\n    public visitBinary               () { return BinaryVector; }\r\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\r\n    public visitDate                 () { return DateVector; }\r\n    public visitDateDay              () { return DateDayVector; }\r\n    public visitDateMillisecond      () { return DateMillisecondVector; }\r\n    public visitTimestamp            () { return TimestampVector; }\r\n    public visitTimestampSecond      () { return TimestampSecondVector; }\r\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\r\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\r\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\r\n    public visitTime                 () { return TimeVector; }\r\n    public visitTimeSecond           () { return TimeSecondVector; }\r\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\r\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\r\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\r\n    public visitDecimal              () { return DecimalVector; }\r\n    public visitList                 () { return ListVector; }\r\n    public visitStruct               () { return StructVector; }\r\n    public visitUnion                () { return UnionVector; }\r\n    public visitDenseUnion           () { return DenseUnionVector; }\r\n    public visitSparseUnion          () { return SparseUnionVector; }\r\n    public visitDictionary           () { return DictionaryVector; }\r\n    public visitInterval             () { return IntervalVector; }\r\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\r\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\r\n    public visitFixedSizeList        () { return FixedSizeListVector; }\r\n    public visitMap                  () { return MapVector; }\r\n}\r\n\r\n/** @ignore */\r\nexport const instance = new GetVectorConstructor();\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nexport { Vector } from '../vector';\r\nexport { BaseVector } from './base';\r\nexport { BinaryVector } from './binary';\r\nexport { BoolVector } from './bool';\r\nexport { Chunked } from './chunked';\r\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\r\nexport { DecimalVector } from './decimal';\r\nexport { DictionaryVector } from './dictionary';\r\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\r\nexport { FixedSizeListVector } from './fixedsizelist';\r\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\r\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\r\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\r\nexport { ListVector } from './list';\r\nexport { MapVector } from './map';\r\nexport { NullVector } from './null';\r\nexport { StructVector } from './struct';\r\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\r\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\r\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\r\nexport { Utf8Vector } from './utf8';\r\nexport { MapRow, StructRow } from './row';\r\n\r\nimport * as fn from '../util/fn';\r\nimport { Data } from '../data';\r\nimport { Type } from '../enum';\r\nimport { Vector } from '../vector';\r\nimport { DataType } from '../type';\r\nimport { Chunked } from './chunked';\r\nimport { BaseVector } from './base';\r\nimport { setBool } from '../util/bit';\r\nimport { isIterable, isAsyncIterable } from '../util/compat';\r\nimport { Builder, IterableBuilderOptions } from '../builder';\r\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\r\nimport { instance as getVisitor } from '../visitor/get';\r\nimport { instance as setVisitor } from '../visitor/set';\r\nimport { instance as indexOfVisitor } from '../visitor/indexof';\r\nimport { instance as toArrayVisitor } from '../visitor/toarray';\r\nimport { instance as iteratorVisitor } from '../visitor/iterator';\r\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\r\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\r\n\r\ndeclare module '../vector' {\r\n    namespace Vector {\r\n        export { newVector as new };\r\n        export { vectorFrom as from };\r\n    }\r\n}\r\n\r\ndeclare module './base' {\r\n    namespace BaseVector {\r\n        export { vectorFrom as from };\r\n    }\r\n    interface BaseVector<T extends DataType> {\r\n        get(index: number): T['TValue'] | null;\r\n        set(index: number, value: T['TValue'] | null): void;\r\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\r\n        toArray(): T['TArray'];\r\n        getByteWidth(): number;\r\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\r\n    }\r\n}\r\n\r\n/** @nocollapse */\r\nVector.new = newVector;\r\n\r\n/** @nocollapse */\r\nVector.from = vectorFrom;\r\n\r\n/** @ignore */\r\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\r\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\r\n}\r\n\r\n/** @ignore */\r\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\r\n/** @ignore */\r\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\r\n\r\n/** @ignore */\r\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\r\n    if (isIterable(input)) {\r\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\r\n    } else if (isAsyncIterable(input)) {\r\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\r\n    }\r\n    const {\r\n        'values': values = [],\r\n        'type': type = newDataType(),\r\n        'nullValues': nullValues = [null, undefined],\r\n    } = { ...input };\r\n    return isIterable(values)\r\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\r\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\r\n}\r\n\r\n/** @ignore */\r\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\r\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\r\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\r\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\r\n    if (isIterable<T['TValue'] | TNull>(values)) {\r\n        const chunks = [...Builder.throughIterable(options)(values)];\r\n        return (chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks)) as Vector<T>;\r\n    }\r\n    return (async (chunks: V<T>[]) => {\r\n        const transform = Builder.throughAsyncIterable(options);\r\n        for await (const chunk of transform(values)) {\r\n            chunks.push(chunk);\r\n        }\r\n        return (chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks)) as Vector<T>;\r\n    })([]);\r\n}\r\n\r\n//\r\n// We provide the following method implementations for code navigability purposes only.\r\n// They're overridden at runtime below with the specific Visitor implementation for each type,\r\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\r\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\r\n// you why the breakpoints you have already set are not being triggered. Have a great day!\r\n//\r\n\r\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\r\n    return getVisitor.visit(this, index);\r\n};\r\n\r\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\r\n    return setVisitor.visit(this, index, value);\r\n};\r\n\r\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\r\n    return indexOfVisitor.visit(this, value, fromIndex);\r\n};\r\n\r\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\r\n    return toArrayVisitor.visit(this);\r\n};\r\n\r\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\r\n    return byteWidthVisitor.visit(this.type);\r\n};\r\n\r\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\r\n    return iteratorVisitor.visit(this);\r\n};\r\n\r\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\r\n\r\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\r\n(Object.keys(Type) as any[])\r\n    .map((T: any) => Type[T] as any)\r\n    .filter((T: any): T is Type => typeof T === 'number')\r\n    .filter((typeId) => typeId !== Type.NONE)\r\n    .forEach((typeId) => {\r\n        const VectorCtor = getVectorConstructor.visit(typeId);\r\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\r\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\r\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\r\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\r\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\r\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\r\n    });\r\n\r\n/** @ignore */\r\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\r\n    return function(this: T) { return visit(this.type); };\r\n}\r\n\r\n/** @ignore */\r\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\r\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\r\n}\r\n\r\n/** @ignore */\r\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\r\n    return function(this: V, i: number, a: any) {\r\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\r\n            fn.call(this, i, a);\r\n        }\r\n    };\r\n}\r\n\r\n/** @ignore */\r\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\r\n    const nullBitmap = this.nullBitmap;\r\n    if (nullBitmap && nullBitmap.byteLength > 0) {\r\n        this.get = wrapNullableGet(this.get);\r\n        this.set = wrapNullableSet(this.set);\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from './data';\r\nimport { Column } from './column';\r\nimport { Schema, Field } from './schema';\r\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\r\nimport { DataFrame } from './compute/dataframe';\r\nimport { RecordBatchReader } from './ipc/reader';\r\nimport { DataType, RowLike, Struct } from './type';\r\nimport { selectColumnArgs, selectArgs } from './util/args';\r\nimport { Clonable, Sliceable, Applicative } from './vector';\r\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\r\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\r\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\r\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\r\n\r\ntype VectorMap = { [key: string]: Vector };\r\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\r\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\r\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\r\n\r\nexport interface Table<T extends { [key: string]: DataType } = any> {\r\n\r\n    get(index: number): Struct<T>['TValue'];\r\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\r\n\r\n    slice(begin?: number, end?: number): Table<T>;\r\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\r\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\r\n\r\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\r\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\r\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\r\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\r\n}\r\n\r\nexport class Table<T extends { [key: string]: DataType } = any>\r\n    extends Chunked<Struct<T>>\r\n    implements DataFrame<T>,\r\n               Clonable<Table<T>>,\r\n               Sliceable<Table<T>>,\r\n               Applicative<Struct<T>, Table<T>> {\r\n\r\n    /** @nocollapse */\r\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\r\n\r\n    public static from(): Table<{}>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\r\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\r\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\r\n    /** @nocollapse */\r\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\r\n\r\n        if (!input) { return Table.empty(); }\r\n\r\n        if (typeof input === 'object') {\r\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\r\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\r\n                                                    : null;\r\n            if (table !== null) { return table; }\r\n        }\r\n\r\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\r\n\r\n        if (isPromise<RecordBatchReader<T>>(reader)) {\r\n            return (async () => await Table.from(await reader))();\r\n        }\r\n        if (reader.isSync() && (reader = reader.open())) {\r\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\r\n        }\r\n        return (async (opening) => {\r\n            const reader = await opening;\r\n            const schema = reader.schema;\r\n            const batches: RecordBatch[] = [];\r\n            if (schema) {\r\n                for await (let batch of reader) {\r\n                    batches.push(batch);\r\n                }\r\n                return new Table<T>(schema, batches);\r\n            }\r\n            return Table.empty();\r\n        })(reader.open());\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\r\n        return await Table.from<T>(source as any);\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\r\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\r\n    }\r\n\r\n    /**\r\n     * @summary Create a new Table from a collection of Columns or Vectors,\r\n     * with an optional list of names or Fields.\r\n     *\r\n     *\r\n     * `Table.new` accepts an Object of\r\n     * Columns or Vectors, where the keys will be used as the field names\r\n     * for the Schema:\r\n     * ```ts\r\n     * const i32s = Int32Vector.from([1, 2, 3]);\r\n     * const f32s = Float32Vector.from([.1, .2, .3]);\r\n     * const table = Table.new({ i32: i32s, f32: f32s });\r\n     * assert(table.schema.fields[0].name === 'i32');\r\n     * ```\r\n     *\r\n     * It also accepts a a list of Vectors with an optional list of names or\r\n     * Fields for the resulting Schema. If the list is omitted or a name is\r\n     * missing, the numeric index of each Vector will be used as the name:\r\n     * ```ts\r\n     * const i32s = Int32Vector.from([1, 2, 3]);\r\n     * const f32s = Float32Vector.from([.1, .2, .3]);\r\n     * const table = Table.new([i32s, f32s], ['i32']);\r\n     * assert(table.schema.fields[0].name === 'i32');\r\n     * assert(table.schema.fields[1].name === '1');\r\n     * ```\r\n     *\r\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\r\n     * from the Columns:\r\n     * ```ts\r\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\r\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\r\n     * const table = Table.new(i32s, f32s);\r\n     * assert(table.schema.fields[0].name === 'i32');\r\n     * assert(table.schema.fields[1].name === 'f32');\r\n     * ```\r\n     *\r\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\r\n     * extend the lengths of the shorter Columns, allocating additional bytes\r\n     * to represent the additional null slots. The memory required to allocate\r\n     * these additional bitmaps can be computed as:\r\n     * ```ts\r\n     * let additionalBytes = 0;\r\n     * for (let vec in shorter_vectors) {\r\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\r\n     * }\r\n     * ```\r\n     *\r\n     * For example, an additional null bitmap for one million null values would require\r\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\r\n     */\r\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\r\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\r\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\r\n    /** @nocollapse */\r\n    public static new(...cols: any[]) {\r\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\r\n    }\r\n\r\n    constructor(batches: RecordBatch<T>[]);\r\n    constructor(...batches: RecordBatch<T>[]);\r\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\r\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\r\n    constructor(...args: any[]) {\r\n\r\n        let schema: Schema<T> = null!;\r\n\r\n        if (args[0] instanceof Schema) { schema = args.shift(); }\r\n\r\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\r\n\r\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\r\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\r\n        }\r\n\r\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\r\n\r\n        super(new Struct(schema.fields), chunks);\r\n\r\n        this._schema = schema;\r\n        this._chunks = chunks;\r\n    }\r\n\r\n    protected _schema: Schema<T>;\r\n    // List of inner RecordBatches\r\n    protected _chunks: RecordBatch<T>[];\r\n    protected _children?: Column<T[keyof T]>[];\r\n\r\n    public get schema() { return this._schema; }\r\n    public get length() { return this._length; }\r\n    public get chunks() { return this._chunks; }\r\n    public get numCols() { return this._numChildren; }\r\n\r\n    public clone(chunks = this._chunks) {\r\n        return new Table<T>(this._schema, chunks);\r\n    }\r\n\r\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\r\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\r\n    }\r\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\r\n        return this.getChildAt(index);\r\n    }\r\n    public getColumnIndex<R extends keyof T>(name: R) {\r\n        return this._schema.fields.findIndex((f) => f.name === name);\r\n    }\r\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\r\n        if (index < 0 || index >= this.numChildren) { return null; }\r\n        let field: Field<R>, child: Column<R>;\r\n        const fields = (this._schema as Schema<any>).fields;\r\n        const columns = this._children || (this._children = []) as Column[];\r\n        if (child = columns[index]) { return child as Column<R>; }\r\n        if (field = fields[index]) {\r\n            const chunks = this._chunks\r\n                .map((chunk) => chunk.getChildAt<R>(index))\r\n                .filter((vec): vec is Vector<R> => vec != null);\r\n            if (chunks.length > 0) {\r\n                return (columns[index] = new Column<R>(field, chunks));\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // @ts-ignore\r\n    public serialize(encoding = 'binary', stream = true) {\r\n        const Writer = !stream\r\n            ? RecordBatchFileWriter\r\n            : RecordBatchStreamWriter;\r\n        return Writer.writeAll(this).toUint8Array(true);\r\n    }\r\n    public count(): number {\r\n        return this._length;\r\n    }\r\n    public select<K extends keyof T = any>(...columnNames: K[]) {\r\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\r\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\r\n    }\r\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\r\n        const schema = this._schema.selectAt<K>(...columnIndices);\r\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\r\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\r\n        }));\r\n    }\r\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\r\n\r\n        const fields = this._schema.fields;\r\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\r\n            const [indices, oldToNew] = memo;\r\n            const i = fields.findIndex((f) => f.name === f2.name);\r\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\r\n            return memo;\r\n        }, [[], []] as number[][]);\r\n\r\n        const schema = this._schema.assign(other.schema);\r\n        const columns = [\r\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\r\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\r\n            ...indices.map((i) => other.getColumnAt(i)!)\r\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\r\n\r\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\r\n    }\r\n}\r\n\r\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\r\n    const { type } = input;\r\n    if (type instanceof Struct) {\r\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\r\n    const { type } = input;\r\n    if (type instanceof Struct) {\r\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\r\n    }\r\n    return null;\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from './data';\r\nimport { Table } from './table';\r\nimport { Vector } from './vector';\r\nimport { Visitor } from './visitor';\r\nimport { Schema, Field } from './schema';\r\nimport { isIterable } from './util/compat';\r\nimport { Chunked } from './vector/chunked';\r\nimport { selectFieldArgs } from './util/args';\r\nimport { DataType, Struct, Dictionary } from './type';\r\nimport { ensureSameLengthData } from './util/recordbatch';\r\nimport { Clonable, Sliceable, Applicative } from './vector';\r\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\r\n\r\ntype VectorMap = { [key: string]: Vector };\r\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\r\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\r\n\r\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\r\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\r\n    slice(begin?: number, end?: number): RecordBatch<T>;\r\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\r\n}\r\n\r\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\r\n    extends StructVector<T>\r\n    implements Clonable<RecordBatch<T>>,\r\n               Sliceable<RecordBatch<T>>,\r\n               Applicative<Struct<T>, Table<T>> {\r\n\r\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\r\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\r\n    /** @nocollapse */\r\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\r\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\r\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\r\n        }\r\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\r\n    }\r\n\r\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\r\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\r\n    /** @nocollapse */\r\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\r\n        const [fs, xs] = selectFieldArgs<T>(args);\r\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\r\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\r\n    }\r\n\r\n    protected _schema: Schema;\r\n    protected _dictionaries?: Map<number, Vector>;\r\n\r\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\r\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\r\n    constructor(...args: any[]) {\r\n        let data: Data<Struct<T>>;\r\n        let schema = args[0] as Schema<T>;\r\n        let children: Vector[] | undefined;\r\n        if (args[1] instanceof Data) {\r\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\r\n        } else {\r\n            const fields = schema.fields as Field<T[keyof T]>[];\r\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\r\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\r\n        }\r\n        super(data, children);\r\n        this._schema = schema;\r\n    }\r\n\r\n    public clone(data: Data<Struct<T>>, children = this._children) {\r\n        return new RecordBatch<T>(this._schema, data, children);\r\n    }\r\n\r\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\r\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\r\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\r\n    }\r\n\r\n    public get schema() { return this._schema; }\r\n    public get numCols() { return this._schema.fields.length; }\r\n    public get dictionaries() {\r\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\r\n    }\r\n\r\n    public select<K extends keyof T = any>(...columnNames: K[]) {\r\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\r\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\r\n    }\r\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\r\n        const schema = this._schema.selectAt(...columnIndices);\r\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\r\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\r\n    }\r\n}\r\n\r\n/**\r\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\r\n * implementations to differentiate between a stream with valid zero-length\r\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\r\n * @see https://github.com/apache/arrow/pull/4373\r\n * @ignore\r\n * @private\r\n */\r\n/* tslint:disable:class-name */\r\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\r\n    constructor(schema: Schema<T>) {\r\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nclass DictionaryCollector extends Visitor {\r\n    public dictionaries = new Map<number, Vector>();\r\n    public static collect<T extends RecordBatch>(batch: T) {\r\n        return new DictionaryCollector().visit(\r\n            batch.data, new Struct(batch.schema.fields)\r\n        ).dictionaries;\r\n    }\r\n    public visit(data: Data, type: DataType) {\r\n        if (DataType.isDictionary(type)) {\r\n            return this.visitDictionary(data, type);\r\n        } else {\r\n            data.childData.forEach((child, i) =>\r\n                this.visit(child, type.children[i].type));\r\n        }\r\n        return this;\r\n    }\r\n    public visitDictionary(data: Data, type: Dictionary) {\r\n        const dictionary = data.dictionary;\r\n        if (dictionary && dictionary.length > 0) {\r\n            this.dictionaries.set(type.id, dictionary);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector';\r\nimport { DataType } from '../type';\r\nimport { MessageHeader } from '../enum';\r\nimport { Footer } from './metadata/file';\r\nimport { Schema, Field } from '../schema';\r\nimport streamAdapters from '../io/adapters';\r\nimport { Message } from './metadata/message';\r\nimport * as metadata from './metadata/message';\r\nimport { ArrayBufferViewInput } from '../util/buffer';\r\nimport { ByteStream, AsyncByteStream } from '../io/stream';\r\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\r\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\r\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\r\nimport {\r\n    FileHandle,\r\n    ArrowJSONLike,\r\n    ITERATOR_DONE,\r\n    ReadableInterop,\r\n} from '../io/interfaces';\r\nimport {\r\n    MessageReader, AsyncMessageReader, JSONMessageReader,\r\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\r\n} from './message';\r\nimport {\r\n    isPromise,\r\n    isIterable, isAsyncIterable,\r\n    isIteratorResult, isArrowJSON,\r\n    isFileHandle, isFetchResponse,\r\n    isReadableDOMStream, isReadableNodeStream\r\n} from '../util/compat';\r\n\r\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\r\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\r\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\r\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\r\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\r\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\r\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\r\n\r\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\r\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\r\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\r\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\r\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\r\n\r\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\r\n\r\n    protected _impl: RecordBatchReaderImpls<T>;\r\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\r\n        super();\r\n        this._impl = impl;\r\n    }\r\n\r\n    public get closed() { return this._impl.closed; }\r\n    public get schema() { return this._impl.schema; }\r\n    public get autoDestroy() { return this._impl.autoDestroy; }\r\n    public get dictionaries() { return this._impl.dictionaries; }\r\n    public get numDictionaries() { return this._impl.numDictionaries; }\r\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\r\n    public get footer(): Footer | null { return this._impl.isFile() ? this._impl.footer : null; }\r\n\r\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\r\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\r\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\r\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\r\n\r\n    public next() {\r\n        return this._impl.next();\r\n    }\r\n    public throw(value?: any) {\r\n        return this._impl.throw(value);\r\n    }\r\n    public return(value?: any) {\r\n        return this._impl.return(value);\r\n    }\r\n    public cancel() {\r\n        return this._impl.cancel();\r\n    }\r\n    public reset(schema?: Schema<T> | null): this {\r\n        this._impl.reset(schema);\r\n        this._DOMStream = undefined;\r\n        this._nodeStream = undefined;\r\n        return this;\r\n    }\r\n    public open(options?: OpenOptions) {\r\n        const opening = this._impl.open(options);\r\n        return isPromise(opening) ? opening.then(() => this) : this;\r\n    }\r\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\r\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\r\n    }\r\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\r\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\r\n    }\r\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\r\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\r\n    }\r\n    public toDOMStream() {\r\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\r\n            (this.isSync()\r\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\r\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\r\n    }\r\n    public toNodeStream() {\r\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\r\n            (this.isSync()\r\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\r\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\r\n            { objectMode: true });\r\n    }\r\n\r\n    /** @nocollapse */\r\n    // @ts-ignore\r\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\r\n        throw new Error(`\"throughNode\" not available in this environment`);\r\n    }\r\n    /** @nocollapse */\r\n    public static throughDOM<T extends { [key: string]: DataType }>(\r\n        // @ts-ignore\r\n        writableStrategy?: ByteLengthQueuingStrategy,\r\n        // @ts-ignore\r\n        readableStrategy?: { autoDestroy: boolean }\r\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\r\n        throw new Error(`\"throughDOM\" not available in this environment`);\r\n    }\r\n\r\n    public static from<T extends RecordBatchReader>(source: T): T;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\r\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\r\n    /** @nocollapse */\r\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\r\n        if (source instanceof RecordBatchReader) {\r\n            return source;\r\n        } else if (isArrowJSON(source)) {\r\n            return fromArrowJSON<T>(source);\r\n        } else if (isFileHandle(source)) {\r\n            return fromFileHandle<T>(source);\r\n        } else if (isPromise<any>(source)) {\r\n            return (async () => await RecordBatchReader.from<any>(await source))();\r\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\r\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\r\n        }\r\n        return fromByteStream<T>(new ByteStream(source));\r\n    }\r\n\r\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\r\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\r\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\r\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\r\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\r\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\r\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\r\n    /** @nocollapse */\r\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\r\n        if (source instanceof RecordBatchReader) {\r\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\r\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\r\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\r\n        }\r\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\r\n    }\r\n}\r\n\r\n//\r\n// Since TS is a structural type system, we define the following subclass stubs\r\n// so that concrete types exist to associate with with the interfaces below.\r\n//\r\n// The implementation for each RecordBatchReader is hidden away in the set of\r\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\r\n// us to export a single RecordBatchReader class, and swap out the impl based\r\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\r\n//\r\n// Async/await makes our job a bit harder, since it forces everything to be\r\n// either fully sync or fully async. This is why the logic for the reader impls\r\n// has been duplicated into both sync and async variants. Since the RBR\r\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\r\n// example will return async/await-friendly Promises, but one with a (sync)\r\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\r\n// different about their logic, aside from the async handling. This is also why\r\n// this code looks highly structured, as it should be nearly identical and easy\r\n// to follow.\r\n//\r\n\r\n/** @ignore */\r\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\r\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\r\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\r\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\r\n}\r\n/** @ignore */\r\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\r\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\r\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\r\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\r\n}\r\n/** @ignore */\r\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\r\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\r\n}\r\n/** @ignore */\r\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\r\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\r\n}\r\n\r\n//\r\n// Now override the return types for each sync/async RecordBatchReader variant\r\n//\r\n\r\n/** @ignore */\r\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\r\n    open(options?: OpenOptions | undefined): this;\r\n    cancel(): void;\r\n    throw(value?: any): IteratorResult<any>;\r\n    return(value?: any): IteratorResult<any>;\r\n    next(value?: any): IteratorResult<RecordBatch<T>>;\r\n}\r\n\r\n/** @ignore */\r\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\r\n    open(options?: OpenOptions | undefined): Promise<this>;\r\n    cancel(): Promise<void>;\r\n    throw(value?: any): Promise<IteratorResult<any>>;\r\n    return(value?: any): Promise<IteratorResult<any>>;\r\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\r\n}\r\n\r\n/** @ignore */\r\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\r\n    readRecordBatch(index: number): RecordBatch<T> | null;\r\n}\r\n\r\n/** @ignore */\r\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\r\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\r\n}\r\n\r\n/** @ignore */\r\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\r\n     RecordBatchJSONReaderImpl<T> |\r\n     RecordBatchFileReaderImpl<T> |\r\n     RecordBatchStreamReaderImpl<T> |\r\n     AsyncRecordBatchFileReaderImpl<T> |\r\n     AsyncRecordBatchStreamReaderImpl<T>;\r\n\r\n/** @ignore */\r\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\r\n\r\n    closed: boolean;\r\n    schema: Schema<T>;\r\n    autoDestroy: boolean;\r\n    dictionaries: Map<number, Vector>;\r\n\r\n    isFile(): this is RecordBatchFileReaders<T>;\r\n    isStream(): this is RecordBatchStreamReaders<T>;\r\n    isSync(): this is RecordBatchReaders<T>;\r\n    isAsync(): this is AsyncRecordBatchReaders<T>;\r\n\r\n    reset(schema?: Schema<T> | null): this;\r\n}\r\n\r\n/** @ignore */\r\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\r\n\r\n    open(options?: OpenOptions): this;\r\n    cancel(): void;\r\n\r\n    throw(value?: any): IteratorResult<any>;\r\n    return(value?: any): IteratorResult<any>;\r\n    next(value?: any): IteratorResult<RecordBatch<T>>;\r\n\r\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\r\n}\r\n\r\n/** @ignore */\r\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\r\n\r\n    open(options?: OpenOptions): Promise<this>;\r\n    cancel(): Promise<void>;\r\n\r\n    throw(value?: any): Promise<IteratorResult<any>>;\r\n    return(value?: any): Promise<IteratorResult<any>>;\r\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\r\n\r\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\r\n}\r\n\r\n/** @ignore */\r\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\r\n    readRecordBatch(index: number): RecordBatch<T> | null;\r\n}\r\n\r\n/** @ignore */\r\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\r\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\r\n}\r\n\r\n/** @ignore */\r\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\r\n\r\n    // @ts-ignore\r\n    public schema: Schema;\r\n    public closed = false;\r\n    public autoDestroy = true;\r\n    public dictionaries: Map<number, Vector>;\r\n\r\n    protected _dictionaryIndex = 0;\r\n    protected _recordBatchIndex = 0;\r\n    public get numDictionaries() { return this._dictionaryIndex; }\r\n    public get numRecordBatches() { return this._recordBatchIndex; }\r\n\r\n    constructor(dictionaries = new Map<number, Vector>()) {\r\n        this.dictionaries = dictionaries;\r\n    }\r\n\r\n    public isSync(): this is RecordBatchReaders<T> { return false; }\r\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\r\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\r\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\r\n\r\n    public reset(schema?: Schema<T> | null) {\r\n        this._dictionaryIndex = 0;\r\n        this._recordBatchIndex = 0;\r\n        this.schema = <any> schema;\r\n        this.dictionaries = new Map();\r\n        return this;\r\n    }\r\n\r\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\r\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\r\n    }\r\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\r\n        const { id, isDelta, data } = header;\r\n        const { dictionaries, schema } = this;\r\n        const dictionary = dictionaries.get(id);\r\n        if (isDelta || !dictionary) {\r\n            const type = schema.dictionaries.get(id)!;\r\n            return (dictionary && isDelta ? dictionary.concat(\r\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\r\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\r\n        }\r\n        return dictionary;\r\n    }\r\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\r\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\r\n\r\n    protected _reader: MessageReader;\r\n    protected _handle: ByteStream | ArrowJSONLike;\r\n\r\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\r\n        super(dictionaries);\r\n        this._reader = !isArrowJSON(source)\r\n            ? new MessageReader(this._handle = source)\r\n            : new JSONMessageReader(this._handle = source);\r\n    }\r\n\r\n    public isSync(): this is RecordBatchReaders<T> { return true; }\r\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\r\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\r\n        return this as IterableIterator<RecordBatch<T>>;\r\n    }\r\n    public cancel() {\r\n        if (!this.closed && (this.closed = true)) {\r\n            this.reset()._reader.return();\r\n            this._reader = <any> null;\r\n            this.dictionaries = <any> null;\r\n        }\r\n    }\r\n    public open(options?: OpenOptions) {\r\n        if (!this.closed) {\r\n            this.autoDestroy = shouldAutoDestroy(this, options);\r\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\r\n                this.cancel();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    public throw(value?: any): IteratorResult<any> {\r\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\r\n            return this.reset()._reader.throw(value);\r\n        }\r\n        return ITERATOR_DONE;\r\n    }\r\n    public return(value?: any): IteratorResult<any> {\r\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\r\n            return this.reset()._reader.return(value);\r\n        }\r\n        return ITERATOR_DONE;\r\n    }\r\n    public next(): IteratorResult<RecordBatch<T>> {\r\n        if (this.closed) { return ITERATOR_DONE; }\r\n        let message: Message | null, { _reader: reader } = this;\r\n        while (message = this._readNextMessageAndValidate()) {\r\n            if (message.isSchema()) {\r\n                this.reset(message.header());\r\n            } else if (message.isRecordBatch()) {\r\n                this._recordBatchIndex++;\r\n                const header = message.header();\r\n                const buffer = reader.readMessageBody(message.bodyLength);\r\n                const recordBatch = this._loadRecordBatch(header, buffer);\r\n                return { done: false, value: recordBatch };\r\n            } else if (message.isDictionaryBatch()) {\r\n                this._dictionaryIndex++;\r\n                const header = message.header();\r\n                const buffer = reader.readMessageBody(message.bodyLength);\r\n                const vector = this._loadDictionaryBatch(header, buffer);\r\n                this.dictionaries.set(header.id, vector);\r\n            }\r\n        }\r\n        if (this.schema && this._recordBatchIndex === 0) {\r\n            this._recordBatchIndex++;\r\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\r\n        }\r\n        return this.return();\r\n    }\r\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\r\n        return this._reader.readMessage<T>(type);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\r\n\r\n    protected _handle: AsyncByteStream;\r\n    protected _reader: AsyncMessageReader;\r\n\r\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\r\n        super(dictionaries);\r\n        this._reader = new AsyncMessageReader(this._handle = source);\r\n    }\r\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\r\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\r\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\r\n        return this as AsyncIterableIterator<RecordBatch<T>>;\r\n    }\r\n    public async cancel() {\r\n        if (!this.closed && (this.closed = true)) {\r\n            await this.reset()._reader.return();\r\n            this._reader = <any> null;\r\n            this.dictionaries = <any> null;\r\n        }\r\n    }\r\n    public async open(options?: OpenOptions) {\r\n        if (!this.closed) {\r\n            this.autoDestroy = shouldAutoDestroy(this, options);\r\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\r\n                await this.cancel();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    public async throw(value?: any): Promise<IteratorResult<any>> {\r\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\r\n            return await this.reset()._reader.throw(value);\r\n        }\r\n        return ITERATOR_DONE;\r\n    }\r\n    public async return(value?: any): Promise<IteratorResult<any>> {\r\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\r\n            return await this.reset()._reader.return(value);\r\n        }\r\n        return ITERATOR_DONE;\r\n    }\r\n    public async next() {\r\n        if (this.closed) { return ITERATOR_DONE; }\r\n        let message: Message | null, { _reader: reader } = this;\r\n        while (message = await this._readNextMessageAndValidate()) {\r\n            if (message.isSchema()) {\r\n                await this.reset(message.header());\r\n            } else if (message.isRecordBatch()) {\r\n                this._recordBatchIndex++;\r\n                const header = message.header();\r\n                const buffer = await reader.readMessageBody(message.bodyLength);\r\n                const recordBatch = this._loadRecordBatch(header, buffer);\r\n                return { done: false, value: recordBatch };\r\n            } else if (message.isDictionaryBatch()) {\r\n                this._dictionaryIndex++;\r\n                const header = message.header();\r\n                const buffer = await reader.readMessageBody(message.bodyLength);\r\n                const vector = this._loadDictionaryBatch(header, buffer);\r\n                this.dictionaries.set(header.id, vector);\r\n            }\r\n        }\r\n        if (this.schema && this._recordBatchIndex === 0) {\r\n            this._recordBatchIndex++;\r\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\r\n        }\r\n        return await this.return();\r\n    }\r\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\r\n        return await this._reader.readMessage<T>(type);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\r\n\r\n    // @ts-ignore\r\n    protected _footer?: Footer;\r\n    // @ts-ignore\r\n    protected _handle: RandomAccessFile;\r\n    public get footer() { return this._footer!; }\r\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\r\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\r\n\r\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\r\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\r\n    }\r\n    public isSync(): this is RecordBatchReaders<T> { return true; }\r\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\r\n    public open(options?: OpenOptions) {\r\n        if (!this.closed && !this._footer) {\r\n            this.schema = (this._footer = this._readFooter()).schema;\r\n            for (const block of this._footer.dictionaryBatches()) {\r\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\r\n            }\r\n        }\r\n        return super.open(options);\r\n    }\r\n    public readRecordBatch(index: number) {\r\n        if (this.closed) { return null; }\r\n        if (!this._footer) { this.open(); }\r\n        const block = this._footer && this._footer.getRecordBatch(index);\r\n        if (block && this._handle.seek(block.offset)) {\r\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\r\n            if (message && message.isRecordBatch()) {\r\n                const header = message.header();\r\n                const buffer = this._reader.readMessageBody(message.bodyLength);\r\n                const recordBatch = this._loadRecordBatch(header, buffer);\r\n                return recordBatch;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    protected _readDictionaryBatch(index: number) {\r\n        const block = this._footer && this._footer.getDictionaryBatch(index);\r\n        if (block && this._handle.seek(block.offset)) {\r\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\r\n            if (message && message.isDictionaryBatch()) {\r\n                const header = message.header();\r\n                const buffer = this._reader.readMessageBody(message.bodyLength);\r\n                const vector = this._loadDictionaryBatch(header, buffer);\r\n                this.dictionaries.set(header.id, vector);\r\n            }\r\n        }\r\n    }\r\n    protected _readFooter() {\r\n        const { _handle } = this;\r\n        const offset = _handle.size - magicAndPadding;\r\n        const length = _handle.readInt32(offset);\r\n        const buffer = _handle.readAt(offset - length, length);\r\n        return Footer.decode(buffer);\r\n    }\r\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\r\n        if (!this._footer) { this.open(); }\r\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\r\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\r\n            if (block && this._handle.seek(block.offset)) {\r\n                return this._reader.readMessage(type);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\r\n    implements AsyncRecordBatchFileReaderImpl<T> {\r\n\r\n    protected _footer?: Footer;\r\n    // @ts-ignore\r\n    protected _handle: AsyncRandomAccessFile;\r\n    public get footer() { return this._footer!; }\r\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\r\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\r\n\r\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\r\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\r\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\r\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\r\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\r\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\r\n    }\r\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\r\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\r\n    public async open(options?: OpenOptions) {\r\n        if (!this.closed && !this._footer) {\r\n            this.schema = (this._footer = await this._readFooter()).schema;\r\n            for (const block of this._footer.dictionaryBatches()) {\r\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\r\n            }\r\n        }\r\n        return await super.open(options);\r\n    }\r\n    public async readRecordBatch(index: number) {\r\n        if (this.closed) { return null; }\r\n        if (!this._footer) { await this.open(); }\r\n        const block = this._footer && this._footer.getRecordBatch(index);\r\n        if (block && (await this._handle.seek(block.offset))) {\r\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\r\n            if (message && message.isRecordBatch()) {\r\n                const header = message.header();\r\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\r\n                const recordBatch = this._loadRecordBatch(header, buffer);\r\n                return recordBatch;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    protected async _readDictionaryBatch(index: number) {\r\n        const block = this._footer && this._footer.getDictionaryBatch(index);\r\n        if (block && (await this._handle.seek(block.offset))) {\r\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\r\n            if (message && message.isDictionaryBatch()) {\r\n                const header = message.header();\r\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\r\n                const vector = this._loadDictionaryBatch(header, buffer);\r\n                this.dictionaries.set(header.id, vector);\r\n            }\r\n        }\r\n    }\r\n    protected async _readFooter() {\r\n        const { _handle } = this;\r\n        _handle._pending && await _handle._pending;\r\n        const offset = _handle.size - magicAndPadding;\r\n        const length = await _handle.readInt32(offset);\r\n        const buffer = await _handle.readAt(offset - length, length);\r\n        return Footer.decode(buffer);\r\n    }\r\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\r\n        if (!this._footer) { await this.open(); }\r\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\r\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\r\n            if (block && await this._handle.seek(block.offset)) {\r\n                return await this._reader.readMessage(type);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\r\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\r\n        super(source, dictionaries);\r\n    }\r\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\r\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\r\n    }\r\n}\r\n\r\n//\r\n// Define some helper functions and static implementations down here. There's\r\n// a bit of branching in the static methods that can lead to the same routines\r\n// being executed, so we've broken those out here for readability.\r\n//\r\n\r\n/** @ignore */\r\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\r\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\r\n}\r\n\r\n/** @ignore */\r\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\r\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\r\n    try {\r\n        if (!reader.open({ autoDestroy: false }).closed) {\r\n            do { yield reader; } while (!(reader.reset().open()).closed);\r\n        }\r\n    } finally { reader.cancel(); }\r\n}\r\n\r\n/** @ignore */\r\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\r\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\r\n    try {\r\n        if (!(await reader.open({ autoDestroy: false })).closed) {\r\n            do { yield reader; } while (!(await reader.reset().open()).closed);\r\n        }\r\n    } finally { await reader.cancel(); }\r\n}\r\n\r\n/** @ignore */\r\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\r\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\r\n}\r\n\r\n/** @ignore */\r\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\r\n    const bytes = source.peek((magicLength + 7) & ~7);\r\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\r\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\r\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\r\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\r\n}\r\n\r\n/** @ignore */\r\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\r\n    const bytes = await source.peek((magicLength + 7) & ~7);\r\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\r\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\r\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\r\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\r\n}\r\n\r\n/** @ignore */\r\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\r\n    const { size } = await source.stat();\r\n    const file = new AsyncRandomAccessFile(source, size);\r\n    if (size >= magicX2AndPadding) {\r\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\r\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\r\n        }\r\n    }\r\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { DataType } from '../../type';\r\nimport { Vector } from '../../vector';\r\nimport { VectorType as V } from '../../interfaces';\r\nimport { Builder, BuilderOptions } from '../../builder/index';\r\n\r\n/** @ignore */\r\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\r\n    queueingStrategy?: 'bytes' | 'count';\r\n    dictionaryHashFunction?: (value: any) => string | number;\r\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\r\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\r\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\r\n}\r\n\r\n/** @ignore */\r\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\r\n    return new BuilderTransform(options);\r\n}\r\n\r\n/** @ignore */\r\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\r\n\r\n    public readable: ReadableStream<V<T>>;\r\n    public writable: WritableStream<T['TValue'] | TNull>;\r\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\r\n\r\n    private _numChunks = 0;\r\n    private _finished = false;\r\n    private _bufferedSize = 0;\r\n    private _builder: Builder<T, TNull>;\r\n    private _getSize: (builder: Builder<T, TNull>) => number;\r\n\r\n    constructor(options: BuilderTransformOptions<T, TNull>) {\r\n\r\n        // Access properties by string indexers to defeat closure compiler\r\n\r\n        const {\r\n            ['readableStrategy']: readableStrategy,\r\n            ['writableStrategy']: writableStrategy,\r\n            ['queueingStrategy']: queueingStrategy = 'count',\r\n            ...builderOptions\r\n        } = options;\r\n\r\n        this._controller = null;\r\n        this._builder = Builder.new<T, TNull>(builderOptions);\r\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\r\n\r\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\r\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\r\n\r\n        this['readable'] = new ReadableStream<V<T>>({\r\n            ['cancel']: ()  => { this._builder.clear(); },\r\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\r\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\r\n        }, {\r\n            'highWaterMark': readableHighWaterMark,\r\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\r\n        });\r\n\r\n        this['writable'] = new WritableStream({\r\n            ['abort']: () => { this._builder.clear(); },\r\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\r\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\r\n        }, {\r\n            'highWaterMark': writableHighWaterMark,\r\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\r\n        });\r\n    }\r\n\r\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\r\n        const bufferedSize = this._bufferedSize;\r\n        this._bufferedSize = this._getSize(this._builder.append(value));\r\n        return this._bufferedSize - bufferedSize;\r\n    }\r\n\r\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\r\n        if (controller === null) { return; }\r\n        if (this._bufferedSize >= controller.desiredSize!) {\r\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\r\n        }\r\n        if (builder.finished) {\r\n            if (builder.length > 0 || this._numChunks === 0) {\r\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\r\n            }\r\n            if (!this._finished && (this._finished = true)) {\r\n                this._enqueue(controller, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\r\n        this._bufferedSize = 0;\r\n        this._controller = null;\r\n        chunk === null ? controller.close() : controller.enqueue(chunk);\r\n    }\r\n}\r\n\r\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\r\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector';\r\nimport { RecordBatch } from '../recordbatch';\r\nimport { DictionaryVector } from '../vector/dictionary';\r\n\r\n/** @ignore */\r\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\r\n/** @ignore */\r\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\r\n\r\n/** @ignore */\r\nexport abstract class Value<T> {\r\n    eq(other: Value<T> | T): Predicate {\r\n        if (!(other instanceof Value)) { other = new Literal(other); }\r\n        return new Equals(this, other);\r\n    }\r\n    le(other: Value<T> | T): Predicate {\r\n        if (!(other instanceof Value)) { other = new Literal(other); }\r\n        return new LTeq(this, other);\r\n    }\r\n    ge(other: Value<T> | T): Predicate {\r\n        if (!(other instanceof Value)) { other = new Literal(other); }\r\n        return new GTeq(this, other);\r\n    }\r\n    lt(other: Value<T> | T): Predicate {\r\n        return new Not(this.ge(other));\r\n    }\r\n    gt(other: Value<T> | T): Predicate {\r\n        return new Not(this.le(other));\r\n    }\r\n    ne(other: Value<T> | T): Predicate {\r\n        return new Not(this.eq(other));\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Literal<T= any> extends Value<T> {\r\n    constructor(public v: T) { super(); }\r\n}\r\n\r\n/** @ignore */\r\nexport class Col<T= any> extends Value<T> {\r\n    // @ts-ignore\r\n    public vector: Vector;\r\n    // @ts-ignore\r\n    public colidx: number;\r\n\r\n    constructor(public name: string) { super(); }\r\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\r\n        if (!this.colidx) {\r\n            // Assume column index doesn't change between calls to bind\r\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\r\n            this.colidx = -1;\r\n            const fields = batch.schema.fields;\r\n            for (let idx = -1; ++idx < fields.length;) {\r\n                if (fields[idx].name === this.name) {\r\n                    this.colidx = idx;\r\n                    break;\r\n                }\r\n            }\r\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\r\n        }\r\n\r\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\r\n        return (idx: number) => vec.get(idx);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport abstract class Predicate {\r\n    abstract bind(batch: RecordBatch): PredicateFunc;\r\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\r\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\r\n    not(): Predicate { return new Not(this); }\r\n}\r\n\r\n/** @ignore */\r\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\r\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\r\n        super();\r\n    }\r\n\r\n    bind(batch: RecordBatch) {\r\n        if (this.left instanceof Literal) {\r\n            if (this.right instanceof Literal) {\r\n                return this._bindLitLit(batch, this.left, this.right);\r\n            } else { // right is a Col\r\n\r\n                return this._bindLitCol(batch, this.left, this.right as Col);\r\n            }\r\n        } else { // left is a Col\r\n            if (this.right instanceof Literal) {\r\n                return this._bindColLit(batch, this.left as Col, this.right);\r\n            } else { // right is a Col\r\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\r\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\r\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\r\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\r\n}\r\n\r\n/** @ignore */\r\nexport abstract class CombinationPredicate extends Predicate {\r\n    readonly children: Predicate[];\r\n    constructor(...children: Predicate[]) {\r\n        super();\r\n        this.children = children;\r\n    }\r\n}\r\n// add children to prototype so it doesn't get mangled in es2015/umd\r\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\r\n\r\n/** @ignore */\r\nexport class And extends CombinationPredicate {\r\n    constructor(...children: Predicate[]) {\r\n        // Flatten any Ands\r\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\r\n            return accum.concat(p instanceof And ? p.children : p);\r\n        }, []);\r\n        super(...children);\r\n    }\r\n    bind(batch: RecordBatch) {\r\n        const bound = this.children.map((p) => p.bind(batch));\r\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Or extends CombinationPredicate {\r\n    constructor(...children: Predicate[]) {\r\n        // Flatten any Ors\r\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\r\n            return accum.concat(p instanceof Or ? p.children : p);\r\n        }, []);\r\n        super(...children);\r\n    }\r\n    bind(batch: RecordBatch) {\r\n        const bound = this.children.map((p) => p.bind(batch));\r\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Equals extends ComparisonPredicate {\r\n    // Helpers used to cache dictionary reverse lookups between calls to bind\r\n    private lastDictionary: Vector|undefined;\r\n    private lastKey: number|undefined;\r\n\r\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\r\n        const rtrn: boolean = left.v == right.v;\r\n        return () => rtrn;\r\n    }\r\n\r\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\r\n        const left_func = left.bind(batch);\r\n        const right_func = right.bind(batch);\r\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\r\n    }\r\n\r\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\r\n        const col_func = col.bind(batch);\r\n        if (col.vector instanceof DictionaryVector) {\r\n            let key: any;\r\n            const vector = col.vector as DictionaryVector;\r\n            if (vector.dictionary !== this.lastDictionary) {\r\n                key = vector.reverseLookup(lit.v);\r\n                this.lastDictionary = vector.dictionary;\r\n                this.lastKey = key;\r\n            } else {\r\n                key = this.lastKey;\r\n            }\r\n\r\n            if (key === -1) {\r\n                // the value doesn't exist in the dictionary - always return\r\n                // false\r\n                // TODO: special-case of PredicateFunc that encapsulates this\r\n                // \"always false\" behavior. That way filtering operations don't\r\n                // have to bother checking\r\n                return () => false;\r\n            } else {\r\n                return (idx: number) => {\r\n                    return vector.getKey(idx) === key;\r\n                };\r\n            }\r\n        } else {\r\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\r\n        }\r\n    }\r\n\r\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\r\n        // Equals is commutative\r\n        return this._bindColLit(batch, col, lit);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class LTeq extends ComparisonPredicate {\r\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\r\n        const rtrn: boolean = left.v <= right.v;\r\n        return () => rtrn;\r\n    }\r\n\r\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\r\n        const left_func = left.bind(batch);\r\n        const right_func = right.bind(batch);\r\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\r\n    }\r\n\r\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\r\n        const col_func = col.bind(batch);\r\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\r\n    }\r\n\r\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\r\n        const col_func = col.bind(batch);\r\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class GTeq extends ComparisonPredicate {\r\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\r\n        const rtrn: boolean = left.v >= right.v;\r\n        return () => rtrn;\r\n    }\r\n\r\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\r\n        const left_func = left.bind(batch);\r\n        const right_func = right.bind(batch);\r\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\r\n    }\r\n\r\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\r\n        const col_func = col.bind(batch);\r\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\r\n    }\r\n\r\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\r\n        const col_func = col.bind(batch);\r\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class Not extends Predicate {\r\n    constructor(public readonly child: Predicate) {\r\n        super();\r\n    }\r\n\r\n    bind(batch: RecordBatch) {\r\n        const func = this.child.bind(batch);\r\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class CustomPredicate extends Predicate {\r\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\r\n        super();\r\n    }\r\n\r\n    bind(batch: RecordBatch) {\r\n        this.bind_(batch);\r\n        return this.next;\r\n    }\r\n}\r\n\r\nexport function lit(v: any): Value<any> { return new Literal(v); }\r\nexport function col(n: string): Col<any> { return new Col(n); }\r\nexport function and(...p: Predicate[]): And { return new And(...p); }\r\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\r\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\r\n    return new CustomPredicate(next, bind);\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Table } from '../table';\r\nimport { Vector } from '../vector';\r\nimport { IntVector } from '../vector/int';\r\nimport { Field, Schema } from '../schema';\r\nimport { Predicate, Col } from './predicate';\r\nimport { RecordBatch } from '../recordbatch';\r\nimport { VectorType as V } from '../interfaces';\r\nimport { DataType, Int, Struct, Dictionary } from '../type';\r\n\r\n/** @ignore */\r\nexport type BindFunc = (batch: RecordBatch) => void;\r\n/** @ignore */\r\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\r\n\r\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\r\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\r\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\r\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\r\n\r\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\r\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\r\n        return new FilteredDataFrame<T>(this.chunks, predicate);\r\n    }\r\n    public scan(next: NextFunc, bind?: BindFunc) {\r\n        const batches = this.chunks, numBatches = batches.length;\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            if (bind) { bind(batch); }\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                next(index, batch);\r\n            }\r\n        }\r\n    }\r\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\r\n        const batches = this.chunks, numBatches = batches.length;\r\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            if (bind) { bind(batch); }\r\n            // yield all indices\r\n            for (let index = batch.length; --index >= 0;) {\r\n                next(index, batch);\r\n            }\r\n        }\r\n    }\r\n    public countBy(name: Col | string) {\r\n        const batches = this.chunks, numBatches = batches.length;\r\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\r\n        // Assume that all dictionary batches are deltas, which means that the\r\n        // last record batch has the most complete dictionary\r\n        count_by.bind(batches[numBatches - 1]);\r\n        const vector = count_by.vector as V<Dictionary>;\r\n        if (!DataType.isDictionary(vector.type)) {\r\n            throw new Error('countBy currently only supports dictionary-encoded columns');\r\n        }\r\n\r\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\r\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\r\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\r\n\r\n        const counts = new CountsArrayType(vector.dictionary.length);\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            // rebind the countBy Col\r\n            count_by.bind(batch);\r\n            const keys = (count_by.vector as V<Dictionary>).indices;\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                let key = keys.get(index);\r\n                if (key !== null) { counts[key]++; }\r\n            }\r\n        }\r\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\r\n    constructor(values: Vector<T>, counts: V<TCount>) {\r\n        type R = { values: T, counts: TCount };\r\n        const schema = new Schema<R>([\r\n            new Field('values', values.type),\r\n            new Field('counts', counts.type)\r\n        ]);\r\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\r\n    }\r\n    public toJSON(): Object {\r\n        const values = this.getColumnAt(0)!;\r\n        const counts = this.getColumnAt(1)!;\r\n        const result = {} as { [k: string]: number | null };\r\n        for (let i = -1; ++i < this.length;) {\r\n            result[values.get(i)] = counts.get(i);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\r\n    private _predicate: Predicate;\r\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\r\n        super(batches);\r\n        this._predicate = predicate;\r\n    }\r\n    public scan(next: NextFunc, bind?: BindFunc) {\r\n        // inlined version of this:\r\n        // this.parent.scan((idx, columns) => {\r\n        //     if (this.predicate(idx, columns)) next(idx, columns);\r\n        // });\r\n        const batches = this._chunks;\r\n        const numBatches = batches.length;\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            const predicate = this._predicate.bind(batch);\r\n            let isBound = false;\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                if (predicate(index, batch)) {\r\n                    // bind batches lazily - if predicate doesn't match anything\r\n                    // in the batch we don't need to call bind on the batch\r\n                    if (bind && !isBound) {\r\n                        bind(batch);\r\n                        isBound = true;\r\n                    }\r\n                    next(index, batch);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\r\n        const batches = this._chunks;\r\n        const numBatches = batches.length;\r\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            const predicate = this._predicate.bind(batch);\r\n            let isBound = false;\r\n            // yield all indices\r\n            for (let index = batch.length; --index >= 0;) {\r\n                if (predicate(index, batch)) {\r\n                    // bind batches lazily - if predicate doesn't match anything\r\n                    // in the batch we don't need to call bind on the batch\r\n                    if (bind && !isBound) {\r\n                        bind(batch);\r\n                        isBound = true;\r\n                    }\r\n                    next(index, batch);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public count(): number {\r\n        // inlined version of this:\r\n        // let sum = 0;\r\n        // this.parent.scan((idx, columns) => {\r\n        //     if (this.predicate(idx, columns)) ++sum;\r\n        // });\r\n        // return sum;\r\n        let sum = 0;\r\n        const batches = this._chunks;\r\n        const numBatches = batches.length;\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            const predicate = this._predicate.bind(batch);\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                if (predicate(index, batch)) { ++sum; }\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\r\n        // inlined version of this:\r\n        // this.parent.scan((idx, columns) => {\r\n        //     if (this.predicate(idx, columns)) next(idx, columns);\r\n        // });\r\n        const batches = this._chunks;\r\n        const numBatches = batches.length;\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            // TODO: bind batches lazily\r\n            // If predicate doesn't match anything in the batch we don't need\r\n            // to bind the callback\r\n            const predicate = this._predicate.bind(batch);\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\r\n            }\r\n        }\r\n    }\r\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\r\n        return new FilteredDataFrame<T>(\r\n            this._chunks,\r\n            this._predicate.and(predicate)\r\n        );\r\n    }\r\n    public countBy(name: Col | string) {\r\n        const batches = this._chunks, numBatches = batches.length;\r\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\r\n        // Assume that all dictionary batches are deltas, which means that the\r\n        // last record batch has the most complete dictionary\r\n        count_by.bind(batches[numBatches - 1]);\r\n        const vector = count_by.vector as V<Dictionary>;\r\n        if (!DataType.isDictionary(vector.type)) {\r\n            throw new Error('countBy currently only supports dictionary-encoded columns');\r\n        }\r\n\r\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\r\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\r\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\r\n\r\n        const counts = new CountsArrayType(vector.dictionary.length);\r\n\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            const predicate = this._predicate.bind(batch);\r\n            // rebind the countBy Col\r\n            count_by.bind(batch);\r\n            const keys = (count_by.vector as V<Dictionary>).indices;\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                let key = keys.get(index);\r\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\r\n            }\r\n        }\r\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType } from './enum';\r\nexport { Data } from './data';\r\nexport {\r\n    DataType,\r\n    Null,\r\n    Bool,\r\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\r\n    Float, Float16, Float32, Float64,\r\n    Utf8,\r\n    Binary,\r\n    FixedSizeBinary,\r\n    Date_, DateDay, DateMillisecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Decimal,\r\n    List,\r\n    Struct,\r\n    Union, DenseUnion, SparseUnion,\r\n    Dictionary,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    FixedSizeList,\r\n    Map_,\r\n} from './type';\r\n\r\nexport { Table } from './table';\r\nexport { Column } from './column';\r\nexport { Visitor } from './visitor';\r\nexport { Schema, Field } from './schema';\r\nexport {\r\n    Vector,\r\n    BaseVector,\r\n    BinaryVector,\r\n    BoolVector,\r\n    Chunked,\r\n    DateVector, DateDayVector, DateMillisecondVector,\r\n    DecimalVector,\r\n    DictionaryVector,\r\n    FixedSizeBinaryVector,\r\n    FixedSizeListVector,\r\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\r\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\r\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\r\n    ListVector,\r\n    MapVector,\r\n    NullVector,\r\n    StructVector,\r\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\r\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\r\n    UnionVector, DenseUnionVector, SparseUnionVector,\r\n    Utf8Vector,\r\n} from './vector/index';\r\n\r\nexport {\r\n    Builder,\r\n    BinaryBuilder,\r\n    BoolBuilder,\r\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\r\n    DecimalBuilder,\r\n    DictionaryBuilder,\r\n    FixedSizeBinaryBuilder,\r\n    FixedSizeListBuilder,\r\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\r\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\r\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\r\n    ListBuilder,\r\n    MapBuilder,\r\n    NullBuilder,\r\n    StructBuilder,\r\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\r\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\r\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\r\n    Utf8Builder,\r\n} from './builder/index';\r\n\r\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\r\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\r\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\r\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\r\nexport { Message } from './ipc/metadata/message';\r\nexport { RecordBatch } from './recordbatch';\r\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\r\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\r\n\r\nimport * as util_bn_ from './util/bn';\r\nimport * as util_int_ from './util/int';\r\nimport * as util_bit_ from './util/bit';\r\nimport * as util_math_ from './util/math';\r\nimport * as util_buffer_ from './util/buffer';\r\nimport * as util_vector_ from './util/vector';\r\nimport * as predicate from './compute/predicate';\r\n\r\nexport { predicate };\r\n/** @ignore */\r\nexport const util = {\r\n    ...util_bn_,\r\n    ...util_int_,\r\n    ...util_bit_,\r\n    ...util_math_,\r\n    ...util_buffer_,\r\n    ...util_vector_\r\n};\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport streamAdapters from './io/adapters';\r\nimport { Builder } from './builder/index';\r\nimport { RecordBatchReader } from './ipc/reader';\r\nimport { RecordBatchWriter } from './ipc/writer';\r\nimport { toDOMStream } from './io/whatwg/iterable';\r\nimport { builderThroughDOMStream } from './io/whatwg/builder';\r\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\r\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\r\n\r\nstreamAdapters.toDOMStream = toDOMStream;\r\nBuilder['throughDOM'] = builderThroughDOMStream;\r\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\r\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\r\n\r\nexport {\r\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\r\n    Data,\r\n    DataType,\r\n    Null,\r\n    Bool,\r\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\r\n    Float, Float16, Float32, Float64,\r\n    Utf8,\r\n    Binary,\r\n    FixedSizeBinary,\r\n    Date_, DateDay, DateMillisecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Decimal,\r\n    List,\r\n    Struct,\r\n    Union, DenseUnion, SparseUnion,\r\n    Dictionary,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    FixedSizeList,\r\n    Map_,\r\n    Table,\r\n    Column,\r\n    Schema, Field,\r\n    Visitor,\r\n    Vector,\r\n    BaseVector,\r\n    BinaryVector,\r\n    BoolVector,\r\n    Chunked,\r\n    DateVector, DateDayVector, DateMillisecondVector,\r\n    DecimalVector,\r\n    DictionaryVector,\r\n    FixedSizeBinaryVector,\r\n    FixedSizeListVector,\r\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\r\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\r\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\r\n    ListVector,\r\n    MapVector,\r\n    NullVector,\r\n    StructVector,\r\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\r\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\r\n    UnionVector, DenseUnionVector, SparseUnionVector,\r\n    Utf8Vector,\r\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\r\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\r\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\r\n    MessageReader, AsyncMessageReader, JSONMessageReader,\r\n    Message,\r\n    RecordBatch,\r\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\r\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\r\n    predicate,\r\n    util,\r\n    Builder,\r\n    BinaryBuilder,\r\n    BoolBuilder,\r\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\r\n    DecimalBuilder,\r\n    DictionaryBuilder,\r\n    FixedSizeBinaryBuilder,\r\n    FixedSizeListBuilder,\r\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\r\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\r\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\r\n    ListBuilder,\r\n    MapBuilder,\r\n    NullBuilder,\r\n    StructBuilder,\r\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\r\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\r\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\r\n    Utf8Builder,\r\n} from './Arrow';\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { toUint8Array } from '../../util/buffer';\r\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\r\nimport { isIterable, isAsyncIterable } from '../../util/compat';\r\n\r\n/** @ignore */\r\ntype SourceIterator<T> = Generator<T, void, number | null>;\r\n/** @ignore */\r\ntype AsyncSourceIterator<T> = AsyncGenerator<T, void, number | null>;\r\n\r\n/** @ignore */\r\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\r\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\r\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\r\n    /* istanbul ignore next */\r\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\r\n}\r\n\r\n/** @ignore */\r\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\r\n\r\n    let it: SourceIterator<T> | null = null;\r\n    const bm = (options && options.type === 'bytes') || false;\r\n    const hwm = options && options.highWaterMark || (2 ** 24);\r\n\r\n    return new ReadableStream<T>({\r\n        ...options as any,\r\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]() as SourceIterator<T>)); },\r\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\r\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\r\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\r\n\r\n    function next(controller: ReadableStreamDefaultController<T>, it: SourceIterator<T>) {\r\n        let buf: Uint8Array;\r\n        let r: IteratorResult<T> | null = null;\r\n        let size = controller.desiredSize || null;\r\n        while (!(r = it.next(bm ? size : null)).done) {\r\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\r\n                size != null && bm && (size = size - buf.byteLength + 1);\r\n                r.value = <any> buf;\r\n            }\r\n            controller.enqueue(r.value);\r\n            if (size != null && --size <= 0) { return; }\r\n        }\r\n        controller.close();\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\r\n\r\n    let it: AsyncSourceIterator<T> | null = null;\r\n    const bm = (options && options.type === 'bytes') || false;\r\n    const hwm = options && options.highWaterMark || (2 ** 24);\r\n\r\n    return new ReadableStream<T>({\r\n        ...options as any,\r\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]() as AsyncSourceIterator<T>)); },\r\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\r\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\r\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\r\n\r\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncSourceIterator<T>) {\r\n        let buf: Uint8Array;\r\n        let r: IteratorResult<T> | null = null;\r\n        let size = controller.desiredSize || null;\r\n        while (!(r = await it.next(bm ? size : null)).done) {\r\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\r\n                size != null && bm && (size = size - buf.byteLength + 1);\r\n                r.value = <any> buf;\r\n            }\r\n            controller.enqueue(r.value);\r\n            if (size != null && --size <= 0) { return; }\r\n        }\r\n        controller.close();\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { DataType } from '../../type';\r\nimport { RecordBatch } from '../../recordbatch';\r\nimport { AsyncByteQueue } from '../../io/stream';\r\nimport { RecordBatchReader } from '../../ipc/reader';\r\n\r\n/** @ignore */\r\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\r\n\r\n    const queue = new AsyncByteQueue();\r\n    let reader: RecordBatchReader<T> | null = null;\r\n\r\n    const readable = new ReadableStream<RecordBatch<T>>({\r\n        async cancel() { await queue.close(); },\r\n        async start(controller) { await next(controller, reader || (reader = await open())); },\r\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\r\n    });\r\n\r\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\r\n\r\n    async function open() {\r\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\r\n    }\r\n\r\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\r\n        let size = controller.desiredSize;\r\n        let r: IteratorResult<RecordBatch<T>> | null = null;\r\n        while (!(r = await reader.next()).done) {\r\n            controller.enqueue(r.value);\r\n            if (size != null && --size <= 0) {\r\n                return;\r\n            }\r\n        }\r\n        controller.close();\r\n    }\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { DataType } from '../../type';\r\nimport { RecordBatch } from '../../recordbatch';\r\nimport { AsyncByteStream } from '../../io/stream';\r\nimport { RecordBatchWriter } from '../../ipc/writer';\r\n\r\n/** @ignore */\r\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\r\n    this: typeof RecordBatchWriter,\r\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\r\n    readableStrategy?: { highWaterMark?: number, size?: any }\r\n) {\r\n\r\n    const writer = new this<T>(writableStrategy);\r\n    const reader = new AsyncByteStream(writer);\r\n    const readable = new ReadableStream({\r\n        type: 'bytes',\r\n        async cancel() { await reader.cancel(); },\r\n        async pull(controller) { await next(controller); },\r\n        async start(controller) { await next(controller); },\r\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\r\n\r\n    return { writable: new WritableStream(writer, writableStrategy), readable };\r\n\r\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\r\n        let buf: Uint8Array | null = null;\r\n        let size = controller.desiredSize;\r\n        while (buf = await reader.read(size || null)) {\r\n            controller.enqueue(buf);\r\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\r\n        }\r\n        controller.close();\r\n    }\r\n}\r\n"],"sourceRoot":""}