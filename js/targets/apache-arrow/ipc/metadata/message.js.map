{"version":3,"sources":["ipc/metadata/message.ts"],"names":[],"mappings":"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","file":"message.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { flatbuffers } from 'flatbuffers';\r\nimport * as Schema_ from '../../fb/Schema';\r\nimport * as Message_ from '../../fb/Message';\r\n\r\nimport { Schema, Field } from '../../schema';\r\nimport { toUint8Array } from '../../util/buffer';\r\nimport { ArrayBufferViewInput } from '../../util/buffer';\r\nimport { MessageHeader, MetadataVersion } from '../../enum';\r\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\r\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\r\n\r\nimport Long = flatbuffers.Long;\r\nimport Builder = flatbuffers.Builder;\r\nimport ByteBuffer = flatbuffers.ByteBuffer;\r\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\r\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\r\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\r\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\r\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\r\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\r\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\r\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\r\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\r\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\r\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\r\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\r\n\r\nimport {\r\n    DataType, Dictionary, TimeBitWidth,\r\n    Utf8, Binary, Decimal, FixedSizeBinary,\r\n    List, FixedSizeList, Map_, Struct, Union,\r\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\r\n} from '../../type';\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class Message<T extends MessageHeader = any> {\r\n\r\n    /** @nocollapse */\r\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\r\n        const message = new Message(0, MetadataVersion.V4, headerType);\r\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\r\n        return message;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static decode(buf: ArrayBufferViewInput) {\r\n        buf = new ByteBuffer(toUint8Array(buf));\r\n        const _message = _Message.getRootAsMessage(buf);\r\n        const bodyLength: Long = _message.bodyLength()!;\r\n        const version: MetadataVersion = _message.version();\r\n        const headerType: MessageHeader = _message.headerType();\r\n        const message = new Message(bodyLength, version, headerType);\r\n        message._createHeader = decodeMessageHeader(_message, headerType);\r\n        return message;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static encode<T extends MessageHeader>(message: Message<T>) {\r\n        let b = new Builder(), headerOffset = -1;\r\n        if (message.isSchema()) {\r\n            headerOffset = Schema.encode(b, message.header() as Schema);\r\n        } else if (message.isRecordBatch()) {\r\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\r\n        } else if (message.isDictionaryBatch()) {\r\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\r\n        }\r\n        _Message.startMessage(b);\r\n        _Message.addVersion(b, MetadataVersion.V4);\r\n        _Message.addHeader(b, headerOffset);\r\n        _Message.addHeaderType(b, message.headerType);\r\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\r\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\r\n        return b.asUint8Array();\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\r\n        if (header instanceof Schema) {\r\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\r\n        }\r\n        if (header instanceof RecordBatch) {\r\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\r\n        }\r\n        if (header instanceof DictionaryBatch) {\r\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\r\n        }\r\n        throw new Error(`Unrecognized Message header: ${header}`);\r\n    }\r\n\r\n    // @ts-ignore\r\n    public body: Uint8Array;\r\n    protected _headerType: T;\r\n    protected _bodyLength: number;\r\n    protected _version: MetadataVersion;\r\n    public get type() { return this.headerType; }\r\n    public get version() { return this._version; }\r\n    public get headerType() { return this._headerType; }\r\n    public get bodyLength() { return this._bodyLength; }\r\n    // @ts-ignore\r\n    protected _createHeader: MessageHeaderDecoder;\r\n    public header() { return this._createHeader<T>(); }\r\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\r\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\r\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\r\n\r\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\r\n        this._version = version;\r\n        this._headerType = headerType;\r\n        this.body = new Uint8Array(0);\r\n        header && (this._createHeader = () => header);\r\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class RecordBatch {\r\n    protected _length: number;\r\n    protected _nodes: FieldNode[];\r\n    protected _buffers: BufferRegion[];\r\n    public get nodes() { return this._nodes; }\r\n    public get length() { return this._length; }\r\n    public get buffers() { return this._buffers; }\r\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\r\n        this._nodes = nodes;\r\n        this._buffers = buffers;\r\n        this._length = typeof length === 'number' ? length : length.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class DictionaryBatch {\r\n\r\n    protected _id: number;\r\n    protected _isDelta: boolean;\r\n    protected _data: RecordBatch;\r\n    public get id() { return this._id; }\r\n    public get data() { return this._data; }\r\n    public get isDelta() { return this._isDelta; }\r\n    public get length(): number { return this.data.length; }\r\n    public get nodes(): FieldNode[] { return this.data.nodes; }\r\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\r\n\r\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\r\n        this._data = data;\r\n        this._isDelta = isDelta;\r\n        this._id = typeof id === 'number' ? id : id.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class BufferRegion {\r\n    public offset: number;\r\n    public length: number;\r\n    constructor(offset: Long | number, length: Long | number) {\r\n        this.offset = typeof offset === 'number' ? offset : offset.low;\r\n        this.length = typeof length === 'number' ? length : length.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class FieldNode {\r\n    public length: number;\r\n    public nullCount: number;\r\n    constructor(length: Long | number, nullCount: Long | number) {\r\n        this.length = typeof length === 'number' ? length : length.low;\r\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\r\n    return (() => {\r\n        switch (type) {\r\n            case MessageHeader.Schema: return Schema.fromJSON(message);\r\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\r\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\r\n        }\r\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\r\n    }) as MessageHeaderDecoder;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\r\n    return (() => {\r\n        switch (type) {\r\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\r\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\r\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\r\n        }\r\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\r\n    }) as MessageHeaderDecoder;\r\n}\r\n\r\nField['encode'] = encodeField;\r\nField['decode'] = decodeField;\r\nField['fromJSON'] = fieldFromJSON;\r\n\r\nSchema['encode'] = encodeSchema;\r\nSchema['decode'] = decodeSchema;\r\nSchema['fromJSON'] = schemaFromJSON;\r\n\r\nRecordBatch['encode'] = encodeRecordBatch;\r\nRecordBatch['decode'] = decodeRecordBatch;\r\nRecordBatch['fromJSON'] = recordBatchFromJSON;\r\n\r\nDictionaryBatch['encode'] = encodeDictionaryBatch;\r\nDictionaryBatch['decode'] = decodeDictionaryBatch;\r\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\r\n\r\nFieldNode['encode'] = encodeFieldNode;\r\nFieldNode['decode'] = decodeFieldNode;\r\n\r\nBufferRegion['encode'] = encodeBufferRegion;\r\nBufferRegion['decode'] = decodeBufferRegion;\r\n\r\ndeclare module '../../schema' {\r\n    namespace Field {\r\n        export { encodeField as encode };\r\n        export { decodeField as decode };\r\n        export { fieldFromJSON as fromJSON };\r\n    }\r\n    namespace Schema {\r\n        export { encodeSchema as encode };\r\n        export { decodeSchema as decode };\r\n        export { schemaFromJSON as fromJSON };\r\n    }\r\n}\r\n\r\ndeclare module './message' {\r\n    namespace RecordBatch {\r\n        export { encodeRecordBatch as encode };\r\n        export { decodeRecordBatch as decode };\r\n        export { recordBatchFromJSON as fromJSON };\r\n    }\r\n    namespace DictionaryBatch {\r\n        export { encodeDictionaryBatch as encode };\r\n        export { decodeDictionaryBatch as decode };\r\n        export { dictionaryBatchFromJSON as fromJSON };\r\n    }\r\n    namespace FieldNode {\r\n        export { encodeFieldNode as encode };\r\n        export { decodeFieldNode as decode };\r\n    }\r\n    namespace BufferRegion {\r\n        export { encodeBufferRegion as encode };\r\n        export { decodeBufferRegion as decode };\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\r\n    const fields = decodeSchemaFields(_schema, dictionaries);\r\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\r\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\r\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeBufferRegion(b: _Buffer) {\r\n    return new BufferRegion(b.offset(), b.length());\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldNode(f: _FieldNode) {\r\n    return new FieldNode(f.length(), f.nullCount());\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldNodes(batch: _RecordBatch) {\r\n    const nodes = [] as FieldNode[];\r\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\r\n        if (f = batch.nodes(i)) {\r\n            nodes[++j] = FieldNode.decode(f);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\r\n    const bufferRegions = [] as BufferRegion[];\r\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\r\n        if (b = batch.buffers(i)) {\r\n        // If this Arrow buffer was written before version 4,\r\n        // advance the buffer's bb_pos 8 bytes to skip past\r\n        // the now-removed page_id field\r\n        if (version < MetadataVersion.V4) {\r\n                b.bb_pos += (8 * (i + 1));\r\n            }\r\n            bufferRegions[++j] = BufferRegion.decode(b);\r\n        }\r\n    }\r\n    return bufferRegions;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\r\n    const fields = [] as Field[];\r\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\r\n        if (f = schema.fields(i)) {\r\n            fields[++j] = Field.decode(f, dictionaries);\r\n        }\r\n    }\r\n    return fields;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\r\n    const children = [] as Field[];\r\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\r\n        if (f = field.children(i)) {\r\n            children[++j] = Field.decode(f, dictionaries);\r\n        }\r\n    }\r\n    return children;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\r\n\r\n    let id: number;\r\n    let field: Field | void;\r\n    let type: DataType<any>;\r\n    let keys: _Int | TKeys | null;\r\n    let dictType: Dictionary;\r\n    let dictMeta: _DictionaryEncoding | null;\r\n\r\n    // If no dictionary encoding\r\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\r\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\r\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\r\n    }\r\n    // tslint:disable\r\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\r\n    // the data type and child fields, then wrap in a Dictionary type and insert the\r\n    // data type into the dictionary types map.\r\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\r\n        // a dictionary index defaults to signed 32 bit int if unspecified\r\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\r\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\r\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\r\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\r\n    }\r\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\r\n    // data type and wrap in a new Dictionary type and field.\r\n    else {\r\n        // a dictionary index defaults to signed 32 bit int if unspecified\r\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\r\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\r\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\r\n    }\r\n    return field || null;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\r\n    const data = new Map<string, string>();\r\n    if (parent) {\r\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\r\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\r\n                data.set(key, entry.value()!);\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeIndexType(_type: _Int) {\r\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\r\n\r\n    const typeId = f.typeType();\r\n\r\n    switch (typeId) {\r\n        case Type.NONE:    return new Null();\r\n        case Type.Null:    return new Null();\r\n        case Type.Binary:  return new Binary();\r\n        case Type.Utf8:    return new Utf8();\r\n        case Type.Bool:    return new Bool();\r\n        case Type.List:    return new List((children || [])[0]);\r\n        case Type.Struct_: return new Struct(children || []);\r\n    }\r\n\r\n    switch (typeId) {\r\n        case Type.Int: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\r\n            return new Int(t.isSigned(), t.bitWidth());\r\n        }\r\n        case Type.FloatingPoint: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\r\n            return new Float(t.precision());\r\n        }\r\n        case Type.Decimal: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\r\n            return new Decimal(t.scale(), t.precision());\r\n        }\r\n        case Type.Date: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\r\n            return new Date_(t.unit());\r\n        }\r\n        case Type.Time: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\r\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\r\n        }\r\n        case Type.Timestamp: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\r\n            return new Timestamp(t.unit(), t.timezone());\r\n        }\r\n        case Type.Interval: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\r\n            return new Interval(t.unit());\r\n        }\r\n        case Type.Union: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\r\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\r\n        }\r\n        case Type.FixedSizeBinary: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\r\n            return new FixedSizeBinary(t.byteWidth());\r\n        }\r\n        case Type.FixedSizeList: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\r\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\r\n        }\r\n        case Type.Map: {\r\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\r\n            return new Map_((children || [])[0], t.keysSorted());\r\n        }\r\n    }\r\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeSchema(b: Builder, schema: Schema) {\r\n\r\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\r\n\r\n    _Schema.startFieldsVector(b, fieldOffsets.length);\r\n\r\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\r\n\r\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\r\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\r\n            const key = b.createString(`${k}`);\r\n            const val = b.createString(`${v}`);\r\n            _KeyValue.startKeyValue(b);\r\n            _KeyValue.addKey(b, key);\r\n            _KeyValue.addValue(b, val);\r\n            return _KeyValue.endKeyValue(b);\r\n        }));\r\n\r\n    _Schema.startSchema(b);\r\n    _Schema.addFields(b, fieldsVectorOffset);\r\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\r\n\r\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\r\n\r\n    return _Schema.endSchema(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeField(b: Builder, field: Field) {\r\n\r\n    let nameOffset = -1;\r\n    let typeOffset = -1;\r\n    let dictionaryOffset = -1;\r\n\r\n    let type = field.type;\r\n    let typeId: Type = <any> field.typeId;\r\n\r\n    if (!DataType.isDictionary(type)) {\r\n        typeOffset = typeAssembler.visit(type, b)!;\r\n    } else {\r\n        typeId = type.dictionary.typeId;\r\n        dictionaryOffset = typeAssembler.visit(type, b)!;\r\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\r\n    }\r\n\r\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\r\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\r\n\r\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\r\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\r\n            const key = b.createString(`${k}`);\r\n            const val = b.createString(`${v}`);\r\n            _KeyValue.startKeyValue(b);\r\n            _KeyValue.addKey(b, key);\r\n            _KeyValue.addValue(b, val);\r\n            return _KeyValue.endKeyValue(b);\r\n        }));\r\n\r\n    if (field.name) {\r\n        nameOffset = b.createString(field.name);\r\n    }\r\n\r\n    _Field.startField(b);\r\n    _Field.addType(b, typeOffset);\r\n    _Field.addTypeType(b, typeId);\r\n    _Field.addChildren(b, childrenVectorOffset);\r\n    _Field.addNullable(b, !!field.nullable);\r\n\r\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\r\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\r\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\r\n\r\n    return _Field.endField(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\r\n\r\n    const nodes = recordBatch.nodes || [];\r\n    const buffers = recordBatch.buffers || [];\r\n\r\n    _RecordBatch.startNodesVector(b, nodes.length);\r\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\r\n\r\n    const nodesVectorOffset = b.endVector();\r\n\r\n    _RecordBatch.startBuffersVector(b, buffers.length);\r\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\r\n\r\n    const buffersVectorOffset = b.endVector();\r\n\r\n    _RecordBatch.startRecordBatch(b);\r\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\r\n    _RecordBatch.addNodes(b, nodesVectorOffset);\r\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\r\n    return _RecordBatch.endRecordBatch(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\r\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\r\n    _DictionaryBatch.startDictionaryBatch(b);\r\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\r\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\r\n    _DictionaryBatch.addData(b, dataOffset);\r\n    return _DictionaryBatch.endDictionaryBatch(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\r\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\r\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\r\n}\r\n\r\n/** @ignore */\r\nconst platformIsLittleEndian = (function() {\r\n    const buffer = new ArrayBuffer(2);\r\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\r\n    // Int16Array uses the platform's endianness.\r\n    return new Int16Array(buffer)[0] === 256;\r\n})();\r\n\r\n/** @ignore */\r\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\r\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\r\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\r\n"]}