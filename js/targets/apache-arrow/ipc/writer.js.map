{"version":3,"sources":["ipc/writer.ts"],"names":[],"mappings":";AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;;;AAErB,oCAAiC;AACjC,uCAAkC;AAElC,sCAAmC;AACnC,kCAAmC;AACnC,sCAA0C;AAC1C,gDAA6C;AAC7C,+CAA+C;AAC/C,0CAAoD;AACpD,kCAAyD;AACzD,yCAA4D;AAC5D,gEAA6D;AAC7D,oEAAiE;AACjE,wEAAqE;AACrE,2CAAoE;AACpE,gDAAmF;AACnF,iDAAuF;AACvF,2CAA6H;AAgB7H,MAAa,iBAA+D,SAAQ,4BAA2B;IAiB3G,YAAY,OAAwC;QAChD,KAAK,EAAE,CAAC;QAMF,cAAS,GAAG,CAAC,CAAC;QACd,aAAQ,GAAG,KAAK,CAAC;QAG3B,aAAa;QACH,UAAK,GAAG,IAAI,uBAAc,EAAE,CAAC;QAC7B,YAAO,GAAkB,IAAI,CAAC;QAC9B,sBAAiB,GAAgB,EAAE,CAAC;QACpC,uBAAkB,GAAgB,EAAE,CAAC;QACrC,4BAAuB,GAAG,IAAI,GAAG,EAAkB,CAAC;QAd1D,iBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,oBAAoB,EAAE,KAAK,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,YAAY,GAAG,CAAC,OAAO,OAAO,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;QAC5F,IAAI,CAAC,qBAAqB,GAAG,CAAC,OAAO,OAAO,CAAC,oBAAoB,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,KAAK,CAAC;IAC5H,CAAC;IApBD,kBAAkB;IAClB,aAAa;IACN,MAAM,CAAC,WAAW,CAAC,OAAmE;QACzF,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;IACvE,CAAC;IACD,kBAAkB;IACX,MAAM,CAAC,UAAU;IACpB,aAAa;IACb,gBAA6E;IAC7E,aAAa;IACb,gBAAyD;QAEzD,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;IACtE,CAAC;IAsBM,QAAQ,CAAC,OAAY,KAAK;QAC7B,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAA6B,CAAC;IACjE,CAAC;IAGM,YAAY,CAAC,OAAY,KAAK;QACjC,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAqC,CAAC;IAC7E,CAAC;IAMM,QAAQ,CAAC,KAA6F;QACzG,IAAI,kBAAS,CAAM,KAAK,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9C;aAAM,IAAI,wBAAe,CAAiB,KAAK,CAAC,EAAE;YAC/C,OAAO,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACrC;QACD,OAAO,QAAQ,CAAC,IAAI,EAAQ,KAAK,CAAC,CAAC;IACvC,CAAC;IAED,IAAW,MAAM,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1C,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACvE,WAAW,CAAC,OAAkC,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3F,YAAY,CAAC,OAA0C,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAErG,KAAK;QACR,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACtC,CAAC;IACM,KAAK,CAAC,MAAY;QACrB,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;IACM,MAAM;QACT,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC;IAChB,CAAC;IACM,KAAK,CAAC,OAA2C,IAAI,CAAC,KAAK,EAAE,SAA2B,IAAI;QAE/F,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,YAAY,uBAAc,CAAC,EAAE;YAC3D,IAAI,CAAC,KAAK,GAAG,IAAsB,CAAC;SACvC;aAAM;YACH,IAAI,CAAC,KAAK,GAAG,IAAI,uBAAc,EAAE,CAAC;YAClC,IAAI,IAAI,IAAI,4BAAmB,CAAC,IAAI,CAAC,EAAE;gBACnC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACpD;iBAAM,IAAI,IAAI,IAAI,6BAAoB,CAAC,IAAI,CAAC,EAAE;gBAC3C,IAAI,CAAC,YAAY,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvD;SACJ;QAED,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACnC;QAED,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,uBAAuB,GAAG,IAAI,GAAG,EAAE,CAAC;QAEzC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE;YAC9C,IAAI,MAAM,KAAK,IAAI,EAAE;gBACjB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;gBACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;aACvB;iBAAM;gBACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;gBACtB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aAC7B;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,OAAqE;QAE9E,IAAI,MAAM,GAAqB,IAAI,CAAC;QAEpC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAClD;aAAM,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,EAAE;YAClD,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,SAAS,CAAC;SACrC;aAAM,IAAI,OAAO,YAAY,aAAK,IAAI,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE;YAC/D,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,SAAS,CAAC;SACrC;aAAM,IAAI,OAAO,YAAY,yBAAW,IAAI,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE;YACrE,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,SAAS,CAAC;SACrC;QAED,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAC3C,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;gBACpC,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;aACvB;YACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SAClC;QAED,IAAI,OAAO,YAAY,yBAAW,EAAE;YAChC,IAAI,CAAC,CAAC,OAAO,YAAY,kDAAoC,CAAC,EAAE;gBAC5D,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;aACnC;SACJ;aAAM,IAAI,OAAO,YAAY,aAAK,EAAE;YACjC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SACjC;aAAM,IAAI,mBAAU,CAAC,OAAO,CAAC,EAAE;YAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SAC1B;IACL,CAAC;IAES,aAAa,CAA0B,OAAmB,EAAE,SAAS,GAAG,CAAC;QAE/E,MAAM,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;QACxB,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACvC,MAAM,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC;QACzC,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvD,MAAM,WAAW,GAAG,CAAC,cAAc,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3D,MAAM,aAAa,GAAG,WAAW,GAAG,cAAc,GAAG,UAAU,CAAC;QAEhE,IAAI,OAAO,CAAC,UAAU,KAAK,oBAAa,CAAC,WAAW,EAAE;YAClD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,gBAAS,CAAC,WAAW,EAAE,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;SAChG;aAAM,IAAI,OAAO,CAAC,UAAU,KAAK,oBAAa,CAAC,eAAe,EAAE;YAC7D,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,gBAAS,CAAC,WAAW,EAAE,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;SAC/F;QAED,4EAA4E;QAC5E,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;YAC7B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAClC;QACD,qDAAqD;QACrD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC;QACrD,uBAAuB;QACvB,IAAI,cAAc,GAAG,CAAC,EAAE;YAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAAE;QAChD,oBAAoB;QACpB,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IAC7C,CAAC;IAES,MAAM,CAAC,KAA2B;QACxC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,MAAM,MAAM,GAAG,qBAAY,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,MAAM,IAAI,MAAM,CAAC,UAAU,GAAG,CAAC,EAAE;gBACjC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACzB,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,UAAU,CAAC;aACvC;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,YAAY,CAAC,MAAiB;QACpC,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,aAAa;IACH,YAAY,CAAC,MAAiB;QACpC,YAAY;QACZ,OAAO,IAAI,CAAC,qBAAqB;YAC7B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;IAES,WAAW;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,eAAK,CAAC,CAAC;IAC9B,CAAC;IAES,aAAa,CAAC,MAAc;QAClC,OAAO,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACnE,CAAC;IAES,iBAAiB,CAAC,KAAqB;QAC7C,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,iCAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACtF,MAAM,WAAW,GAAG,IAAI,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;QACjF,MAAM,OAAO,GAAG,iBAAO,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QACtD,OAAO,IAAI;aACN,kBAAkB,CAAC,KAAK,CAAC;aACzB,aAAa,CAAC,OAAO,CAAC;aACtB,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAES,qBAAqB,CAAC,UAAkB,EAAE,EAAU,EAAE,OAAO,GAAG,KAAK;QAC3E,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtG,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,iCAAe,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC3F,MAAM,WAAW,GAAG,IAAI,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;QACtF,MAAM,eAAe,GAAG,IAAI,QAAQ,CAAC,eAAe,CAAC,WAAW,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;QAC/E,MAAM,OAAO,GAAG,iBAAO,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QAC1D,OAAO,IAAI;aACN,aAAa,CAAC,OAAO,CAAC;aACtB,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAES,iBAAiB,CAAC,OAA0B;QAClD,IAAI,MAAuB,CAAC;QAC5B,IAAI,IAAY,EAAE,OAAe,CAAC;QAClC,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG;YAC3C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBACzD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACpB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE;oBAC1C,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;iBAC/B;aACJ;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,kBAAkB,CAAC,KAAqB;QAC9C,KAAK,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,IAAI,KAAK,CAAC,YAAY,EAAE;YAC7C,IAAI,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YACvD,IAAI,MAAM,KAAK,CAAC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpE,MAAM,MAAM,GAAG,QAAQ,IAAI,UAAU,CAAC,CAAC,CAAE,UAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;gBAClF,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;oBACxB,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,EAAE,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;oBAClD,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;iBAC1B;aACJ;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAxPD,8CAwPC;AAED,cAAc;AACd,MAAa,uBAAqE,SAAQ,iBAAoB;IAK1G,kBAAkB;IACX,MAAM,CAAC,QAAQ,CAA8C,KAAU,EAAE,OAAwC;QACpH,MAAM,MAAM,GAAG,IAAI,uBAAuB,CAAI,OAAO,CAAC,CAAC;QACvD,IAAI,kBAAS,CAAM,KAAK,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAChD;aAAM,IAAI,wBAAe,CAAiB,KAAK,CAAC,EAAE;YAC/C,OAAO,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACvC;QACD,OAAO,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC;CACJ;AAfD,0DAeC;AAED,cAAc;AACd,MAAa,qBAAmE,SAAQ,iBAAoB;IAKxG,kBAAkB;IACX,MAAM,CAAC,QAAQ,CAA8C,KAAU;QAC1E,MAAM,MAAM,GAAG,IAAI,qBAAqB,EAAK,CAAC;QAC9C,IAAI,kBAAS,CAAM,KAAK,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAChD;aAAM,IAAI,wBAAe,CAAiB,KAAK,CAAC,EAAE;YAC/C,OAAO,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACvC;QACD,OAAO,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC;IAED;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED,aAAa;IACH,YAAY,CAAC,MAAiB;QACpC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC;IAES,YAAY,CAAC,MAAiB;QACpC,MAAM,MAAM,GAAG,aAAM,CAAC,MAAM,CAAC,IAAI,aAAM,CACnC,MAAM,EAAE,sBAAe,CAAC,EAAE,EAC1B,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,iBAAiB,CAClD,CAAC,CAAC;QACH,OAAO,KAAK;aACP,YAAY,CAAC,MAAM,CAAC,CAAC,mCAAmC;aACxD,MAAM,CAAC,MAAM,CAAC,CAAC,uBAAuB;aACtC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,8BAA8B;aACvE,WAAW,EAAE,CAAC,CAAC,wBAAwB;IAChD,CAAC;CACJ;AArCD,sDAqCC;AAED,cAAc;AACd,MAAa,qBAAmE,SAAQ,iBAAoB;IAexG;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,CAAC;IAbD,kBAAkB;IACX,MAAM,CAAC,QAAQ,CAA8E,KAAU;QAC1G,OAAO,IAAI,qBAAqB,EAAK,CAAC,QAAQ,CAAC,KAAY,CAAC,CAAC;IACjE,CAAC;IAYS,aAAa,KAAK,OAAO,IAAI,CAAC,CAAC,CAAC;IAC1C,aAAa;IACH,YAAY,CAAC,MAAiB,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC;IAChD,YAAY,CAAC,MAAiB;QACpC,OAAO,IAAI,CAAC,MAAM,CAAC,kBACf,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CACtE,EAAE,CAAC,CAAC;IACR,CAAC;IACS,kBAAkB,CAAC,KAAqB;QAC9C,IAAI,KAAK,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,EAAE;YAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACS,qBAAqB,CAAC,UAAkB,EAAE,EAAU,EAAE,OAAO,GAAG,KAAK;QAC3E,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QACtE,IAAI,CAAC,MAAM,CAAC,GAAG,qBAAqB,CAAC,UAAU,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QACjE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,gBAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC;IAChB,CAAC;IACS,iBAAiB,CAAC,KAAqB;QAC7C,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC;IAChB,CAAC;IACM,KAAK;QAER,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/B,IAAI,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;YACxC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,aAAa,EAAE;gBACpC,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;aACnC;YACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SACxB;QAED,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAChC,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG;gBACvD,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;gBAC7D,IAAI,CAAC,MAAM,CAAC,GAAG,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC5D,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,gBAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACxD;YACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SACxB;QAED,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACtB;QAED,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QAEzB,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;CACJ;AA5ED,sDA4EC;AAED,cAAc;AACd,SAAS,QAAQ,CAA8C,MAA4B,EAAE,KAA0C;IACnI,IAAI,MAAM,GAAG,KAAiC,CAAC;IAC/C,IAAI,KAAK,YAAY,aAAK,EAAE;QACxB,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QACtB,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;KACzC;IACD,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;QACxB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACvB;IACD,OAAO,MAAM,CAAC,MAAM,EAAE,CAAC;AAC3B,CAAC;AAED,cAAc;AACd,KAAK,UAAU,aAAa,CAA8C,MAA4B,EAAE,OAAsC;IAC1I,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,OAAO,EAAE;QAC/B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACvB;IACD,OAAO,MAAM,CAAC,MAAM,EAAE,CAAC;AAC3B,CAAC;AAED,cAAc;AACd,SAAS,WAAW,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAS;IAChD,MAAM,SAAS,GAAG,IAAI,qCAAiB,EAAE,CAAC;IAC1C,OAAO;QACH,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ;QAClC,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;QAC7B,UAAU,EAAE,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC;QAClD,YAAY,EAAE,CAAC,eAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACrD,IAAI,EAAE,IAAI,CAAC,EAAE;YACb,WAAW,EAAE,IAAI,CAAC,SAAS;YAC3B,WAAW,EAAE,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;SAC7C;KACJ,CAAC;AACN,CAAC;AAED,cAAc;AACd,SAAS,qBAAqB,CAAC,UAAkB,EAAE,EAAU,EAAE,OAAO,GAAG,KAAK;IAC1E,MAAM,KAAK,GAAG,IAAI,cAAK,CAAC,GAAG,EAAE,EAAE,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;IAC5E,MAAM,OAAO,GAAG,yCAAmB,CAAC,QAAQ,CAAC,IAAI,eAAM,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC9E,OAAO,IAAI,CAAC,SAAS,CAAC;QAClB,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,OAAO;QAClB,MAAM,EAAE;YACJ,OAAO,EAAE,UAAU,CAAC,MAAM;YAC1B,SAAS,EAAE,OAAO;SACrB;KACJ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAChB,CAAC;AAED,cAAc;AACd,SAAS,iBAAiB,CAAC,OAAoB;IAC3C,OAAO,IAAI,CAAC,SAAS,CAAC;QAClB,OAAO,EAAE,OAAO,CAAC,MAAM;QACvB,SAAS,EAAE,yCAAmB,CAAC,QAAQ,CAAC,OAAO,CAAC;KACnD,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAChB,CAAC","file":"writer.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Table } from '../table';\r\nimport { MAGIC } from './message';\r\nimport { Vector } from '../vector';\r\nimport { Column } from '../column';\r\nimport { DataType } from '../type';\r\nimport { Schema, Field } from '../schema';\r\nimport { Message } from './metadata/message';\r\nimport * as metadata from './metadata/message';\r\nimport { FileBlock, Footer } from './metadata/file';\r\nimport { MessageHeader, MetadataVersion } from '../enum';\r\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\r\nimport { VectorAssembler } from '../visitor/vectorassembler';\r\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\r\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\r\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\r\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\r\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\r\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\r\n\r\nexport interface RecordBatchStreamWriterOptions {\r\n    /**\r\n     *\r\n     */\r\n    autoDestroy?: boolean;\r\n    /**\r\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\r\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\r\n     * length instead of 8.\r\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\r\n     */\r\n    writeLegacyIpcFormat?: boolean;\r\n}\r\n\r\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\r\n\r\n    /** @nocollapse */\r\n    // @ts-ignore\r\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\r\n        throw new Error(`\"throughNode\" not available in this environment`);\r\n    }\r\n    /** @nocollapse */\r\n    public static throughDOM<T extends { [key: string]: DataType }>(\r\n        // @ts-ignore\r\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\r\n        // @ts-ignore\r\n        readableStrategy?: { highWaterMark?: number, size?: any }\r\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\r\n        throw new Error(`\"throughDOM\" not available in this environment`);\r\n    }\r\n\r\n    constructor(options?: RecordBatchStreamWriterOptions) {\r\n        super();\r\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\r\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\r\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\r\n    }\r\n\r\n    protected _position = 0;\r\n    protected _started = false;\r\n    protected _autoDestroy: boolean;\r\n    protected _writeLegacyIpcFormat: boolean;\r\n    // @ts-ignore\r\n    protected _sink = new AsyncByteQueue();\r\n    protected _schema: Schema | null = null;\r\n    protected _dictionaryBlocks: FileBlock[] = [];\r\n    protected _recordBatchBlocks: FileBlock[] = [];\r\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\r\n\r\n    public toString(sync: true): string;\r\n    public toString(sync?: false): Promise<string>;\r\n    public toString(sync: any = false) {\r\n        return this._sink.toString(sync) as Promise<string> | string;\r\n    }\r\n    public toUint8Array(sync: true): Uint8Array;\r\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\r\n    public toUint8Array(sync: any = false) {\r\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\r\n    }\r\n\r\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\r\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\r\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\r\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\r\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\r\n        if (isPromise<any>(input)) {\r\n            return input.then((x) => this.writeAll(x));\r\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\r\n            return writeAllAsync(this, input);\r\n        }\r\n        return writeAll(this, <any> input);\r\n    }\r\n\r\n    public get closed() { return this._sink.closed; }\r\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\r\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\r\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\r\n\r\n    public close() {\r\n        return this.reset()._sink.close();\r\n    }\r\n    public abort(reason?: any) {\r\n        return this.reset()._sink.abort(reason);\r\n    }\r\n    public finish() {\r\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\r\n        return this;\r\n    }\r\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\r\n\r\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\r\n            this._sink = sink as AsyncByteQueue;\r\n        } else {\r\n            this._sink = new AsyncByteQueue();\r\n            if (sink && isWritableDOMStream(sink)) {\r\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\r\n            } else if (sink && isWritableNodeStream(sink)) {\r\n                this.toNodeStream({ objectMode: false }).pipe(sink);\r\n            }\r\n        }\r\n\r\n        if (this._started && this._schema) {\r\n            this._writeFooter(this._schema);\r\n        }\r\n\r\n        this._started = false;\r\n        this._dictionaryBlocks = [];\r\n        this._recordBatchBlocks = [];\r\n        this._dictionaryDeltaOffsets = new Map();\r\n\r\n        if (!schema || !(schema.compareTo(this._schema))) {\r\n            if (schema === null) {\r\n                this._position = 0;\r\n                this._schema = null;\r\n            } else {\r\n                this._started = true;\r\n                this._schema = schema;\r\n                this._writeSchema(schema);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\r\n\r\n        let schema: Schema<T> | null = null;\r\n\r\n        if (!this._sink) {\r\n            throw new Error(`RecordBatchWriter is closed`);\r\n        } else if (payload === null || payload === undefined) {\r\n            return this.finish() && undefined;\r\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\r\n            return this.finish() && undefined;\r\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\r\n            return this.finish() && undefined;\r\n        }\r\n\r\n        if (schema && !schema.compareTo(this._schema)) {\r\n            if (this._started && this._autoDestroy) {\r\n                return this.close();\r\n            }\r\n            this.reset(this._sink, schema);\r\n        }\r\n\r\n        if (payload instanceof RecordBatch) {\r\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\r\n                this._writeRecordBatch(payload);\r\n            }\r\n        } else if (payload instanceof Table) {\r\n            this.writeAll(payload.chunks);\r\n        } else if (isIterable(payload)) {\r\n            this.writeAll(payload);\r\n        }\r\n    }\r\n\r\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\r\n\r\n        const a = alignment - 1;\r\n        const buffer = Message.encode(message);\r\n        const flatbufferSize = buffer.byteLength;\r\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\r\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\r\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\r\n\r\n        if (message.headerType === MessageHeader.RecordBatch) {\r\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\r\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\r\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\r\n        }\r\n\r\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\r\n        if (!this._writeLegacyIpcFormat) {\r\n            this._write(Int32Array.of(-1));\r\n        }\r\n        // Write the flatbuffer size prefix including padding\r\n        this._write(Int32Array.of(alignedSize - prefixSize));\r\n        // Write the flatbuffer\r\n        if (flatbufferSize > 0) { this._write(buffer); }\r\n        // Write any padding\r\n        return this._writePadding(nPaddingBytes);\r\n    }\r\n\r\n    protected _write(chunk: ArrayBufferViewInput) {\r\n        if (this._started) {\r\n            const buffer = toUint8Array(chunk);\r\n            if (buffer && buffer.byteLength > 0) {\r\n                this._sink.write(buffer);\r\n                this._position += buffer.byteLength;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected _writeSchema(schema: Schema<T>) {\r\n        return this._writeMessage(Message.from(schema));\r\n    }\r\n\r\n    // @ts-ignore\r\n    protected _writeFooter(schema: Schema<T>) {\r\n        // eos bytes\r\n        return this._writeLegacyIpcFormat\r\n            ? this._write(Int32Array.of(0))\r\n            : this._write(Int32Array.of(-1, 0));\r\n    }\r\n\r\n    protected _writeMagic() {\r\n        return this._write(MAGIC);\r\n    }\r\n\r\n    protected _writePadding(nBytes: number) {\r\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\r\n    }\r\n\r\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\r\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\r\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\r\n        const message = Message.from(recordBatch, byteLength);\r\n        return this\r\n            ._writeDictionaries(batch)\r\n            ._writeMessage(message)\r\n            ._writeBodyBuffers(buffers);\r\n    }\r\n\r\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\r\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\r\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\r\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\r\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\r\n        const message = Message.from(dictionaryBatch, byteLength);\r\n        return this\r\n            ._writeMessage(message)\r\n            ._writeBodyBuffers(buffers);\r\n    }\r\n\r\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\r\n        let buffer: ArrayBufferView;\r\n        let size: number, padding: number;\r\n        for (let i = -1, n = buffers.length; ++i < n;) {\r\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\r\n                this._write(buffer);\r\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\r\n                    this._writePadding(padding);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected _writeDictionaries(batch: RecordBatch<T>) {\r\n        for (let [id, dictionary] of batch.dictionaries) {\r\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\r\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\r\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\r\n                for (const chunk of chunks) {\r\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\r\n                    offset += chunk.length;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\r\n    /** @nocollapse */\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\r\n        const writer = new RecordBatchStreamWriter<T>(options);\r\n        if (isPromise<any>(input)) {\r\n            return input.then((x) => writer.writeAll(x));\r\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\r\n            return writeAllAsync(writer, input);\r\n        }\r\n        return writeAll(writer, input);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\r\n    /** @nocollapse */\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\r\n        const writer = new RecordBatchFileWriter<T>();\r\n        if (isPromise<any>(input)) {\r\n            return input.then((x) => writer.writeAll(x));\r\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\r\n            return writeAllAsync(writer, input);\r\n        }\r\n        return writeAll(writer, input);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this._autoDestroy = true;\r\n    }\r\n\r\n    // @ts-ignore\r\n    protected _writeSchema(schema: Schema<T>) {\r\n        return this._writeMagic()._writePadding(2);\r\n    }\r\n\r\n    protected _writeFooter(schema: Schema<T>) {\r\n        const buffer = Footer.encode(new Footer(\r\n            schema, MetadataVersion.V4,\r\n            this._recordBatchBlocks, this._dictionaryBlocks\r\n        ));\r\n        return super\r\n            ._writeFooter(schema) // EOS bytes for sequential readers\r\n            ._write(buffer) // Write the flatbuffer\r\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\r\n            ._writeMagic(); // then the magic suffix\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\r\n\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\r\n    // @ts-ignore\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\r\n    /** @nocollapse */\r\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\r\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\r\n    }\r\n\r\n    private _recordBatches: RecordBatch[];\r\n    private _dictionaries: RecordBatch[];\r\n\r\n    constructor() {\r\n        super();\r\n        this._autoDestroy = true;\r\n        this._recordBatches = [];\r\n        this._dictionaries = [];\r\n    }\r\n\r\n    protected _writeMessage() { return this; }\r\n    // @ts-ignore\r\n    protected _writeFooter(schema: Schema<T>) { return this; }\r\n    protected _writeSchema(schema: Schema<T>) {\r\n        return this._write(`{\\n  \"schema\": ${\r\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\r\n        }`);\r\n    }\r\n    protected _writeDictionaries(batch: RecordBatch<T>) {\r\n        if (batch.dictionaries.size > 0) {\r\n            this._dictionaries.push(batch);\r\n        }\r\n        return this;\r\n    }\r\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\r\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\r\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\r\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\r\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\r\n        return this;\r\n    }\r\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\r\n        this._writeDictionaries(batch);\r\n        this._recordBatches.push(batch);\r\n        return this;\r\n    }\r\n    public close() {\r\n\r\n        if (this._dictionaries.length > 0) {\r\n            this._write(`,\\n  \"dictionaries\": [\\n`);\r\n            for (const batch of this._dictionaries) {\r\n                super._writeDictionaries(batch);\r\n            }\r\n            this._write(`\\n  ]`);\r\n        }\r\n\r\n        if (this._recordBatches.length > 0) {\r\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\r\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\r\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\r\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\r\n            }\r\n            this._write(`\\n  ]`);\r\n        }\r\n\r\n        if (this._schema) {\r\n            this._write(`\\n}`);\r\n        }\r\n\r\n        this._dictionaries = [];\r\n        this._recordBatches = [];\r\n\r\n        return super.close();\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\r\n    let chunks = input as Iterable<RecordBatch<T>>;\r\n    if (input instanceof Table) {\r\n        chunks = input.chunks;\r\n        writer.reset(undefined, input.schema);\r\n    }\r\n    for (const batch of chunks) {\r\n        writer.write(batch);\r\n    }\r\n    return writer.finish();\r\n}\r\n\r\n/** @ignore */\r\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\r\n    for await (const batch of batches) {\r\n        writer.write(batch);\r\n    }\r\n    return writer.finish();\r\n}\r\n\r\n/** @ignore */\r\nfunction fieldToJSON({ name, type, nullable }: Field): object {\r\n    const assembler = new JSONTypeAssembler();\r\n    return {\r\n        'name': name, 'nullable': nullable,\r\n        'type': assembler.visit(type),\r\n        'children': (type.children || []).map(fieldToJSON),\r\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\r\n            'id': type.id,\r\n            'isOrdered': type.isOrdered,\r\n            'indexType': assembler.visit(type.indices)\r\n        }\r\n    };\r\n}\r\n\r\n/** @ignore */\r\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\r\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\r\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\r\n    return JSON.stringify({\r\n        'id': id,\r\n        'isDelta': isDelta,\r\n        'data': {\r\n            'count': dictionary.length,\r\n            'columns': columns\r\n        }\r\n    }, null, 2);\r\n}\r\n\r\n/** @ignore */\r\nfunction recordBatchToJSON(records: RecordBatch) {\r\n    return JSON.stringify({\r\n        'count': records.length,\r\n        'columns': JSONVectorAssembler.assemble(records)\r\n    }, null, 2);\r\n}\r\n"]}