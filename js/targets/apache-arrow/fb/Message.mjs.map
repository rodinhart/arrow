{"version":3,"sources":["fb/Message.ts"],"names":[],"mappings":"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","file":"Message.js","sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport { flatbuffers } from 'flatbuffers';\r\nimport * as NS7624605610262437867 from './Schema';\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\r\n}\r\n/**\r\n * ----------------------------------------------------------------------\r\n * The root Message type\r\n * This union enables us to easily send different message types without\r\n * redundant storage, and in the future we can easily add new message types.\r\n *\r\n * Arrow implementations do not need to implement all of the message types,\r\n * which may include experimental metadata types. For maximum compatibility,\r\n * it is best to send data using RecordBatch\r\n *\r\n * @enum {number}\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export enum MessageHeader {\r\n        NONE = 0,\r\n        Schema = 1,\r\n        DictionaryBatch = 2,\r\n        RecordBatch = 3,\r\n        Tensor = 4,\r\n        SparseTensor = 5\r\n    }\r\n}\r\n\r\n/**\r\n * ----------------------------------------------------------------------\r\n * Data structures for describing a table row batch (a collection of\r\n * equal-length Arrow arrays)\r\n * Metadata about a field at some level of a nested type tree (but not\r\n * its children).\r\n *\r\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\r\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\r\n * null_count: 0} for its Int16 node, as separate FieldNode structs\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class FieldNode {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns FieldNode\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * The number of value slots in the Arrow array at this level of a nested\r\n         * tree\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        length(): flatbuffers.Long {\r\n            return this.bb!.readInt64(this.bb_pos);\r\n        }\r\n\r\n        /**\r\n         * The number of observed nulls. Fields with null_count == 0 may choose not\r\n         * to write their physical validity bitmap out as a materialized buffer,\r\n         * instead setting the length of the bitmap buffer to 0.\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        nullCount(): flatbuffers.Long {\r\n            return this.bb!.readInt64(this.bb_pos + 8);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long length\r\n         * @param flatbuffers.Long null_count\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\r\n            builder.prep(8, 16);\r\n            builder.writeInt64(null_count);\r\n            builder.writeInt64(length);\r\n            return builder.offset();\r\n        }\r\n\r\n    }\r\n}\r\n/**\r\n * A data header describing the shared memory layout of a \"record\" or \"row\"\r\n * batch. Some systems call this a \"row batch\" internally and others a \"record\r\n * batch\".\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class RecordBatch {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns RecordBatch\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param RecordBatch= obj\r\n         * @returns RecordBatch\r\n         */\r\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\r\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * number of records / rows. The arrays in the batch should all have this\r\n         * length\r\n         *\r\n         * @returns flatbuffers.Long\r\n         */\r\n        length(): flatbuffers.Long {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n        }\r\n\r\n        /**\r\n         * Nodes correspond to the pre-ordered flattened logical schema\r\n         *\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\r\n         * @returns org.apache.arrow.flatbuf.FieldNode\r\n         */\r\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        nodesLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * Buffers correspond to the pre-ordered flattened buffer tree\r\n         *\r\n         * The number of buffers appended to this list depends on the schema. For\r\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\r\n         * bitmap and 1 for the values. For struct arrays, there will only be a\r\n         * single buffer for the validity (nulls) bitmap\r\n         *\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.Buffer= obj\r\n         * @returns org.apache.arrow.flatbuf.Buffer\r\n         */\r\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        buffersLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startRecordBatch(builder: flatbuffers.Builder) {\r\n            builder.startObject(3);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long length\r\n         */\r\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\r\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset nodesOffset\r\n         */\r\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(1, nodesOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(16, numElems, 8);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset buffersOffset\r\n         */\r\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(2, buffersOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(16, numElems, 8);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n            RecordBatch.startRecordBatch(builder);\r\n            RecordBatch.addLength(builder, length);\r\n            RecordBatch.addNodes(builder, nodesOffset);\r\n            RecordBatch.addBuffers(builder, buffersOffset);\r\n            return RecordBatch.endRecordBatch(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * For sending dictionary encoding information. Any Field can be\r\n * dictionary-encoded, but in this case none of its children may be\r\n * dictionary-encoded.\r\n * There is one vector / column per dictionary, but that vector / column\r\n * may be spread across multiple dictionary batches by using the isDelta\r\n * flag\r\n *\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class DictionaryBatch {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns DictionaryBatch\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param DictionaryBatch= obj\r\n         * @returns DictionaryBatch\r\n         */\r\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\r\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns flatbuffers.Long\r\n         */\r\n        id(): flatbuffers.Long {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n        }\r\n\r\n        /**\r\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\r\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\r\n         */\r\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * If isDelta is true the values in the dictionary are to be appended to a\r\n         * dictionary with the indicated id\r\n         *\r\n         * @returns boolean\r\n         */\r\n        isDelta(): boolean {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\r\n            builder.startObject(3);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long id\r\n         */\r\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\r\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset dataOffset\r\n         */\r\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(1, dataOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param boolean isDelta\r\n         */\r\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\r\n            builder.addFieldInt8(2, +isDelta, +false);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\r\n            DictionaryBatch.startDictionaryBatch(builder);\r\n            DictionaryBatch.addId(builder, id);\r\n            DictionaryBatch.addData(builder, dataOffset);\r\n            DictionaryBatch.addIsDelta(builder, isDelta);\r\n            return DictionaryBatch.endDictionaryBatch(builder);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace org.apache.arrow.flatbuf {\r\n    export class Message {\r\n        bb: flatbuffers.ByteBuffer | null = null;\r\n\r\n        bb_pos: number = 0;\r\n        /**\r\n         * @param number i\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @returns Message\r\n         */\r\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\r\n            this.bb_pos = i;\r\n            this.bb = bb;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.ByteBuffer bb\r\n         * @param Message= obj\r\n         * @returns Message\r\n         */\r\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\r\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\r\n         */\r\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\r\n            let offset = this.bb!.__offset(this.bb_pos, 4);\r\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\r\n        }\r\n\r\n        /**\r\n         * @returns org.apache.arrow.flatbuf.MessageHeader\r\n         */\r\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\r\n            let offset = this.bb!.__offset(this.bb_pos, 6);\r\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Table obj\r\n         * @returns ?flatbuffers.Table\r\n         */\r\n        header<T extends flatbuffers.Table>(obj: T): T | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 8);\r\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns flatbuffers.Long\r\n         */\r\n        bodyLength(): flatbuffers.Long {\r\n            let offset = this.bb!.__offset(this.bb_pos, 10);\r\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n        }\r\n\r\n        /**\r\n         * @param number index\r\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\r\n         * @returns org.apache.arrow.flatbuf.KeyValue\r\n         */\r\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\r\n            let offset = this.bb!.__offset(this.bb_pos, 12);\r\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\r\n        }\r\n\r\n        /**\r\n         * @returns number\r\n         */\r\n        customMetadataLength(): number {\r\n            let offset = this.bb!.__offset(this.bb_pos, 12);\r\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         */\r\n        static startMessage(builder: flatbuffers.Builder) {\r\n            builder.startObject(5);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\r\n         */\r\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\r\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\r\n         */\r\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\r\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset headerOffset\r\n         */\r\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(2, headerOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Long bodyLength\r\n         */\r\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\r\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset customMetadataOffset\r\n         */\r\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\r\n            builder.addFieldOffset(4, customMetadataOffset, 0);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param Array.<flatbuffers.Offset> data\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n            builder.startVector(4, data.length, 4);\r\n            for (let i = data.length - 1; i >= 0; i--) {\r\n                builder.addOffset(data[i]);\r\n            }\r\n            return builder.endVector();\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param number numElems\r\n         */\r\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\r\n            builder.startVector(4, numElems, 4);\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @returns flatbuffers.Offset\r\n         */\r\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n            let offset = builder.endObject();\r\n            return offset;\r\n        }\r\n\r\n        /**\r\n         * @param flatbuffers.Builder builder\r\n         * @param flatbuffers.Offset offset\r\n         */\r\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n            builder.finish(offset);\r\n        }\r\n\r\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n            Message.startMessage(builder);\r\n            Message.addVersion(builder, version);\r\n            Message.addHeaderType(builder, headerType);\r\n            Message.addHeader(builder, headerOffset);\r\n            Message.addBodyLength(builder, bodyLength);\r\n            Message.addCustomMetadata(builder, customMetadataOffset);\r\n            return Message.endMessage(builder);\r\n        }\r\n    }\r\n}\r\n"]}