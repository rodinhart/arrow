{"version":3,"sources":["builder/buffer.ts"],"names":[],"mappings":"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","file":"buffer.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { memcpy } from '../util/buffer';\r\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\r\nimport {\r\n    TypedArray, TypedArrayConstructor,\r\n    BigIntArray, BigIntArrayConstructor\r\n} from '../interfaces';\r\n\r\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\r\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\r\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\r\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\r\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\r\n    any;\r\n\r\n/** @ignore */\r\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\r\n/** @ignore */\r\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\r\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\r\n) as T;\r\n\r\n/** @ignore */\r\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\r\n    readonly offset: number;\r\n}\r\n\r\n/** @ignore */\r\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\r\n\r\n    constructor(buffer: T, stride = 1) {\r\n        this.buffer = buffer;\r\n        this.stride = stride;\r\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\r\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\r\n        this._resize(this.length = buffer.length / stride | 0);\r\n    }\r\n\r\n    public buffer: T;\r\n    public length: number;\r\n    public readonly stride: number;\r\n    public readonly ArrayType: ArrayCtor<T>;\r\n    public readonly BYTES_PER_ELEMENT: number;\r\n\r\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\r\n    public get reservedLength() { return this.buffer.length / this.stride; }\r\n    public get reservedByteLength() { return this.buffer.byteLength; }\r\n\r\n    // @ts-ignore\r\n    public set(index: number, value: TValue) { return this; }\r\n    public append(value: TValue) { return this.set(this.length, value); }\r\n    public reserve(extra: number) {\r\n        if (extra > 0) {\r\n            this.length += extra;\r\n            const stride = this.stride;\r\n            const length = this.length * stride;\r\n            const reserved = this.buffer.length;\r\n            if (length >= reserved) {\r\n                this._resize(reserved === 0\r\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\r\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\r\n                );\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    public flush(length = this.length) {\r\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\r\n        const array = sliceOrExtendArray<T>(this.buffer, length);\r\n        this.clear();\r\n        return array;\r\n    }\r\n    public clear() {\r\n        this.length = 0;\r\n        this._resize(0);\r\n        return this;\r\n    }\r\n    protected _resize(newLength: number) {\r\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\r\n    }\r\n}\r\n\r\n(BufferBuilder.prototype as any).offset = 0;\r\n\r\n/** @ignore */\r\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\r\n    public last() { return this.get(this.length - 1); }\r\n    public get(index: number) { return this.buffer[index]; }\r\n    public set(index: number, value: number) {\r\n        this.reserve(index - this.length + 1);\r\n        this.buffer[index * this.stride] = value;\r\n        return this;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\r\n\r\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\r\n\r\n    public numValid = 0;\r\n    public get numInvalid() { return this.length - this.numValid; }\r\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\r\n    public set(idx: number, val: number) {\r\n        const { buffer } = this.reserve(idx - this.length + 1);\r\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\r\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\r\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\r\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\r\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\r\n        return this;\r\n    }\r\n    public clear() {\r\n        this.numValid = 0;\r\n        return super.clear();\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\r\n    constructor(data = new Int32Array(1)) { super(data, 1); }\r\n    public append(value: number) {\r\n        return this.set(this.length - 1, value);\r\n    }\r\n    public set(index: number, value: number) {\r\n        const offset = this.length - 1;\r\n        const buffer = this.reserve(index - offset + 1).buffer;\r\n        if (offset < index++) {\r\n            buffer.fill(buffer[offset], offset, index);\r\n        }\r\n        buffer[index] = buffer[index - 1] + value;\r\n        return this;\r\n    }\r\n    public flush(length = this.length - 1) {\r\n        if (length > this.length) {\r\n            this.set(length - 1, 0);\r\n        }\r\n        return super.flush(length + 1);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\r\n    // @ts-ignore\r\n    public buffer64: R;\r\n    // @ts-ignore\r\n    protected _ArrayType64: BigIntArrayConstructor<R>;\r\n    public get ArrayType64() {\r\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\r\n    }\r\n    public set(index: number, value: DataValue<T>) {\r\n        this.reserve(index - this.length + 1);\r\n        switch (typeof value) {\r\n            case 'bigint': this.buffer64[index] = value; break;\r\n            case 'number': this.buffer[index * this.stride] = value; break;\r\n            default: this.buffer.set(value as TypedArray, index * this.stride);\r\n        }\r\n        return this;\r\n    }\r\n    protected _resize(newLength: number) {\r\n        const data = super._resize(newLength);\r\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\r\n        if (BigIntAvailable) {\r\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\r\n        }\r\n        return data;\r\n    }\r\n}\r\n"]}