{"version":3,"sources":["builder/map.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;AAErB,OAAO,EAAE,KAAK,EAAE,MAAM,WAAW,CAAC;AAClC,OAAO,EAAY,IAAI,EAAU,MAAM,SAAS,CAAC;AACjD,OAAO,EAAW,oBAAoB,EAAE,MAAM,YAAY,CAAC;AAM3D,cAAc;AACd,MAAM,OAAO,UAA4E,SAAQ,oBAAuC;IAG7H,GAAG,CAAC,KAAa,EAAE,KAAgC;QACtD,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,KAA+B,CAAC,CAAC;IAC7D,CAAC;IAEM,QAAQ,CAAC,KAAa,EAAE,KAAwB;QACnD,KAAK,GAAG,KAAK,YAAY,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACtE,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAqB,CAAC,CAAC;QAChF,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,cAAc,IAAI,KAAK,CAAC,IAAI,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9B,CAAC;IAEM,QAAQ,CAAC,KAA4C,EAAE,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE;QACtF,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;SAC3D;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC;QACxC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAO,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpF,OAAO,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IAChC,CAAC;IAES,aAAa,CAAC,OAAwB;QAC5C,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YAC7B,IAAI,KAAK,KAAK,SAAS,EAAE;gBACrB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aACzB;iBAAM;gBACH,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC/B,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;aAChC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ","file":"map.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Field } from '../schema';\r\nimport { DataType, Map_, Struct } from '../type';\r\nimport { Builder, VariableWidthBuilder } from '../builder';\r\n\r\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\r\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\r\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\r\n\r\n/** @ignore */\r\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\r\n\r\n    protected _pending: MapValues<K, V> | undefined;\r\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\r\n        return super.set(index, value as MapValue<K, V> | TNull);\r\n    }\r\n\r\n    public setValue(index: number, value: MapValueExt<K, V>) {\r\n        value = value instanceof Map ? value : new Map(Object.entries(value));\r\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\r\n        const current = pending.get(index);\r\n        current && (this._pendingLength -= current.size);\r\n        this._pendingLength += value.size;\r\n        pending.set(index, value);\r\n    }\r\n\r\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\r\n        if (this.numChildren > 0) {\r\n            throw new Error('ListBuilder can only have one child.');\r\n        }\r\n        this.children[this.numChildren] = child;\r\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\r\n        return this.numChildren - 1;\r\n    }\r\n\r\n    protected _flushPending(pending: MapValues<K, V>) {\r\n        const offsets = this._offsets;\r\n        const setValue = this._setValue;\r\n        pending.forEach((value, index) => {\r\n            if (value === undefined) {\r\n                offsets.set(index, 0);\r\n            } else {\r\n                offsets.set(index, value.size);\r\n                setValue(this, index, value);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}