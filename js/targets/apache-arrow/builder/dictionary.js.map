{"version":3,"sources":["builder/dictionary.ts"],"names":[],"mappings":"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","file":"dictionary.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector';\r\nimport { IntBuilder } from './int';\r\nimport { Dictionary, DataType } from '../type';\r\nimport { Builder, BuilderOptions } from '../builder';\r\n\r\ntype DictionaryHashFunction = (x: any) => string | number;\r\n\r\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\r\n    dictionaryHashFunction?: DictionaryHashFunction;\r\n}\r\n\r\n/** @ignore */\r\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\r\n\r\n    protected _dictionaryOffset: number;\r\n    protected _dictionary?: Vector<T['dictionary']>;\r\n    protected _keysToIndices: { [key: string]: number };\r\n    public readonly indices: IntBuilder<T['indices']>;\r\n    public readonly dictionary: Builder<T['dictionary']>;\r\n\r\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\r\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\r\n        this._nulls = <any> null;\r\n        this._dictionaryOffset = 0;\r\n        this._keysToIndices = Object.create(null);\r\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\r\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\r\n        if (typeof hashFn === 'function') {\r\n            this.valueToKey = hashFn;\r\n        }\r\n    }\r\n\r\n    public get values() { return this.indices.values; }\r\n    public get nullCount() { return this.indices.nullCount; }\r\n    public get nullBitmap() { return this.indices.nullBitmap; }\r\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\r\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\r\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\r\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\r\n    public setValid(index: number, valid: boolean) {\r\n        const indices = this.indices;\r\n        valid = indices.setValid(index, valid);\r\n        this.length = indices.length;\r\n        return valid;\r\n    }\r\n    public setValue(index: number, value: T['TValue']) {\r\n        let keysToIndices = this._keysToIndices;\r\n        let key = this.valueToKey(value);\r\n        let idx = keysToIndices[key];\r\n        if (idx === undefined) {\r\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\r\n        }\r\n        return this.indices.setValue(index, idx);\r\n    }\r\n    public flush() {\r\n        const type = this.type;\r\n        const prev = this._dictionary;\r\n        const curr = this.dictionary.toVector();\r\n        const data = this.indices.flush().clone(type);\r\n        data.dictionary = prev ? prev.concat(curr) : curr;\r\n        this.finished || (this._dictionaryOffset += curr.length);\r\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\r\n        this.clear();\r\n        return data;\r\n    }\r\n    public finish() {\r\n        this.indices.finish();\r\n        this.dictionary.finish();\r\n        this._dictionaryOffset = 0;\r\n        this._keysToIndices = Object.create(null);\r\n        return super.finish();\r\n    }\r\n    public clear() {\r\n        this.indices.clear();\r\n        this.dictionary.clear();\r\n        return super.clear();\r\n    }\r\n    public valueToKey(val: any): string | number {\r\n        return typeof val === 'string' ? val : `${val}`;\r\n    }\r\n}\r\n"]}