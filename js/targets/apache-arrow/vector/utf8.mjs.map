{"version":3,"sources":["vector/utf8.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;AAErB,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAEnC,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AACpC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAEvC,OAAO,EAAE,wBAAwB,EAAE,MAAM,SAAS,CAAC;AAGnD,cAAc;AACd,MAAM,OAAO,UAAW,SAAQ,UAAgB;IAK5C,kBAAkB;IACX,MAAM,CAAC,IAAI,CAAc,KAA8J;QAC1L,OAAO,wBAAwB,CAAC,GAAG,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;IAC7D,CAAC;IACM,QAAQ;QACX,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC;CACJ","file":"utf8.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector';\r\nimport { Chunked } from './chunked';\r\nimport { BaseVector } from './base';\r\nimport { Binary, Utf8 } from '../type';\r\nimport { VectorBuilderOptions } from './index';\r\nimport { vectorFromValuesWithType } from './index';\r\nimport { VectorBuilderOptionsAsync } from './index';\r\n\r\n/** @ignore */\r\nexport class Utf8Vector extends BaseVector<Utf8> {\r\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\r\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\r\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, string | TNull>): Chunked<Utf8>;\r\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, string | TNull>): Promise<Chunked<Utf8>>;\r\n    /** @nocollapse */\r\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, string | TNull> | VectorBuilderOptionsAsync<Utf8, string | TNull>) {\r\n        return vectorFromValuesWithType(() => new Utf8(), input);\r\n    }\r\n    public asBinary() {\r\n        return Vector.new(this.data.clone(new Binary()));\r\n    }\r\n}\r\n"]}