{"version":3,"sources":["vector/dictionary.ts"],"names":[],"mappings":";AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;;;AAErB,kCAA+B;AAC/B,sCAAmC;AACnC,iCAAoC;AAGpC,mCAAmD;AAEnD,kCAAsD;AAKtD,cAAc;AACd,MAAa,gBAAuE,SAAQ,iBAA+B;IAcvH,YAAY,IAA+B;QACvC,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,OAAO,GAAG,eAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7D,CAAC;IAbD,kBAAkB;IACX,MAAM,CAAC,IAAI,CAAuD,GAAG,IAAW;QACnF,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACnB,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,IAAyB,CAAC;YAC1D,MAAM,IAAI,GAAG,IAAI,iBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC9D,OAAO,eAAM,CAAC,GAAG,CAAC,WAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;SACnF;QACD,OAAO,gCAAwB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC;IASD,IAAW,UAAU,KAAK,OAAmB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC7D,aAAa,CAAC,KAAQ,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClE,MAAM,CAAC,GAAW,IAA2B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5E,QAAQ,CAAC,GAAW,IAAwB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9E,MAAM,CAAC,GAAW,EAAE,GAA0B,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IACtF,QAAQ,CAAC,GAAW,EAAE,KAAyB,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;CACtG;AA3BD,4CA2BC;AAEA,gBAAgB,CAAC,SAAiB,CAAC,OAAO,GAAG,IAAI,CAAC","file":"dictionary.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Vector } from '../vector';\r\nimport { BaseVector } from './base';\r\nimport { VectorType as V } from '../interfaces';\r\nimport { VectorBuilderOptions } from './index';\r\nimport { vectorFromValuesWithType } from './index';\r\nimport { VectorBuilderOptionsAsync } from './index';\r\nimport { DataType, Dictionary, TKeys } from '../type';\r\n\r\n/** @ignore */\r\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\r\n\r\n/** @ignore */\r\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\r\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\r\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\r\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\r\n    /** @nocollapse */\r\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\r\n        if (args.length === 3) {\r\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\r\n            const type = new Dictionary(values.type, indices, null, null);\r\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\r\n        }\r\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\r\n    }\r\n\r\n    constructor(data: Data<Dictionary<T, TKey>>) {\r\n        super(data);\r\n        this.indices = Vector.new(data.clone(this.type.indices));\r\n    }\r\n\r\n    public readonly indices: V<TKey>;\r\n\r\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\r\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\r\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\r\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\r\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\r\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\r\n}\r\n\r\n(DictionaryVector.prototype as any).indices = null;\r\n"]}