{"version":3,"sources":["vector/date.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;AAErB,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAEnC,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AAGpC,OAAO,EAAE,wBAAwB,EAAE,MAAM,SAAS,CAAC;AAEnD,OAAO,EAAS,OAAO,EAAE,eAAe,EAAG,MAAM,SAAS,CAAC;AAK3D,cAAc;AACd,MAAM,OAAO,UAAoC,SAAQ,UAAa;IAOlE,kBAAkB;IACX,MAAM,CAAC,IAAI,CAA+B,GAAG,IAA+J;QAC/M,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACnB,OAAO,wBAAwB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,eAAe,EAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACzH;QACD,OAAO,wBAAwB,CAAC,GAAG,EAAE,CAAC,IAAI,eAAe,EAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/E,CAAC;CACJ;AAED,cAAc;AACd,MAAM,OAAO,aAAc,SAAQ,UAAmB;CAAG;AAEzD,cAAc;AACd,MAAM,OAAO,qBAAsB,SAAQ,UAA2B;CAAG","file":"date.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { DateUnit } from '../enum';\r\nimport { Chunked } from './chunked';\r\nimport { BaseVector } from './base';\r\nimport { VectorType as V } from '../interfaces';\r\nimport { VectorBuilderOptions } from './index';\r\nimport { vectorFromValuesWithType } from './index';\r\nimport { VectorBuilderOptionsAsync } from './index';\r\nimport { Date_, DateDay, DateMillisecond  } from '../type';\r\n\r\n/** @ignore */\r\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\r\n\r\n/** @ignore */\r\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\r\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\r\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\r\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\r\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\r\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, Date | TNull>): Chunked<T>;\r\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, Date | TNull>): Promise<Chunked<T>>;\r\n    /** @nocollapse */\r\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, Date | TNull> | VectorBuilderOptionsAsync<T, Date | TNull>]) {\r\n        if (args.length === 2) {\r\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\r\n        }\r\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class DateDayVector extends DateVector<DateDay> {}\r\n\r\n/** @ignore */\r\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\r\n"]}