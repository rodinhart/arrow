{"version":3,"sources":["enum.ts"],"names":[],"mappings":";AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;;;AAErB,uCAAuC;AACvC,yCAAyC;AAE3B,QAAA,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;AAClD,QAAA,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;AACrD,QAAA,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;AACrD,QAAA,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC;AACvD,QAAA,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC;AACvD,QAAA,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC;AAC7D,QAAA,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC;AAChE,QAAA,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC;AAEjF;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,IAAY,IAiEX;AAjED,WAAY,IAAI;IACZ,mCAAmC;IACnC,+BAAoB,CAAA;IACpB,6CAA6C;IAC7C,+BAAoB,CAAA;IACpB,oEAAoE;IACpE,6BAAoB,CAAA;IACpB,2CAA2C;IAC3C,iCAAoB,CAAA;IACpB,wDAAwD;IACxD,mCAAoB,CAAA;IACpB,gDAAgD;IAChD,+BAAoB,CAAA;IACpB,gDAAgD;IAChD,+BAAoB,CAAA;IACpB,sFAAsF;IACtF,qCAAoB,CAAA;IACpB,gEAAgE;IAChE,+BAAoB,CAAA;IACpB,iJAAiJ;IACjJ,+BAAoB,CAAA;IACpB,qFAAqF;IACrF,0CAAoB,CAAA;IACpB,mDAAmD;IACnD,wCAAoB,CAAA;IACpB,uCAAuC;IACvC,gCAAoB,CAAA;IACpB,8BAA8B;IAC9B,oCAAoB,CAAA;IACpB,6BAA6B;IAC7B,kCAAoB,CAAA;IACpB,sEAAsE;IACtE,sDAAoB,CAAA;IACpB,oEAAoE;IACpE,kDAAoB,CAAA;IACpB,iCAAiC;IACjC,8BAAoB,CAAA;IAEpB,mCAAmC;IACnC,4CAA0B,CAAA;IAC1B,gCAA0B,CAAA;IAC1B,kCAA0B,CAAA;IAC1B,kCAA0B,CAAA;IAC1B,kCAA0B,CAAA;IAC1B,kCAA0B,CAAA;IAC1B,oCAA0B,CAAA;IAC1B,oCAA0B,CAAA;IAC1B,oCAA0B,CAAA;IAC1B,uCAA2B,CAAA;IAC3B,uCAA2B,CAAA;IAC3B,uCAA2B,CAAA;IAC3B,uCAA2B,CAAA;IAC3B,uDAA2B,CAAA;IAC3B,uDAA2B,CAAA;IAC3B,iEAA2B,CAAA;IAC3B,iEAA2B,CAAA;IAC3B,+DAA2B,CAAA;IAC3B,6CAA2B,CAAA;IAC3B,uDAA2B,CAAA;IAC3B,uDAA2B,CAAA;IAC3B,qDAA2B,CAAA;IAC3B,6CAA2B,CAAA;IAC3B,+CAA2B,CAAA;IAC3B,uDAA2B,CAAA;IAC3B,2DAA2B,CAAA;AAC/B,CAAC,EAjEW,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAiEf;AAED,IAAY,UAoBT;AApBH,WAAY,UAAU;IAClB;;OAEG;IACH,+CAAU,CAAA;IAEV;;OAEG;IACH,2CAAQ,CAAA;IAER;;OAEG;IACH,mDAAY,CAAA;IAEZ;;OAEG;IACH,2CAAQ,CAAA;AACV,CAAC,EApBS,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAoBnB","file":"enum.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport * as Schema_ from './fb/Schema';\r\nimport * as Message_ from './fb/Message';\r\n\r\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\r\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\r\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\r\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\r\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\r\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\r\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\r\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\r\n\r\n/**\r\n * Main data type enumeration.\r\n *\r\n * Data types in this library are all *logical*. They can be expressed as\r\n * either a primitive physical type (bytes or bits of some fixed size), a\r\n * nested type consisting of other data types, or another data type (e.g. a\r\n * timestamp encoded as an int64).\r\n *\r\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\r\n * IPC payload.\r\n *\r\n * The rest of the values are specified here so TypeScript can narrow the type\r\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\r\n * metadata like `bitWidth` that impact the type signatures of the values we\r\n * accept and return.\r\n *\r\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\r\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\r\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\r\n * underlying `Int32Array`.\r\n *\r\n * Library consumers benefit by knowing the narrowest type, since we can ensure\r\n * the types across all public methods are propagated, and never bail to `any`.\r\n * These values are _never_ used at runtime, and they will _never_ be written\r\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\r\n */\r\nexport enum Type {\r\n    /** The default placeholder type */\r\n    NONE            =  0,\r\n    /** A NULL type having no physical storage */\r\n    Null            =  1,\r\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\r\n    Int             =  2,\r\n    /** 2, 4, or 8-byte floating point value */\r\n    Float           =  3,\r\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\r\n    Binary          =  4,\r\n    /** UTF8 variable-length string as List<Char> */\r\n    Utf8            =  5,\r\n    /** Boolean as 1 bit, LSB bit-packed ordering */\r\n    Bool            =  6,\r\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\r\n    Decimal         =  7,\r\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\r\n    Date            =  8,\r\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\r\n    Time            =  9,\r\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\r\n    Timestamp       = 10,\r\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\r\n    Interval        = 11,\r\n    /** A list of some logical data type */\r\n    List            = 12,\r\n    /** Struct of logical types */\r\n    Struct          = 13,\r\n    /** Union of logical types */\r\n    Union           = 14,\r\n    /** Fixed-size binary. Each value occupies the same number of bytes */\r\n    FixedSizeBinary = 15,\r\n    /** Fixed-size list. Each value occupies the same number of bytes */\r\n    FixedSizeList   = 16,\r\n    /** Map of named logical types */\r\n    Map             = 17,\r\n\r\n    /** Dictionary aka Category type */\r\n    Dictionary            = -1,\r\n    Int8                  = -2,\r\n    Int16                 = -3,\r\n    Int32                 = -4,\r\n    Int64                 = -5,\r\n    Uint8                 = -6,\r\n    Uint16                = -7,\r\n    Uint32                = -8,\r\n    Uint64                = -9,\r\n    Float16               = -10,\r\n    Float32               = -11,\r\n    Float64               = -12,\r\n    DateDay               = -13,\r\n    DateMillisecond       = -14,\r\n    TimestampSecond       = -15,\r\n    TimestampMillisecond  = -16,\r\n    TimestampMicrosecond  = -17,\r\n    TimestampNanosecond   = -18,\r\n    TimeSecond            = -19,\r\n    TimeMillisecond       = -20,\r\n    TimeMicrosecond       = -21,\r\n    TimeNanosecond        = -22,\r\n    DenseUnion            = -23,\r\n    SparseUnion           = -24,\r\n    IntervalDayTime       = -25,\r\n    IntervalYearMonth     = -26,\r\n}\r\n\r\nexport enum BufferType {\r\n    /**\r\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\r\n     */\r\n    OFFSET = 0,\r\n\r\n    /**\r\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\r\n     */\r\n    DATA = 1,\r\n\r\n    /**\r\n     * Bit vector indicating if each value is null\r\n     */\r\n    VALIDITY = 2,\r\n\r\n    /**\r\n     * Type vector used in Union type\r\n     */\r\n    TYPE = 3\r\n  }\r\n"]}