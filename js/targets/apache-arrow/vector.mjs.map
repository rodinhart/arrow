{"version":3,"sources":["vector.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;AAgCrB,MAAM,OAAgB,cAAc;CAqBnC;AAEA,cAAc,CAAC,SAAiB,CAAC,IAAI,GAAG,IAAI,CAAC;AAE9C,OAAO,EAAE,cAAc,IAAI,MAAM,EAAE,CAAC","file":"vector.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from './data';\r\nimport { DataType } from './type';\r\nimport { Chunked } from './vector/chunked';\r\n\r\n/** @ignore */\r\nexport interface Clonable<R extends AbstractVector> {\r\n    clone(...args: any[]): R;\r\n}\r\n\r\n/** @ignore */\r\nexport interface Sliceable<R extends AbstractVector> {\r\n    slice(begin?: number, end?: number): R;\r\n}\r\n\r\n/** @ignore */\r\nexport interface Applicative<T extends DataType, R extends Chunked> {\r\n    concat(...others: Vector<T>[]): R;\r\n    readonly [Symbol.isConcatSpreadable]: boolean;\r\n}\r\n\r\nexport interface AbstractVector<T extends DataType = any>\r\n    extends Clonable<AbstractVector<T>>,\r\n            Sliceable<AbstractVector<T>>,\r\n            Applicative<T, Chunked<T>> {\r\n\r\n    readonly TType: T['TType'];\r\n    readonly TArray: T['TArray'];\r\n    readonly TValue: T['TValue'];\r\n}\r\n\r\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\r\n\r\n    public abstract readonly data: Data<T>;\r\n    public abstract readonly type: T;\r\n    public abstract readonly typeId: T['TType'];\r\n    public abstract readonly length: number;\r\n    public abstract readonly stride: number;\r\n    public abstract readonly nullCount: number;\r\n    public abstract readonly byteLength: number;\r\n    public abstract readonly numChildren: number;\r\n\r\n    public abstract readonly ArrayType: T['ArrayType'];\r\n\r\n    public abstract isValid(index: number): boolean;\r\n    public abstract get(index: number): T['TValue'] | null;\r\n    public abstract set(index: number, value: T['TValue'] | null): void;\r\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\r\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\r\n\r\n    public abstract toArray(): T['TArray'];\r\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\r\n}\r\n\r\n(AbstractVector.prototype as any).data = null;\r\n\r\nexport { AbstractVector as Vector };\r\n"]}