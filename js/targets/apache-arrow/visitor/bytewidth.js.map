{"version":3,"sources":["visitor/bytewidth.ts"],"names":[],"mappings":";AAAA,0BAA0B;;;AAoB1B,wCAAqC;AAErC,kCAAyC;AASzC,cAAc,CAAC,MAAM,GAAG,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;AAC3D,cAAc,CAAC,MAAM,+BAA+B,GAAG,CAAC,IAAc,EAAE,EAAE,CAAC,0DAA0D,IAAI,EAAE,CAAC;AAU5I,cAAc;AACd,MAAa,gBAAiB,SAAQ,iBAAO;IAClC,SAAS,CAAa,IAAU,IAAgB,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,QAAQ,CAAc,IAAS,IAAiB,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3E,UAAU,CAAY,IAAW,IAAe,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC1F,WAAW,CAAW,IAAY,IAAc,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzG,SAAS,CAAa,IAAU,IAAgB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzG,SAAS,CAAa,IAAU,IAAgB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/D,YAAY,CAAU,IAAa,IAAa,OAAO,EAAE,CAAC,CAAC,CAAC;IAC5D,SAAS,CAAa,IAAW,IAAe,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7E,SAAS,CAAa,IAAU,IAAgB,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3E,cAAc,CAAQ,IAAe,IAAW,OAAO,IAAI,CAAC,IAAI,KAAK,eAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/F,aAAa,CAAS,IAAc,IAAY,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7E,SAAS,CAAa,IAAU,IAAgB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzG,WAAW,CAAW,IAAY,IAAc,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACxG,UAAU,CAAY,IAAW,IAAe,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACxG,oBAAoB,CAAE,IAAqB,IAAK,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACxE,kBAAkB,CAAI,IAAmB,IAAO,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACxH,QAAQ,CAAc,IAAU,IAAgB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACxG,eAAe,CAAO,IAAgB,IAAU,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAClF,WAAW,CAAW,MAAe,IAAW,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/G,WAAW,CAAW,MAAc,IAAY,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;CAClH;AArBD,4CAqBC;AAED,cAAc;AACD,QAAA,QAAQ,GAAG,IAAI,gBAAgB,EAAE,CAAC","file":"bytewidth.js","sourcesContent":["/* istanbul ignore file */\r\n\r\n// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Visitor } from '../visitor';\r\nimport { VectorType } from '../interfaces';\r\nimport { Type, TimeUnit } from '../enum';\r\nimport { Schema, Field } from '../schema';\r\nimport {\r\n    DataType, Dictionary,\r\n    Float, Int, Date_, Interval, Time, Timestamp,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\r\n    List, FixedSizeList, Map_, Struct, Union,\r\n} from '../type';\r\n\r\n/** @ignore */ const sum = (x: number, y: number) => x + y;\r\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\r\n\r\n/** @ignore */\r\nexport interface ByteWidthVisitor extends Visitor {\r\n    visit<T extends DataType>(node: T): number;\r\n    visitMany<T extends DataType>(nodes: T[]): number[];\r\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\r\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\r\n}\r\n\r\n/** @ignore */\r\nexport class ByteWidthVisitor extends Visitor {\r\n    public visitNull            (____: Null            ) { return 0; }\r\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\r\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\r\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\r\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\r\n    public visitBool            (____: Bool            ) { return 1 / 8; }\r\n    public visitDecimal         (____: Decimal         ) { return 16; }\r\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\r\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\r\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\r\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\r\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\r\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\r\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\r\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\r\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\r\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\r\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\r\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\r\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\r\n}\r\n\r\n/** @ignore */\r\nexport const instance = new ByteWidthVisitor();\r\n"]}