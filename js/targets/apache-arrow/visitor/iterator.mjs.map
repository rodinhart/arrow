{"version":3,"sources":["visitor/iterator.ts"],"names":[],"mappings":"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","file":"iterator.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data';\r\nimport { Type } from '../enum';\r\nimport { Visitor } from '../visitor';\r\nimport { VectorType } from '../interfaces';\r\nimport { iterateBits } from '../util/bit';\r\nimport { instance as getVisitor } from './get';\r\nimport {\r\n    DataType, Dictionary,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n    Float, Float16, Float32, Float64,\r\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\r\n    Date_, DateDay, DateMillisecond,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Union, DenseUnion, SparseUnion,\r\n} from '../type';\r\n\r\n/** @ignore */\r\nexport interface IteratorVisitor extends Visitor {\r\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\r\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\r\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\r\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\r\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\r\n}\r\n\r\n/** @ignore */\r\nexport class IteratorVisitor extends Visitor {}\r\n\r\n/** @ignore */\r\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\r\n    const getFn = getVisitor.getVisitFn(vector);\r\n    return iterateBits<T['TValue'] | null>(\r\n        vector.data.nullBitmap, vector.data.offset, vector.length, vector,\r\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\r\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\r\n    );\r\n}\r\n\r\n/** @ignore */\r\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\r\n\r\n    // If nullable, iterate manually\r\n    if (vector.nullCount > 0) {\r\n        return nullableIterator<T>(vector);\r\n    }\r\n\r\n    const { type, typeId, length } = vector;\r\n\r\n    // Fast case, defer to native iterators if possible\r\n    if (vector.stride === 1 && (\r\n        (typeId === Type.Timestamp) ||\r\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\r\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\r\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\r\n    )) {\r\n        return vector.data.values.subarray(0, length)[Symbol.iterator]();\r\n    }\r\n\r\n    // Otherwise, iterate manually\r\n    return (function* (getFn) {\r\n        for (let index = -1; ++index < length;) {\r\n            yield getFn(vector, index);\r\n        }\r\n    })(getVisitor.getVisitFn(vector));\r\n}\r\n\r\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\r\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\r\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\r\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\r\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\r\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\r\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\r\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\r\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\r\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\r\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\r\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\r\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\r\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\r\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\r\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\r\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\r\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\r\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\r\nIteratorVisitor.prototype.visitList                 = vectorIterator;\r\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\r\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\r\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\r\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\r\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\r\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\r\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\r\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\r\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\r\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\r\n\r\n/** @ignore */\r\nexport const instance = new IteratorVisitor();\r\n"]}