{"version":3,"sources":["compute/dataframe.ts"],"names":[],"mappings":"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","file":"dataframe.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Table } from '../table';\r\nimport { Vector } from '../vector';\r\nimport { IntVector } from '../vector/int';\r\nimport { Field, Schema } from '../schema';\r\nimport { Predicate, Col } from './predicate';\r\nimport { RecordBatch } from '../recordbatch';\r\nimport { VectorType as V } from '../interfaces';\r\nimport { DataType, Int, Struct, Dictionary } from '../type';\r\n\r\n/** @ignore */\r\nexport type BindFunc = (batch: RecordBatch) => void;\r\n/** @ignore */\r\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\r\n\r\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\r\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\r\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\r\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\r\n\r\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\r\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\r\n        return new FilteredDataFrame<T>(this.chunks, predicate);\r\n    }\r\n    public scan(next: NextFunc, bind?: BindFunc) {\r\n        const batches = this.chunks, numBatches = batches.length;\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            if (bind) { bind(batch); }\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                next(index, batch);\r\n            }\r\n        }\r\n    }\r\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\r\n        const batches = this.chunks, numBatches = batches.length;\r\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            if (bind) { bind(batch); }\r\n            // yield all indices\r\n            for (let index = batch.length; --index >= 0;) {\r\n                next(index, batch);\r\n            }\r\n        }\r\n    }\r\n    public countBy(name: Col | string) {\r\n        const batches = this.chunks, numBatches = batches.length;\r\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\r\n        // Assume that all dictionary batches are deltas, which means that the\r\n        // last record batch has the most complete dictionary\r\n        count_by.bind(batches[numBatches - 1]);\r\n        const vector = count_by.vector as V<Dictionary>;\r\n        if (!DataType.isDictionary(vector.type)) {\r\n            throw new Error('countBy currently only supports dictionary-encoded columns');\r\n        }\r\n\r\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\r\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\r\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\r\n\r\n        const counts = new CountsArrayType(vector.dictionary.length);\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            // rebind the countBy Col\r\n            count_by.bind(batch);\r\n            const keys = (count_by.vector as V<Dictionary>).indices;\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                let key = keys.get(index);\r\n                if (key !== null) { counts[key]++; }\r\n            }\r\n        }\r\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\r\n    constructor(values: Vector<T>, counts: V<TCount>) {\r\n        type R = { values: T, counts: TCount };\r\n        const schema = new Schema<R>([\r\n            new Field('values', values.type),\r\n            new Field('counts', counts.type)\r\n        ]);\r\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\r\n    }\r\n    public toJSON(): Object {\r\n        const values = this.getColumnAt(0)!;\r\n        const counts = this.getColumnAt(1)!;\r\n        const result = {} as { [k: string]: number | null };\r\n        for (let i = -1; ++i < this.length;) {\r\n            result[values.get(i)] = counts.get(i);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\r\n    private _predicate: Predicate;\r\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\r\n        super(batches);\r\n        this._predicate = predicate;\r\n    }\r\n    public scan(next: NextFunc, bind?: BindFunc) {\r\n        // inlined version of this:\r\n        // this.parent.scan((idx, columns) => {\r\n        //     if (this.predicate(idx, columns)) next(idx, columns);\r\n        // });\r\n        const batches = this._chunks;\r\n        const numBatches = batches.length;\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            const predicate = this._predicate.bind(batch);\r\n            let isBound = false;\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                if (predicate(index, batch)) {\r\n                    // bind batches lazily - if predicate doesn't match anything\r\n                    // in the batch we don't need to call bind on the batch\r\n                    if (bind && !isBound) {\r\n                        bind(batch);\r\n                        isBound = true;\r\n                    }\r\n                    next(index, batch);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\r\n        const batches = this._chunks;\r\n        const numBatches = batches.length;\r\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            const predicate = this._predicate.bind(batch);\r\n            let isBound = false;\r\n            // yield all indices\r\n            for (let index = batch.length; --index >= 0;) {\r\n                if (predicate(index, batch)) {\r\n                    // bind batches lazily - if predicate doesn't match anything\r\n                    // in the batch we don't need to call bind on the batch\r\n                    if (bind && !isBound) {\r\n                        bind(batch);\r\n                        isBound = true;\r\n                    }\r\n                    next(index, batch);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public count(): number {\r\n        // inlined version of this:\r\n        // let sum = 0;\r\n        // this.parent.scan((idx, columns) => {\r\n        //     if (this.predicate(idx, columns)) ++sum;\r\n        // });\r\n        // return sum;\r\n        let sum = 0;\r\n        const batches = this._chunks;\r\n        const numBatches = batches.length;\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            const predicate = this._predicate.bind(batch);\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                if (predicate(index, batch)) { ++sum; }\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\r\n        // inlined version of this:\r\n        // this.parent.scan((idx, columns) => {\r\n        //     if (this.predicate(idx, columns)) next(idx, columns);\r\n        // });\r\n        const batches = this._chunks;\r\n        const numBatches = batches.length;\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            // TODO: bind batches lazily\r\n            // If predicate doesn't match anything in the batch we don't need\r\n            // to bind the callback\r\n            const predicate = this._predicate.bind(batch);\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\r\n            }\r\n        }\r\n    }\r\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\r\n        return new FilteredDataFrame<T>(\r\n            this._chunks,\r\n            this._predicate.and(predicate)\r\n        );\r\n    }\r\n    public countBy(name: Col | string) {\r\n        const batches = this._chunks, numBatches = batches.length;\r\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\r\n        // Assume that all dictionary batches are deltas, which means that the\r\n        // last record batch has the most complete dictionary\r\n        count_by.bind(batches[numBatches - 1]);\r\n        const vector = count_by.vector as V<Dictionary>;\r\n        if (!DataType.isDictionary(vector.type)) {\r\n            throw new Error('countBy currently only supports dictionary-encoded columns');\r\n        }\r\n\r\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\r\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\r\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\r\n\r\n        const counts = new CountsArrayType(vector.dictionary.length);\r\n\r\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\r\n            // load batches\r\n            const batch = batches[batchIndex];\r\n            const predicate = this._predicate.bind(batch);\r\n            // rebind the countBy Col\r\n            count_by.bind(batch);\r\n            const keys = (count_by.vector as V<Dictionary>).indices;\r\n            // yield all indices\r\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\r\n                let key = keys.get(index);\r\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\r\n            }\r\n        }\r\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\r\n    }\r\n}\r\n"]}